# country
on_startup = {
	if = {
		limit = {
			tag = AAA
		}
		meiou_startup = yes
	}
	if = {
		limit = {
			ai = no
		}
		remove_country_modifier = stability_policy_1
		remove_country_modifier = stability_policy_2
		remove_country_modifier = stability_policy_3
		remove_country_modifier = AI_centralization_policy
		if = {
			limit = { singleplayer_trigger = yes }
			every_country = { clr_country_flag = admin_country }
			set_country_flag = admin_country
			set_global_flag = singleplayer
		}
		else = { set_global_flag = multiplayer }
	}
	if = {
		limit = {
			NOT = { has_country_flag = init_done }
		}
		#if = {
			#limit = {
			#	exists = yes
			#}
			set_country_flag = init_done
			
			trigger_switch = {
				on_trigger = tag
				
				AAA = {
					country_event = { id = setup_event.1 }
					country_event = { id = calcul_byoa.1 days = 1 }
					country_event = { id = calcul_byoa.2 days = 10 }
					
					# Run on day 0, on load
					country_event = { id = setup_event.11 }
					country_event = { id = cb_types.1 }
					country_event = { id = cb_types.2 }
					country_event = { id = dg_setup.001 }
					country_event = { id = HRE_war_mechanics.005 }
					set_global_flag = PT_L_init
					plaguetracker_init = yes
					#set_variable = { which = legalism_date value = -357 }
					#set_variable = { which = I_meritocracy_date value = -357 }
				}
				
				TLE = {
					Effect_set_capital = { target=1522 }
				}
				
				OTT = {
					country_event = { id = setup_event.6 } #1530 Otto Nerf
				}
					
				TUR = {
					country_event = { id = setup_event.6 } #1530 Otto Nerf
				}
				
				CAS = {
					country_event = { id = flavor_spa.8001 } #1356 Castile-Genoa trade deal
				}
				
				KOR = {
					country_event = { id = fall_of_goryeo.2 }
				}
				
				BRA = {
					country_event = { id = markbrandenburg.100 days = 20 } # pre-1360 Bavarian ruler
				}
			}
			
			if = {
				limit = {
					culture_group = japanese
					NOT = { primary_culture = ryukyuan }
				}
				country_event = { id = japan.1 } # Correcting opinions between daimyos
			}
			
			if = {
				limit = {
					ai = no
				}
				country_event = { id = setup_event.2 days = 1 } # scenario description event
				country_event = { id = setup_event.300 days = 10 }
			}
			country_event = { id = rank_change.3 }
			country_event = { id = dg_conversion.001	days = 6 }
			country_event = { id = setup_event.4 days = 5 } # generate heir if there's no info there wasn't one
			country_event = { id = on_new_monarch.2 days = 7 } # delay because of Native American nations
			
			if = {
				limit = {
					is_year = 1530
				}
				country_event = { id = setup_event.5 } #1530 income boost
				country_event = { id = setup_event.10 } #1530 Vietnamese buff
			}
		#}
	}
	
	loan_size = 4  #reset due to save bugs
	
	# To avoid having blank spaces in variable display
	init_as_zero = { variable=EstateIncome_GN_StateTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_GN_StateTax }
	init_as_zero = { variable=EstateIncome_GN_TradeTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_GN_TradeTax }
	init_as_zero = { variable=EstateIncome_GN_ManTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_GN_ManTax }
	init_as_zero = { variable=EstateIncome_LN_StateTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_LN_StateTax }
	init_as_zero = { variable=EstateIncome_LN_TradeTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_LN_TradeTax }
	init_as_zero = { variable=EstateIncome_LN_ManTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_LN_ManTax }
	init_as_zero = { variable=EstateIncome_BG_StateTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_BG_StateTax }
	init_as_zero = { variable=EstateIncome_BG_TradeTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_BG_TradeTax }
	init_as_zero = { variable=EstateIncome_BG_ManTaxRate_Disp }
	init_as_zero = { variable=EstateIncome_BG_ManTax }
	
	init_as_zero = { variable=estate_greater_nobles_influencechange_display }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display }
	init_as_zero = { variable=estate_burghers_influencechange_display }
	init_as_zero = { variable=estate_tribals_influencechange_display }
	
	init_as_zero = { variable=estate_greater_nobles_influencechange_display_1 }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display_1 }
	init_as_zero = { variable=estate_burghers_influencechange_display_1 }
	init_as_zero = { variable=estate_tribals_influencechange_display_1 }
	init_as_zero = { variable=estate_greater_nobles_influencechange_display_2 }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display_2 }
	init_as_zero = { variable=estate_burghers_influencechange_display_2 }
	init_as_zero = { variable=estate_tribals_influencechange_display_2 }
	init_as_zero = { variable=estate_greater_nobles_influencechange_display_3 }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display_3 }
	init_as_zero = { variable=estate_burghers_influencechange_display_3 }
	init_as_zero = { variable=estate_tribals_influencechange_display_3 }
	init_as_zero = { variable=estate_greater_nobles_influencechange_display_4 }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display_4 }
	init_as_zero = { variable=estate_burghers_influencechange_display_4 }
	init_as_zero = { variable=estate_tribals_influencechange_display_4 }
	init_as_zero = { variable=estate_greater_nobles_influencechange_display_5 }
	init_as_zero = { variable=estate_lesser_nobles_influencechange_display_5 }
	init_as_zero = { variable=estate_burghers_influencechange_display_5 }
	init_as_zero = { variable=estate_tribals_influencechange_display_5 }
	#init_as_zero = { variable=art_power_disp }
	
	every_owned_province = {
		init_as_zero = { variable=EstateProv_Income }
		init_as_zero = { variable=EstateIncome_Trade_monthly }
		init_as_zero = { variable=EstateProv_ManPow }
		init_as_zero = { variable=EstateProv_Unrest }
		
		init_as_zero = { variable=CE_TimeDisp }
		#init_as_zero = { variable=CE_OriginDisp }
		init_as_zero = { variable=CE_UnrestDisp }
		init_as_zero = { variable=CE_AutonomyDisp }
		
		init_as_zero = { variable=StateIncome_RuralTax }
		init_as_zero = { variable=StateIncome_UrbanTax }
		
		init_as_zero = { variable=wealth_urban_display }
		init_as_zero = { variable=wealth_rural_display }
		init_as_zero = { variable=wealth_taxed_display }
		
		init_as_zero = { variable=rural_production_display }
		init_as_zero = { variable=food_sale_display }
		init_as_zero = { variable=farm_efficiency_display }
		
		init_as_zero = { variable=production_mine_display }
		init_as_zero = { variable=urban_production_display }
		init_as_zero = { variable=production_urban_value_display }
		
		init_as_zero = { variable=rural_change_display }
		init_as_zero = { variable=urban_change_display }
		init_as_zero = { variable=total_change_display }
		init_as_zero = { variable=estate_disparity_disp }
	}
}

# country
on_religion_change = {
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_religion = ROOT
	}
	if = {
		limit = {
			has_regency = no
		}
		set_ruler_religion = ROOT
	}
	if = {
		limit = {
			has_dlc = "Rights of Man"
			has_consort = yes
		}
		set_consort_religion = ROOT
	}
	#if = {
		#limit = { always = yes }
		set_country_flag = changed_state_religion
		every_owned_province = {
			limit = {
				has_building = temple_heathen
				is_city = yes
			}
			if = {
				limit = {
					has_owner_religion = yes
				}
				remove_building = temple_heathen
				#if = {
				#	limit = {
				#		NOT = { has_building = temple }
				#	}
					add_building = temple
				#}
			}
			else = {
				set_province_flag = temple_to_convert
				owner = {
					if = {
						limit = {
							NOT = { has_country_flag = convert_heathen_temples }
						}
						set_country_flag = convert_heathen_temples
						country_event = {
							id = dg_piety.056
							days = 2
						}
					}
				}
			}
		}
		country_event = { id = dg_conversion.003 }
	#}
	if = {
		limit = {
			NOT = { religion = catholic }
			OR = {
				tag = PAP
				tag = AVI
			}
		}
		change_religion = catholic
	}
	events = {
#		muslim_school_events.20 #Pick School
		propagate_religion_events.7 #Propagated Country is now Muslim
	}
}

# country.
on_secondary_religion_change = {
	# Done from code: add_prestige = -50 (Define: CHANGE_SECONDARY_PRESTIGE_HIT)
	every_owned_province = {
		#if = {
		#	limit = { has_province_modifier = tengri_monastic_order }
			remove_province_modifier = tengri_monastic_order
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_shiite_settled_in_capital }
			remove_province_modifier = tengri_shiite_settled_in_capital
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_insincere_leadership }
			remove_province_modifier = tengri_insincere_leadership
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_religious_influx }
			remove_province_modifier = tengri_religious_influx
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_ruler_questioned }
			remove_province_modifier = tengri_ruler_questioned
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_strengthened_local_clans }
			remove_province_modifier = tengri_strengthened_local_clans
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_growing_cities }
			remove_province_modifier = tengri_growing_cities
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_christian_mission }
			remove_province_modifier = tengri_christian_mission
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_unchristian_values }
			remove_province_modifier = tengri_unchristian_values
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_monastic_order }
			remove_province_modifier = tengri_monastic_order
		#}
		#if = {
		#	limit = { has_province_modifier = hindufication }
			remove_province_modifier = hindufication
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_influx_of_monks }
			remove_province_modifier = tengri_influx_of_monks
		#}
		#if = {
		#	limit = { has_province_modifier = tengri_abandoning_the_old_ways }
			remove_province_modifier = tengri_abandoning_the_old_ways
		#}
	}
	#if = {
	#	limit = { has_country_modifier = tengri_devout_muslim }
		remove_country_modifier = tengri_devout_muslim
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_confucian_elites_alienated }
		remove_country_modifier = tengri_confucian_elites_alienated
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_confucian_titles }
		remove_country_modifier = tengri_confucian_titles
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_traditionalists_strengthened }
		remove_country_modifier = tengri_traditionalists_strengthened
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_confucian_nobles }
		remove_country_modifier = tengri_confucian_nobles
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_pali_legal_traditions }
		remove_country_modifier = tengri_pali_legal_traditions
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_religious_pilgrimages }
		remove_country_modifier = tengri_religious_pilgrimages
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_monks_in_capital }
		remove_country_modifier = tengri_monks_in_capital
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_influx_of_monks }
		remove_country_modifier = tengri_influx_of_monks
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_shiite_immigration }
		remove_country_modifier = tengri_shiite_immigration
	#}
	#if = {
	#	limit = { has_country_modifier = support_of_the_khojas }
		remove_country_modifier = support_of_the_khojas
	#}
	#if = {
	#	limit = { has_country_modifier = black_shamanism_modifier }
	#	remove_country_modifier = black_shamanism_modifier
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_animist_pantheon }
		remove_country_modifier = tengri_animist_pantheon
	#}
	#if = {
	#	limit = { has_country_modifier = zoroastrian_traders }
		remove_country_modifier = zoroastrian_traders
	#}
	#if = {
	#	limit = { has_country_modifier = spread_of_tengri_tea_ceremony }
		remove_country_modifier = spread_of_tengri_tea_ceremony
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_tea_ceremony }
		remove_country_modifier = tengri_tea_ceremony
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_japanese_swordsmithing }
		remove_country_modifier = tengri_japanese_swordsmithing
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_bow_and_arrow_defended }
		remove_country_modifier = tengri_bow_and_arrow_defended
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_support_of_shamans }
		remove_country_modifier = tengri_support_of_shamans
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_hindu_conflict }
		remove_country_modifier = tengri_hindu_conflict
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_hindu_syncretism }
		remove_country_modifier = tengri_hindu_syncretism
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_devout_christian_ruler }
		remove_country_modifier = tengri_devout_christian_ruler
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_personal_confessor }
		remove_country_modifier = tengri_personal_confessor
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_zoroastrian_traders }
		remove_country_modifier = tengri_zoroastrian_traders
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_confucian_administrators }
		remove_country_modifier = tengri_confucian_administrators
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_traditional_elites_alienated }
		remove_country_modifier = tengri_traditional_elites_alienated
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_jihad }
		remove_country_modifier = tengri_jihad
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_stood_up_for_yassa }
		remove_country_modifier = tengri_stood_up_for_yassa
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_sufi_teacher }
		remove_country_modifier = tengri_sufi_teacher
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_qadi }
		remove_country_modifier = tengri_qadi
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_religious_influx }
		remove_country_modifier = tengri_religious_influx
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_ibadi_scholars }
		remove_country_modifier = tengri_ibadi_scholars
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_clergy_conflicts }
		remove_country_modifier = tengri_clergy_conflicts
	#}
	#if = {
	#	limit = { has_country_modifier = tengri_shamans_spurned }
		remove_country_modifier = tengri_shamans_spurned
	#}
	clr_country_flag = khojas_established
	clr_country_flag = tengri_christian_devout_court
	clr_ruler_flag = tengri_muslim_ruler_questioned
	set_variable = { which = khojas_retained value = 0 }
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	#set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	country_event = { id = colonial_nation.90 days = 1 }
}

# country
on_colonial_reintegration = {
	events = {
		colonial_nation.91
	}
}

# country
on_peace_actor = {
	events = {
		#POP_AI.114					# AI war gain
		#usa_dlc.36					# Evacuation Day					#insignificant enough to check every time a peace is declared, feel free to revise
		#native_americans.7			# Appoint Peace Chief
		war_dynamism.3				# Post-war clean-up
		#	POP_looting.011				# Distribute loot from the war
		#	POP_estate_levies.007
		prisonner_of_war.101		# Post-war clean-up
	}
	country_event = { id = POP_looting.011 days = 3	}			# Distribute loot from the war
	country_event = { id = POP_estate_levies.007 }
}

# country
on_peace_recipient = {
	events = {
		#POP_AI.114					# AI war gain
		#native_americans.7			# Appoint Peace Chief
		war_dynamism.3				# Post-war clean-up
		prisonner_of_war.101		# Post-war clean-up
	}

	country_event = { id = POP_looting.011 days = 3	}			# Distribute loot from the war
	country_event = { id = POP_estate_levies.007 }
}

# country
# root = winning country, from = loser country
on_war_won = {
	remove_obsolete_cores_effect = yes
	#reboot_primary_culture_effect = yes
	#remove_obsolete_flags_effect = yes
	events = {
		#POP_AI.114					# AI war gain
		#	POP_estate_levies.007 ### Removes levies and does post war estate cleanup
		dg_mesoamerican.003
		dynastic.1001				# Post-war marriage to secure the peace treaty
		red_turban.9				# Post-war core clean-up in China
		red_turban.10				# Post-war core gain in China
		hindustani_unification.1				# Help for mid/late game Hindustani Muslims
		#hindustani_unification.5				# Cleanup for Tibet
		#hindustani_unification.8				# 1530 Suri/Mughal wars
		#hindustani_unification.9				# 1530 Suri/Mughal wars
		hindustani_unification.10				# Dakhani Viceroyality
		hindustani_unification.11				# Carnatic Nawabite
		hindustani_unification.12				# Kurpa Nawabite
		hindustani_unification.13				# Savanur Nawabite
		
		#malay_states.1				# Cleanup for Kedah #
		#malay_states.2				# Cleanup for Perak #
		#malay_states.3				# Cleanup for Kelantun #
		#malay_states.4				# Cleanup for Terrenganu
		#malay_states.5				# Cleanup for Pahang
		#malay_states.6				# Cleanup for Johore
		#malay_states.7				# Cleanup for Pattanni
		
		#war_dynamism.3				# Post-war clean-up #already triggered by on_peace_actor and on_peace_recipient?
		#	POP_looting.011				# Distribute loot from the war
		#prisonner_of_war.101		# Post-war clean-up #already triggered by on_peace_actor and on_peace_recipient?
		
		flavor_chu.1				# winner inherits CHU
		
		japan.3						# Shogunate is victorious
		japan.4						# Emperor is victorious
		japan.19					# Usurper is defeated
		japan.28					# The position of Kanrei is taken through war
	}
	if = {
		limit = {
			has_global_flag = nanbokucho
			culture_group = japanese
		}
		if = {
			limit = {
				is_subject_of = event_target:japanese_shogun
				FROM = { tag = JAP }
			}
			event_target:japanese_shogun = { country_event = { id = japan.3 days = 5  } }
		}
		else_if = {
			limit = {
				is_subject_of = JAP
				FROM = { tag = event_target:japanese_shogun }
			}
			JAP = { country_event = { id = japan.4 days = 5 } }
		}
	}
	#set_country_flag = was_in_war
	every_owned_province = {
		#if = {
		#	limit = {
		#		has_province_flag = was_occupied
		#	}
			clr_province_flag = was_occupied
		#}
	}
	ROOT = { country_event = { id = tributary_events.32 } }
}

# country
# root = loser country, from = winner country
on_war_lost = {
	events = {
		#POP_AI.114					# AI war gain
		#	POP_estate_levies.007 ### Removes levies and does post war estate cleanup
		dg_mesoamerican.003
		#war_dynamism.3				# Post-war clean-up #already triggered by on_peace_actor and on_peace_recipient?
		#	POP_looting.011				# Distribute loot from the war
		#prisonner_of_war.101		# Post-war clean-up #already triggered by on_peace_actor and on_peace_recipient?
		flavor_chu.7				# Set flag on CHU when they get PU'd
	}
	#set_country_flag = was_in_war
	every_owned_province = {
		#if = {
		#	limit = {
		#		has_province_flag = was_occupied
		#	}
			clr_province_flag = was_occupied
		#}
	}
	ROOT = { country_event = { id = tributary_events.32 } }
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	if = {
		limit = {
			religion = baltic_pagan_reformed
			piety = -0.60
			NOT = { has_country_modifier = morale_boost }
			not_have_religious_scandal = yes
		}
		country_event = { id = dg_romuva.003 }
	}
	else_if = {
		limit = {
			OR = {
				religion = nahuatl
				religion = mesoamerican_religion
				religion = totemism
			}
		}
		change_variable = { which = captured_prisoners value = 1 }
		if = {
			limit = { FROM = { check_variable = { which = captured_icons value = 0 } } } #Not negative
			random = {
				chance = 20
				country_event = { id = dg_mesoamerican.001 }
				if = {
					limit = { FROM = { religion_group = new_world_pagan } }
					FROM = { country_event = { id = dg_mesoamerican.002 } }
				}
			}
		}
	}
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	random_events = {
		100 = tyw_events.22	# Capital Battle in Religious War
	}
	if = {
		limit = {
			OR = {
				religion = nahuatl
				religion = mesoamerican_religion
				religion = inti
			}
		}
		random = { chance = 20 country_event = { id = dg_mesoamerican.002 } }
	}
	events = {
		red_turban.14
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {
	random_events = {
		100 = war_of_the_roses.6	# WotR - Rebel Leaders Captured
		1000 = 0
		# 100 = flavor_swe.3277	# Nils Dacke Killed
	}
	events = {
		prisonner_of_war.001
		hundred_viet.3
	}
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	
}

# province
# root = location, from = country doing it
on_added_to_trade_company = {
	#if = {
	#	limit = { FROM = { full_idea_group = expansion_ideas } }
	#	add_province_modifier = { name = province_bonus_from_expansion_ideas duration = -1 hidden = yes }
	#}
}

# province
# root = location, from = country doing it
on_removed_from_company = {
	
}

# province
# root = location, from = country doing it
on_company_formed = {
	
}

# province
# root = location, from = country doing it
on_company_disolved = {
	
}

# province
# root = location, from = winner country
on_battle_lost_province = {
}

# country
# root = winning country, from = location
on_siege_won_country = {
	events = {
		tyw_events.14 # Fall of Prague in Religious War
		fall_of_goryeo.26 # Liaodong migration
		tianxia.136 #Fall of Chinese Capital to a prince
	}
	random_events = {
		25 = army_professionalism_events.1 #City Sacked
		75 = 0
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
	events = {
		red_turban.14
	}
}

# province
# root = location, from = losing country
on_siege_won_province = {
	events = {
		war_dynamism.2			# Province retaken
		# 15038		#Always war (Secede)
		# 15039		#Always war (OPM inherit)
	}
	if = { #Dei Gratia
		limit = { has_province_modifier = heretic_bastion controlled_by = owner }
		province_event = { id = dg_turmoil.042 }
	}
	ROOT = {
		#if = { limit = { has_province_modifier = foreign_missionaries }
			remove_province_modifier = foreign_missionaries
		#}
		#if = { limit = { has_province_modifier = minority_missionary }
			remove_province_modifier = minority_missionary
		#}
	}
}

# province
# root = location, from = losing country
on_siege_lost_province = {
	events = {
		war_of_the_roses.10		# Lancaster Stronghold
		war_of_the_roses.11		# York Stronghold
		# tribes.9206			# Tribes can sack stuff - event removed
		# fall_of_goryeo.6	# Reforms fail
		# fall_of_goryeo.10	# Coup is successful
		canarias.10			# Conquistadors win
		kara_del.5			# Kara Del is declared
		castles.02
		#POP_province_AI.004		# Possibly ruins city fortifications #appreciate the thought, but this is essentially a duplicate of castles.02
		POP_province_damage.001 # War damage
		POP_province_damage.004 # Rebel damage
		tianxia.150				# Chinese Capital falls
	}
	if = {
		limit = {
			NOT = { has_province_flag = was_occupied }
		}
		set_province_flag = was_occupied
	}
	else = {
		#limit = {
		#	has_province_flag = was_occupied
		#}
		clr_province_flag = was_occupied
	}
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
	# Backup system, copies important data to wastelands, restores it the next day
	ROOT = {
		if = { limit = { 406 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			406 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 1152 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			1152 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 1197 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			1197 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2465 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2465 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2466 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2466 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2508 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2508 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2509 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2509 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2791 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2791 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4087 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4087 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4089 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4089 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 5185 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			5185 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 5186 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			5186 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 5200 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			5200 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 5201 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			5201 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4022 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4022 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 277 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			277 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2160 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2160 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2441 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2441 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4189 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4189 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4190 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4190 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4191 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4191 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4208 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4208 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4192 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4192 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2447 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2447 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4193 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4193 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2455 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2455 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 3304 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			3304 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 3309 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			3309 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 3274 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			3274 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2747 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2747 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 740 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			740 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2511 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2511 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2517 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2517 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2487 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2487 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4226 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4226 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4227 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4227 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2483 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2483 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4225 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4225 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 4224 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			4224 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2489 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2489 = { save_event_target_as = ProvStore }
		}
		else_if = { limit = { 2495 = { NOT = { has_province_flag = storage } } }
			set_province_flag = storage_found
			2495 = { save_event_target_as = ProvStore }
		}
		
		if = {
			limit = { has_province_flag = storage_found }
			cede_province = AAA
			set_variable = { which = prov_to_search which = prov_id }
			Copy_Data_To = { Storage=event_target:ProvStore type=province }
			event_target:ProvStore = { 
				province_event = { id = calcul_byoa.11 days = 1 }
				set_variable = { which = prov_to_search which = PREV }
			}
			set_variable = { which = prov_to_search value = 0 }
			clr_province_flag = storage_found
		}
	}
}

# country
on_new_monarch = {
	check_ruler_stats = yes
	succession_culture_religion_effect = yes
	if = {
		limit = {
			has_country_flag = tribals_recieving_tribute
			check_variable = { which = estate_tribals_weight_share		value = 0.01 }
			check_variable = { which = estate_tribals_treasury_annual	value = 5 }
		}
		if = {
			limit = {
				check_variable = { which = ruler_diplo_ability			value = 1 }
			}
			country_event = { id = POP_Estates_Interactions.403			days = 5 }
		}
		else = {
			country_event = { id = POP_Estates_Interactions.404			days = 5 }
		}
	}
	else = {
		clr_country_flag = tribals_recieving_tribute
		set_variable = { which = tribal_tribute_favor		value = 0 }
		calc_misc_expenses = yes
	}
	clr_country_flag = general_jizya_in_effect
	if = {
		limit = {
			NOT = {
				has_country_modifier = title_1
				has_country_modifier = title_2
				has_country_modifier = title_3
				has_country_modifier = title_4
				has_country_modifier = title_5
				has_country_modifier = title_6
			}
			#has_country_flag = init_done
		}
		add_country_modifier = { name = title_1 duration = -1 }
	}
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			tag = HUN
			#NOT = { has_ruler = "Louis the Great"}
			POL = { has_country_flag = pol_louis_great_heir }
		}
		POL = { country_event = { id = flavor_pol.3024 } }
	}
	if = {
		limit = {
			chinese_imperial_gov_trigger = yes
			culture_group = chinese_group
			has_new_dynasty = yes
		}
		country_event = { id = tianxia.35 days = 5 }
	}
	events = {
		markbrandenburg.300				# Brandenburg loses von Wittelsbach
		markbrandenburg.800				# Brandenburg loses von Luxemburg
		on_new_monarch.2
		treaty_pavia.1000				# von Wittelsbach succession treaty of Bavaria and the Palatinate
		tribal_succession.1				# Harsh anti-tribals.
		#tribes.1						# Large Tribe modifiers update
		dynastic.9492					# Remove some event modifiers
		flavor_mlo.1					# The Ambrosian Republic
		flavor_boh.8					# Winter King in Prague
		flavor_kol.1					# Bavarian Archbishop
		war_of_the_roses.101			# WotR - House of Lancaster wins
		war_of_the_roses.102			# WotR - House of York wins
		war_of_the_roses.106			# WotR - Another dynasty has seized the throne
		#flavor_tur.102					# Janissary Reward
		purple_phoenix.1				# BYZ pretenders
		venetian_republic.1				# Venice after-election
		#bourguignon_armagnac.1			# Bourguignon-Armagnac Conflict
		flavor_bur.1001
		#flavor_boh.16
		flavor_fla.1
		#flavor_fla.2
		#flavor_hol.1001				# Cods and Hooks now with disaster.
		dg_hussite.014					# ADDED BY DEI GRATIA - Defenestration of Prague
		dg_setup.003					# ADDED BY DEI GRATIA - Maintenance event for all religions
		dg_vajrayana.013				# ADDED BY DEI GRATIA - the Supreme Lama is reborn
		dg_asatru.002					# ADDED BY DEI GRATIA - A funeral fit for a $MONARCHTITLE$
		dg_inti.002						# ADDED BY DEI GRATIA - Royal Mummy
		dg_animist.001					# DEI GRATIA - The Walking Dead
		flavor_spa.3004					# Iberian Wedding
		flavor_hab.1011
		flavor_hab.1018
		kara_del.1						# Kara Del event chain
		hundred_viet.1					# Nguyen Kim dies
		flavor_bav.203					# Bavarian Salic Gavelkind
		flavor_bav.204					# End of Wittlesbach local branch
		eastern_haram.2					# Issues for low level Hindu and Muslim empires
		#dynasticcycle.101				# Evaluates monarch stats for the dynastic cycle
		tengri_events.17				# Keep the Khojas in Power?
		#flavor_tus.15					# Savonarola Dies # bot present apparently
		hohenzollerns_1530.1			# Hohenzollern Sucession, Pommerania
		hohenzollerns_1530.2			# Hohenzollern Sucession, Pommerania w/Prussia
		hohenzollerns_1530.3			# Hohenzollern Sucession, Hohenzollern Minors
		hohenzollerns_1530.4			# Hohenzollern Sucession, Hohenzollern Minors w/Prussia
		hohenzollerns_1530.5			# Hohenzollern Sucession, Prussia
		hohenzollerns_1530.6			# Hohenzollern Sucession, Brandenburg->Prussia
		hohenzollerns_1530.7			# Hohenzollern Sucession, Brandenburg->Hohenzollern
		hohenzollerns_1530.8			# Hohenzollern Sucession, Brandenburg->Ansbach
		hohenzollerns_1530.9			# Hohenzollern Sucession, Brandenburg->Bayreuth
		italy_fifteenthirty.001			# Milan passes to the Spanish
		hre_dynastic_event.001			# HRE dynastic Union
		welfs_dynastic.1				# Welf Sucession
		#welfs_dynastic.2				# Welf Sucession
		welfs_dynastic.3				# Welf Sucession
		welfs_dynastic.4				# Welf Sucession
		welfs_dynastic.5				# Welf Sucession
		wettin_dynastic.1				# Wettin Sucession
		wettin_dynastic.2				# Wettin Sucession
		wettin_dynastic.3				# Wettin Sucession
		wettin_dynastic.4				# Wettin Sucession
		wettin_dynastic.5				# Wettin Sucession
		wettin_dynastic.6				# Wettin Sucession
		wettin_dynastic.7				# Wettin Sucession
		wettin_dynastic.8				# Wettin Sucession
		#flavor_brapru.22				# Succession of Albrecht Achilles
		#flavor_brapru.25				# Dispositio Achillea (can also trigger from flavor_brapru.22)
		meiouelective_monarchy.001		# Magnates gain influence
		#meiouelective_monarchy.002		# Petition of Rights
		meiouelective_monarchy.003		# Weak, non-Dynastic, or female heir (starts disaster)
		meiouelective_monarchy.004		# Countries with a PU over a country with an elective monarchy with a weak, non-Dynastic, or female heir (starts disaster)
		general_fixes.001				# Kills off Suleyman
		general_fixes.002				# Kills off Ferdinand
		horde_mechanic_events.1			# Applies the proper khanate/puppet khanate state
		#horde_mechanic_events.2		# Gives hordes scaling forcelimit based on military power of the leader - disabled for POP
		horde_mechanic_events.3			# Remove some of those stray country flags
		horde_events.100				# Break apart some temporary unions
		#horde_events.3					# Chaghatai Collapse - event removed.
		flavor_ser.2					# Serbian Empire Breaks up
		flavor_chu.6					# Chupanid multi-war
		flavor_muz.1					# Muzaffarid dynamic balkanization
		hundred_viet.5					# Female Ruler is overthrown by her consort
		hundred_viet.9					# Nhat Kien changes his family name
		hre_fragmentation.003			# HRE Fragmentation system: evaluation
		#flavor_hun.17					#Maintaining the Black Army - disabled for now
		japan.13						# Son of the Retired Emperor (Shogun) becomes the new Emperor
		tianxia.137						# Appenage dies out
		hee_MOL.1						# Moldavia decides on Overlord
	}
	random_events = {
		1000 = 0
		
		100 = flavor_kol.1				# Bavarian Archbishop
		#100 = flavor_tim.1				# The Disintegration of the Timurid Empire
		100 = flavor_hsa.3				# Hansa: Tagfahrt
		#100 = inti_events.1			# Birth of a Panaca # vanilla inti file isn't ported
		50 = dynastic_events.4
		50 = dynastic_events.5
		25 = harem_events.7				# Failed Policy of Fratricide
	}
}

on_new_consort = {
	events = {
		consort_events.2
	}
	#if = {
	#	limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	#}
	#if = {
	#	limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	#}
	#if = {
	#	limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	#}
}

# country
on_monarch_death = {
	if = {
		limit = {
			tag = ANS
			BRA = {
				has_country_flag = albrecht_achilles_flag
			}
		}
		BRA = {
			clr_country_flag = albrecht_achilles_flag #Just to be sure
			kill_heir = yes #If Albrecht Achilles dies in Ansbach he will also be dead in Brandenburg, will appear as normal death of heir to BRA.
		}
	}
	if = {
		limit = {
			tag = POL
			HUN = {
				dynasty = "d'Anjou"
				has_ruler = "Louis the Great"
			}
			has_country_flag = pol_louis_great_heir
		}
		country_event = { id = flavor_pol.3022 }
	}
	if = {
		limit = {
			tag = HUN
			POL = { has_country_flag = pol_louis_great_heir }
		}
		POL = { country_event = { id = flavor_pol.3024 } }
	}
	if = {
		limit = {
			tag = POL
			junior_union_with = HUN
			has_country_flag = pol_louis_great_king
			HUN = { has_heir = no }
		}
		POL = { country_event = { id = flavor_pol.30212 } }
	}
	events = {
		on_new_monarch.1
		on_new_monarch.3
		kalmar.006			#Hakon dies causing PU under Denmark
		kalmar.016			#Death of Margret of Scandinavia
		flavor_anj.1		#France/Anjou lose claim on Naples if they lose Valois dynasty
		flavor_pol.302
		flavor_pol.3023
		japan.15			#Underage Shogun
		japan.24			#Adopting accurate name
		japan.25			#Losing Kanrei position
	}
}

# country
on_regent = {
	if = {
		limit = {
			tag = CRI
			NOT = { has_global_flag = death_of_haji_giray } #Also set in history.
		}
		if = {
			limit = {
				exists = TUR
				is_free_or_tributary_trigger = yes
				TUR = {
					num_of_cities = ROOT
					is_free_or_tributary_trigger = yes
					num_of_ports = 1
				}
			}
			country_event = { id = flavor_cri.1 } #Death of Haji Giray
		}
		if = {
			limit = {
				OR = {
					NOT = { exists = TUR }
					is_subject_other_than_tributary_trigger = yes
					TUR = { NOT = { num_of_cities = ROOT } }
					TUR = { is_subject_other_than_tributary_trigger = yes }
					TUR = { NOT = { num_of_ports = 1 } }
				}
			}
			set_global_flag = death_of_haji_giray
		}
	}
	events = {
		tribal_succession.1	# harsh anti-tribals.
		flavor_mlo.1		# The Ambrosian Republic
		treaty_pavia.1000	# von Wittelsbach succession treaty of Bavaria and the Palatinate
		eastern_haram.2		# Issues for low level Hindu and Muslim empires
		hundred_viet.1		# Nguyen Kim dies
		kalmar.005 #Valdemar IV dies
	}
}

# country
on_new_term_election = {
	events = {
		elections.700		# Election event
		elections.706
		medici_system.4		# Gonfaloniere
		medici_system.12	# We don't need no... Gonfalionere...		
		medici_system.48	# Sienese Priori election
		elections.720		# Dutch Republic
	}
}

# country
on_death_election = {
	events = {
		elections.701		# Election event
		elections.706
		medici_system.1		# Piero
		medici_system.2		# Lorenzo
		medici_system.3		# No more Medici
		medici_system.13	# Institution of the Signoria
		medici_system.49	# Sienese Prior dead
		elections.721		# Dutch Republic
	}
}

# country
on_death_foreign_slave_ruler = {
	events = {
		mamluk_events.0 # Choose new ruler
	}
}

# country
on_replace_governor = {
	events = {
		elections.707
	}
}

# country
on_bankruptcy = {
	#events = {
		#bankruptcy.3
	#}
	every_owned_province = {
		if = {
			limit = {
				has_province_modifier = road_is_building
			}
			set_province_flag = country_went_bankrupt_road
			remove_province_modifier = road_is_building
		}
		if = {
			limit = {
				has_province_modifier = canal_is_building
			}
			set_province_flag = country_went_bankrupt_canal
			remove_province_modifier = canal_is_building
		}
		if = {
			limit = {
				has_province_modifier = fort_is_building
			}
			set_province_flag = country_went_bankrupt_fort
			remove_province_modifier = fort_is_building
		}
	}
	if = {
		limit = {
			ai = yes
			any_owned_province = {
				NOT = { is_core = owner }
				any_core_country = {
					exists = yes
					NOT = { overlord_of = ROOT }
				}
			}
		}
		set_country_flag = just_went_bankrupt
		country_event = { id = MT_general_fixes.250 }
	}
}

# country (country annexing, FROM = target)
on_diplomatic_annex = {
	if = {
		limit = {
			FROM = { has_country_flag = center_of_universe }
		}
		set_country_flag = center_of_universe
	}
	
	export_to_variable = {
		which = treasuryVar
		value = treasury
		who = FROM
	}
	
	if = {
		limit = {
			check_variable = { which = treasuryVar	value = 1000 }
		}
		set_variable = { which = treasuryVar	value = 1000 }
	}
							
	set_variable = { which = ducat_gain which = treasuryVar }
	scaled_ducat_gained_country = yes
	set_variable = { which = treasuryVar	value = 0 }
	
	change_variable = { which = estate_burghers_treasury which = FROM }
	change_variable = { which = estate_lesser_nobles_treasury which = FROM }
	change_variable = { which = estate_greater_nobles_treasury which = FROM }

	FROM = {
		clr_country_flag = stuffs_set
		clr_country_flag = war_chest_put_away
		
		set_variable = { which = estate_burghers_treasury value = 0 }
		set_variable = { which = estate_lesser_nobles_treasury value = 0 }
		set_variable = { which = estate_greater_nobles_treasury value = 0 }
		
		set_variable = { which = Assimilation_Process value = 0 }
		set_variable = { which = Integration_Factor value = 0 }
		set_variable = { which = Remaining_Years value = 0 }
		set_variable = { which = Years_as_Subject value = 0 }
		set_variable = { which = Years_as_Vassal value = 0 }
	}
	
	events = {
		flavor_anj.3			#France inherits Anjou claims
	}
}

# country
on_heir_death = {
	#if = {
	#	limit = {
	#		tag = AAA
	#	}
	#	if = { limit = { has_heir = "dummy_eastern_haram" }
	#		event_target:eastern_haram_trigger = {
	#			country_event = { id = eastern_haram.10 }
	#		}
	#	}
	#	else_if = { limit = { has_heir = "dummy_betray_chinese_lord" }
	#		event_target:betray_chinese_lord_trigger = {
	#			country_event = { id = tianxia.4 }
	#		}
	#	}
	#	else_if = { limit = { has_heir = "dummy_request_clerical_advisor" }
	#		event_target:request_clerical_advisor_trigger = {
	#			country_event = { id = dg_church_influence.052 }
	#		}
	#	}
	#}
	trigger_switch = {
		on_trigger = has_country_flag
		heir_dip_education = {
			clr_ruler_flag = heir_dip_education
		}
		heir_mil_education = {
			clr_ruler_flag = heir_mil_education
		}
		heir_adm_education = {
			clr_ruler_flag = heir_adm_education
		}
	}
	#if = {
	#	limit = { has_country_flag = heir_dip_education }
	#	clr_ruler_flag = heir_dip_education
	#}
	#if = {
	#	limit = { has_country_flag = heir_mil_education }
	#	clr_ruler_flag = heir_mil_education
	#}
	#if = {
	#	limit = { has_country_flag = heir_adm_education }
	#	clr_ruler_flag = heir_adm_education
	#}
	#if = {
	#	limit = { has_ruler_flag = well_advised_tutored_heir }
		clr_ruler_flag = well_advised_tutored_heir
	#}
	#if = {
	#	limit = { has_ruler_flag = heir_went_on_grand_tour }
		clr_ruler_flag = heir_went_on_grand_tour
	#}
	#if = {
	#	limit = { has_country_flag = albrecht_achilles_flag }
		clr_country_flag = albrecht_achilles_flag #Death of original Albrecht Achilles
	#}
	if = {
		limit = { has_ruler_flag = sancaga_cikma }
		clr_ruler_flag = sancaga_cikma
		every_owned_province = {
			#limit = {
			#	has_province_modifier = heir_in_training
			#}
			remove_province_modifier = heir_in_training
		}
	}
	#if = {
	#	limit = { has_ruler_flag = returned_from_sancaga_sikma_province }
		clr_ruler_flag = returned_from_sancaga_sikma_province
	#}
	if = {
		limit = {
			tag = POL
			has_country_flag = pol_louis_great_heir
			HUN = {
				dynasty = "d'Anjou"
				has_ruler = "Louis the Great"
			}
		}
		country_event = { id = flavor_pol.30211 }
	}
}

# country
on_queen_death = {
	trigger_switch = {
		on_trigger = has_consort_flag
		10_years_anniversary = {
			set_ruler_flag = had_10_years_anniversary
		}
		20_years_anniversary = {
			set_ruler_flag = had_20_years_anniversary
		}
	}
	#if = {
	#	limit = { has_consort_flag = 10_years_anniversary }
	#	set_ruler_flag = had_10_years_anniversary
	#}
	#if = {
	#	limit = { has_consort_flag = 20_years_anniversary }
	#	set_ruler_flag = had_20_years_anniversary
	#}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}
	
	if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	#if = {
	#	limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	#}
	#if = {
	#	limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	#}
	#if = {
	#	limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	#}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
		clr_ruler_flag = lowborn_consort
	}
	#if = {
	#	limit = { has_ruler_flag = lowborn_consort }
	#	clr_ruler_flag = lowborn_consort
	#}
	trigger_switch = {
		on_trigger = has_country_modifier
		consort_adm_advice = {
			remove_country_modifier = consort_adm_advice
		}
		consort_dip_advice = {
			remove_country_modifier = consort_dip_advice
		}
		consort_mil_advice = {
			remove_country_modifier = consort_mil_advice
		}
	}
	#if = {
	#	limit = { has_country_modifier = consort_adm_advice }
	#	remove_country_modifier = consort_adm_advice
	#}
	#if = {
	#	limit = { has_country_modifier = consort_dip_advice }
	#	remove_country_modifier = consort_dip_advice
	#}
	#if = {
	#	limit = { has_country_modifier = consort_mil_advice }
	#	remove_country_modifier = consort_mil_advice
	#}
	#if = {
	#	limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	#}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	clr_ruler_flag = marriage_length
}

# country
on_new_heir = {
	#if = {
	#	limit = {
	#		tag = AAA
	#	}
	#	if = { limit = { has_heir = "dummy_eastern_haram" }
	#		event_target:eastern_haram_trigger = {
	#			country_event = { id = eastern_haram.10 }
	#		}
	#	}
	#	else_if = { limit = { has_heir = "dummy_betray_chinese_lord" }
	#		event_target:betray_chinese_lord_trigger = {
	#			country_event = { id = tianxia.4 }
	#		}
	#	}
	#	else_if = { limit = { has_heir = "dummy_request_clerical_advisor" }
	#		event_target:request_clerical_advisor_trigger = {
	#			country_event = { id = dg_church_influence.052 }
	#		}
	#	}
	#}
	if = {
		limit = {
			has_ruler = "Stefan Uros V"
			heir_adm = 4
			heir_dip = 4
			heir_mil = 4
			heir_claim = 75
		}
		set_ruler_flag = unexpected_heir
	}
}

# country
on_weak_heir_claim = {
	events = {
		generic_onaction.611		# Pretenders rise up
	}
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	events = {
		theocracies.1
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	events = {
		holyromanempire.900
	}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	#events = {
#		holyromanempire.901
	#}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	#events = {
#		holyromanempire.902
	#}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_true_religion = {
	#events = {
#		holyromanempire.903
	#}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	#events = {
#		holyromanempire.904
	#}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	#events = {
#		holyromanempire.905
	#}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	#events = {
#		holyromanempire.907
	#}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	#events = {
	#}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
		HRE_war_mechanics.001
#		holyromanempire.908
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	#events = {
#		holyromanempire.909
	#}
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	#events = {
	#}
}

on_lock_hre_religion = {
	#events = {
#		religious_leagues.1
#		religious_leagues.8
	#}
}

on_change_hre_religion = {
	#events = {
#		religious_leagues.2
#		religious_leagues.3
	#}
}

on_hre_religion_white_peace = {
	#events = {
#		religious_leagues.4
	#}
}

# When a non-native changes government type
on_government_change = {
	#swap_non_generic_missions = yes
	if = {
		limit = {
			NOT = { government = monarchy }
		}
		if = {
			limit = {
				any_owned_province = {
					has_province_modifier = domain_of_spouses_family
				}
			}
			random_owned_province = {
				limit = { has_province_modifier = domain_of_spouses_family }
				remove_province_modifier = domain_of_spouses_family
			}
		}
		if = {
			limit = {
				any_owned_province = {
					has_province_modifier = home_of_consort
				}
			}
			random_owned_province = {
				limit = { has_province_modifier = home_of_consort }
				remove_province_modifier = home_of_consort
			}
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
	despotisation_effect = yes
}

# Nation is integrated after being in union
on_integrate = {
	if = {
		limit = {
			FROM = { has_country_flag = center_of_universe }
		}
		set_country_flag = center_of_universe
	}
	
	export_to_variable = {
		which = treasuryVar
		value = treasury
		who = FROM
	}
	
	if = {
		limit = {
			check_variable = { which = treasuryVar	value = 1000 }
		}
		set_variable = { which = treasuryVar	value = 1000 }
	}
							
	set_variable = { which = ducat_gain which = treasuryVar }
	scaled_ducat_gained_country = yes
	set_variable = { which = treasuryVar	value = 0 }
	
	change_variable = { which = estate_burghers_treasury which = FROM }
	change_variable = { which = estate_lesser_nobles_treasury which = FROM }
	change_variable = { which = estate_greater_nobles_treasury which = FROM }

	FROM = {
		clr_country_flag = stuffs_set
		clr_country_flag = war_chest_put_away
		
		set_variable = { which = estate_burghers_treasury value = 0 }
		set_variable = { which = estate_lesser_nobles_treasury value = 0 }
		set_variable = { which = estate_greater_nobles_treasury value = 0 }
		
		set_variable = { which = Assimilation_Process value = 0 }
		set_variable = { which = Integration_Factor value = 0 }
		set_variable = { which = Remaining_Years value = 0 }
		set_variable = { which = Years_as_Subject value = 0 }
		set_variable = { which = Years_as_Vassal value = 0 }
	}
}

# Nation annexed
on_annexed = {
	if = {
		limit = {
			FROM = { has_country_flag = center_of_universe }
		}
		set_country_flag = center_of_universe
	}
	
	if = { ### Can be significantly gamed by player for infinite money, so AI only (conquered, released, reconquered)
		limit = {
			ai = yes
		}
		export_to_variable = {
			which = treasuryVar
			value = treasury
			who = FROM
		}
		
		if = {
			limit = {
				check_variable = { which = treasuryVar	value = 1000 }
			}
			set_variable = { which = treasuryVar	value = 1000 }
		}
								
		set_variable = { which = ducat_gain which = treasuryVar }
		scaled_ducat_gained_country = yes
		set_variable = { which = treasuryVar	value = 0 }
		
		change_variable = { which = estate_burghers_treasury which = FROM }
		change_variable = { which = estate_lesser_nobles_treasury which = FROM }
		change_variable = { which = estate_greater_nobles_treasury which = FROM }
	}
		
	FROM = {
		clr_country_flag = stuffs_set
		clr_country_flag = war_chest_put_away
		
		set_variable = { which = estate_burghers_treasury value = 0 }
		set_variable = { which = estate_lesser_nobles_treasury value = 0 }
		set_variable = { which = estate_greater_nobles_treasury value = 0 }

		set_variable = { which = Assimilation_Process value = 0 }
		set_variable = { which = Integration_Factor value = 0 }
		set_variable = { which = Remaining_Years value = 0 }
		set_variable = { which = Years_as_Subject value = 0 }
		set_variable = { which = Years_as_Vassal value = 0 }
	}
	if = {
		limit = {
			has_country_modifier = mongol_xingsheng
			#any_subject_country = { has_country_flag = red_turban_reb }
		}
		country_event = { id = red_turban.24 }
	}
	FROM = {
		if = {
			limit = {
				NOT = {
					is_subject_of = ROOT
				}
				num_of_subjects = 1
			}
			every_subject_country = {
				grant_independence = yes
			}
		}
	}
}

on_dismantle_revolution = {
	parliamentarisation_effect = yes
	kill_ruler = yes
	set_revolution_target = ---
	if = {
		limit = { has_heir = yes }
		kill_heir = yes
	}
}

# province
on_adm_development = {
}

# province #not used
on_dip_development = {
}

# province #not used
on_mil_development = {
	if = { limit = { base_manpower = 0 }
		add_base_manpower = -1
	}
	if = {
		limit = {
			NOT = { has_province_flag = dev_button_interact }
		}
		set_province_flag = interacting_with_province
		province_event = {
			id = POP_dev_button_interactions.001
		}
	}
}

on_colonial_pulse = {
	#random_events = {
	#	
	#	10000 = 0
	#}
}

on_siberian_pulse = {
}


# country random events
on_bi_yearly_pulse = {
	random_events = {
		# randomevents.txt
		#100 = random_event.3051
		100 = random_event.5008
		100 = random_event.5014
		100 = random_event.5015
		100 = random_event.5017
		100 = random_event.5018
		#100 = random_event.5019
		#100 = random_event.5020
		#100 = random_event.5021
		100 = random_event.5022
		100 = random_event.5023
		100 = random_event.5024
		100 = random_event.5025
		100 = random_event.5027
		100 = random_event.5032
		100 = random_event.5040
		100 = random_event.5045
		100 = random_event.5050
		100 = random_event.5051
		100 = random_event.5052
		100 = random_event.5053
		100 = random_event.5054
		100 = random_event.5055
		100 = random_event.5056
		#100 = random_event.5058
		100 = random_event.5059
		100 = random_event.5060
		100 = random_event.5061
		100 = random_event.5064
		100 = random_event.5065
		100 = random_event.5066
		100 = random_event.5068
		100 = random_event.5070
		100 = random_event.5071
		100 = random_event.5072
		100 = random_event.5074
		100 = random_event.5075
		100 = random_event.5076
		100 = random_event.5077
		#100 = random_event.5082
		100 = random_event.5083
		100 = random_event.5084
		100 = random_event.5085
		100 = random_event.5086
		100 = random_event.5088
		100 = random_event.5089
		100 = random_event.5090
		100 = random_event.5091
		#100 = random_event.5092
		100 = random_event.5093
		100 = random_event.5094
		100 = random_event.5095
		100 = random_event.5096
		100 = random_event.5097
		100 = random_event.5098
		#100 = random_event.5099
		100 = random_event.6000
		100 = random_event.6001
		#100 = random_event.6002
		100 = random_event.6003
		100 = random_event.6004
		100 = random_event.6005
		100 = random_event.6006
		100 = random_event.6012
		100 = random_event.6013
		100 = random_event.6015
		100 = random_event.710
		100 = random_event.711
		100 = random_event.712
		100 = random_event.713
		100 = random_event.714
		100 = random_event.715
		100 = random_event.716
		100 = random_event.717
		100 = random_event.718
		100 = random_event.719
		100 = random_event.720
		100 = random_event.722
		100 = random_event.723
		100 = random_event.724
		#100 = random_event.725
		100 = random_event.726
		100 = random_event.727
		100 = random_event.728
		100 = random_event.729
		100 = random_event.730
		100 = random_event.731
		100 = random_event.732
		100 = random_event.733
		100 = random_event.734
		100 = random_event.735
		100 = random_event.736
		100 = random_event.737
		100 = random_event.738
		100 = random_event.739
		100 = random_event.740
		100 = random_event.741
		100 = random_event.742
		
		100 = random_event.850
		100 = random_event.851
		100 = random_event.852
		100 = random_event.853
		100 = random_event.854
		100 = random_event.855
		100 = random_event.857
		100 = random_event.858
		100 = random_event.859
		100 = random_event.860
		100 = random_event.861
		100 = random_event.862
		100 = random_event.863
		100 = random_event.864
		100 = random_event.865
		100 = random_event.866
		100 = random_event.867
		100 = random_event.868
		100 = random_event.869
		100 = random_event.870
		100 = random_event.871
		100 = random_event.872
		100 = random_event.873
		100 = random_event.874
		100 = random_event.875
		100 = random_event.876
		100 = random_event.877
		100 = random_event.878
		100 = random_event.879
		100 = random_event.880
		100 = random_event.881
		100 = random_event.882
		#100 = random_event.883 #removed because makes institutions
		100 = random_event.884
		100 = random_event.885
		100 = random_event.836
		100 = random_event.837
		100 = random_event.838
		
		100 = random_event.9472
		100 = random_event.3097
		100 = random_event.5005
		#100 = random_event.5026
		100 = random_event.5037
		100 = random_event.5063
		100 = random_event.6014
		
		100 = random_event.1
		100 = random_event.2
		100 = random_event.3
		100 = random_event.4
		100 = random_event.5
		100 = random_event.6
		100 = random_event.7
		100 = random_event.8
		100 = random_event.9
		100 = random_event.10
		100 = random_event.11
		100 = random_event.12
		100 = random_event.13
		100 = random_event.14
		100 = random_event.15
		100 = random_event.16
		
		#100 = random_event.26
		
		#Culture and Religion Events
		#125 = culture_religion_events.1
		125 = culture_religion_events.3
		125 = culture_religion_events.4
		125 = culture_religion_events.5
		125 = culture_religion_events.6
		125 = culture_religion_events.7
		125 = culture_religion_events.8
		125 = culture_religion_events.9
		125 = culture_religion_events.10
		125 = culture_religion_events.11
		125 = culture_religion_events.12
		125 = culture_religion_events.13
		125 = culture_religion_events.14
		125 = culture_religion_events.15
		125 = culture_religion_events.16
		100 = culture_religion_events.17
		125 = culture_religion_events.18
		125 = culture_religion_events.19
		125 = culture_religion_events.20
		175 = culture_religion_events.21
		125 = culture_religion_events.22
		125 = culture_religion_events.23
		
		#Mamluk Events
		175 = mamluk_events.1
		175 = mamluk_events.2
		175 = mamluk_events.3
		235 = mamluk_events.4
		185 = mamluk_events.5
		175 = mamluk_events.6
		#250 = mamluk_events.7
		185 = mamluk_events.10
		185 = mamluk_events.11
		235 = mamluk_events.12
		
		100 = generic_byoa.1
		100 = generic_byoa.2
		100 = generic_byoa.3
		# 100 = generic_byoa.4
		# 100 = generic_byoa.5
		100 = generic_byoa.6
		# 100 = generic_byoa.7
		100 = generic_byoa.8
		100 = generic_byoa.9
		100 = generic_byoa.10
		100 = generic_byoa.11
		100 = generic_byoa.12
		100 = generic_byoa.13
		100 = generic_byoa.14
		100 = generic_byoa.15
		100 = generic_byoa.16
		100 = generic_byoa.17
		100 = generic_byoa.18
		100 = generic_byoa.19
		100 = generic_byoa.20
		
		# Old Centralisation/Decentralisation
		100 = random_event.806
		100 = random_event.807
		100 = random_event.808

		# Mercantilism
		#100 = random_event.6326
		#100 = random_event.6327
		#100 = random_event.6328
		#100 = random_event.6329
		
		# Tradegoods events
		100 = random_event.6418
		100 = random_event.6419
		100 = random_event.6420
		100 = random_event.6421
		#100 = random_event.6422
		100 = random_event.6423
		#100 = random_event.6424
		100 = random_event.6425
		100 = random_event.6426
		100 = random_event.6427
		100 = random_event.6428
		100 = random_event.6429
		#100 = random_event.6431
		100 = random_event.6432
		100 = random_event.6433
		#100 = random_event.6434

		
		100 = randomeventsstapehordes.1
		100 = randomeventsstapehordes.2
		100 = randomeventsstapehordes.3
		100 = randomeventsstapehordes.4
		100 = randomeventsstapehordes.5
		#100 = randomeventsstapehordes.6
		#100 = randomeventsstapehordes.7
		100 = randomeventsstapehordes.8
		100 = randomeventsstapehordes.13
		100 = randomeventsstapehordes.14
		100 = randomeventsstapehordes.17
		100 = randomeventsstapehordes.18
		100 = randomeventsstapehordes.19
		100 = randomeventsstapehordes.20
		100 = randomeventsstapehordes.21
		100 = randomeventsstapehordes.22
		100 = randomeventsstapehordes.23
		100 = randomeventsstapehordes.24
		
		# Advisors
		
		# Sailor events
		#100 = sailor_event.1
		#100 = sailor_event.2
		#100 = sailor_event.3
		#100 = sailor_event.4
		#100 = sailor_event.5
		
		# Corruption Events
		75 = corruption_event.16
		75 = corruption_event.17
		75 = corruption_event.18
		75 = corruption_event.19
		75 = corruption_event.20
		
		# Trade League Events
		100 = trade_league.1
		100 = trade_league.2
		100 = trade_league.3
		100 = trade_league.4
		100 = trade_league.7
		100 = trade_league.8
		100 = trade_league.9
		100 = trade_league.10
		100 = trade_league.11
		100 = trade_league.12
		100 = trade_league.13
		100 = trade_league.14
		
		# Institution Events
		#Feudalism Spread Events:
		#100 = institution_events.8
		#100 = institution_events.9
		#100 = institution_events.10
		#100 = institution_events.11

		
		
		#Personality Events
		50 = personality_events.10 #Just Dilema
		50 = personality_events.11 #A righteous King
		50 = personality_events.12 #A Righteous Republican Ruler
		50 = personality_events.13
		50 = personality_events.14
		50 = personality_events.15
		50 = personality_events.16
		50 = personality_events.17
		50 = personality_events.18
		50 = personality_events.19
		50 = personality_events.20
		50 = personality_events.21
		50 = personality_events.22
		50 = personality_events.23
		50 = personality_events.24
		50 = personality_events.25
		50 = personality_events.26
		50 = personality_events.27
		50 = personality_events.28
		50 = personality_events.29
		50 = personality_events.30
		50 = personality_events.31
		50 = personality_events.32
		50 = personality_events.33
		50 = personality_events.34
		50 = personality_events.35
		50 = personality_events.36
		50 = personality_events.37
		50 = personality_events.38
		50 = personality_events.39
		50 = personality_events.40
		50 = personality_events.41
		50 = personality_events.42
		50 = personality_events.43
		50 = personality_events.44
		50 = personality_events.45
		50 = personality_events.46
		50 = personality_events.47
		50 = personality_events.48
		50 = personality_events.49
		50 = personality_events.50
		50 = personality_events.51
		50 = personality_events.52
		50 = personality_events.53
		50 = personality_events.54
		50 = personality_events.55
		50 = personality_events.56
		50 = personality_events.57
		50 = personality_events.58
		
		1000 = 0
	}
}

on_bi_yearly_pulse_2 = {
	random_events = {
		100 = corruption_event.1
		100 = corruption_event.2
		100 = corruption_event.3
		100 = corruption_event.4
		100 = corruption_event.5
		100 = corruption_event.6
		100 = corruption_event.7
		100 = corruption_event.9
		100 = corruption_event.10
		200 = corruption_event.11
		200 = corruption_event.12
		200 = corruption_event.13
		200 = corruption_event.14
		200 = corruption_event.15
		
		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {
	events = {
		#hre defense calc
		HRE_war_mechanics.005
	
		#Other events
		oresund_toll.4
		red_turban.6
		red_turban.7
		
		#provmod.1
		rank_change.1
	}
}

on_bi_yearly_pulse_4 = {
	events = {
		# subject cleanup
		subject_integration.2
	}
}

on_thri_yearly_pulse = {
	random_events = {
		# Republics
		200 = republics.4
		200 = republics.5
		200 = republics.6
		200 = republics.7
		200 = republics.8
		200 = republics.9
		200 = republics.10
		200 = republics.11
		200 = republics.12
		200 = republics.13
		200 = republics.15
		200 = republics.16
		200 = republics.17
		200 = republics.18
		200 = republics.19
		200 = republics.20
		200 = republics.22
		200 = republics.23
		200 = republics.24
		200 = republics.25
		200 = republics.26
		200 = republics.27
		200 = republics.30
		200 = republics.31
		200 = republics.34
		200 = republics.35
		200 = republics.40
		200 = republics.41
		200 = republics.42
		200 = republics.43
		
		# Japanese Daimyos
		15 = flavor_jap.10
		50 = flavor_jap.28
		50 = flavor_jap.40
		50 = flavor_jap.42
		50 = flavor_jap.45
		50 = flavor_jap.49
		50 = flavor_jap.51
		50 = flavor_jap.52
		50 = flavor_jap.53
		50 = flavor_jap.54
		50 = flavor_jap.55
	}
}
on_thri_yearly_pulse_2 = {
}

on_thri_yearly_pulse_3 = {
	random_events = {
		# Subject Interactions
		50 = subject_interaction_events.1
		50 = subject_interaction_events.4
		50 = subject_interaction_events.5
		50 = subject_interaction_events.6
		50 = subject_interaction_events.7
		50 = subject_interaction_events.9
		50 = subject_interaction_events.11
		50 = subject_interaction_events.14
		50 = subject_interaction_events.15
		50 = subject_interaction_events.17
		50 = subject_interaction_events.18
		50 = subject_interaction_events.19
		50 = subject_interaction_events.20
		50 = subject_interaction_events.21
		50 = subject_interaction_events.22
		50 = subject_interaction_events.23
		50 = subject_interaction_events.24
		50 = subject_interaction_events.25
		50 = subject_interaction_events.26
		50 = subject_interaction_events.27
		50 = subject_interaction_events.29
		50 = subject_interaction_events.30
		50 = subject_interaction_events.31
		50 = subject_interaction_events.32
		50 = subject_interaction_events.34
		50 = subject_interaction_events.35
		50 = subject_interaction_events.36
		50 = subject_interaction_events.38
		50 = subject_interaction_events.40
		50 = subject_interaction_events.43
		75 = tributary_events.1
		75 = tributary_events.2
		75 = tributary_events.3
		75 = tributary_events.4
		75 = tributary_events.5
		75 = tributary_events.6
		75 = tributary_events.7
		75 = tributary_events.8
		75 = tributary_events.9
		75 = tributary_events.10
		75 = tributary_events.13
		75 = tributary_events.16
		75 = tributary_events.17
		75 = tributary_events.18
		75 = tributary_events.19
		75 = tributary_events.23
		75 = tributary_events.24
		75 = tributary_events.26
		75 = tributary_events.25
		75 = tributary_events.27
		
		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
}

on_four_year_pulse = {
	random_events = {
		# Colonial Nations
		100 = colonial_nation.1
		100 = colonial_nation.4
		100 = colonial_nation.10
		100 = colonial_nation.12
		100 = colonial_nation.14
		100 = colonial_nation.77
		100 = colonial_nation.100
		100 = colonial_nation.102
		100 = colonial_nation.104
		#100 = colonial_nation.106
		100 = colonial_nation.108
		100 = colonial_nation.110
		100 = colonial_nation.112
		100 = colonial_nation.114
		100 = colonial_nation.116
		100 = colonial_nation.118
		100 = colonial_nation.120
		100 = colonial_nation.122
		100 = colonial_nation.124
		100 = colonial_nation.128
		100 = colonial_nation.130
		100 = colonial_nation.132
		10 = colonial_nation.140
		10 = colonial_nation.142
		10 = colonial_nation.144
		#10 = colonial_nation.146
		10 = colonial_nation.148
		10 = colonial_nation.150
		10 = colonial_nation.152
		10 = colonial_nation.154
		10 = colonial_nation.156
		10 = colonial_nation.158
		10 = colonial_nation.160
		10 = colonial_nation.162
		10 = colonial_nation.164
		10 = colonial_nation.168
		10 = colonial_nation.170
		10 = colonial_nation.172
		
		# Dutch Republic
		100 = dutch_republic.1
		100 = dutch_republic.2
		100 = dutch_republic.3
		100 = dutch_republic.4
		100 = dutch_republic.5
		100 = dutch_republic.6
		100 = dutch_republic.7
		100 = dutch_republic.8
		100 = dutch_republic.9
		100 = dutch_republic.10
		150 = dutch_republic.11
		100 = dutch_republic.13
		100 = dutch_republic.14
		100 = dutch_republic.15
		100 = dutch_republic.16
		100 = dutch_republic.17
		100 = dutch_republic.18
		100 = dutch_republic.19
		100 = dutch_republic.20
		100 = dutch_republic.21
		100 = dutch_republic.22
		100 = dutch_republic.23
		100 = dutch_republic.24
		100 = dutch_republic.25
		100 = dutch_republic.27
		
		# Revolutionary Republic Factions
		# 100 = revolutionary_republic_factions.0
		# 100 = revolutionary_republic_factions.1
		# 100 = revolutionary_republic_factions.2
		# 100 = revolutionary_republic_factions.3
		# 100 = revolutionary_republic_factions.4
		# 100 = revolutionary_republic_factions.5
		# 100 = revolutionary_republic_factions.6
		# 100 = revolutionary_republic_factions.7
		# 100 = revolutionary_republic_factions.8
		# 100 = revolutionary_republic_factions.9
		
		# Elective Monarchy
		150 = elective_monarchy.1
		150 = elective_monarchy.2
		25 = elective_monarchy.3
		25 = elective_monarchy.4
		150 = elective_monarchy.6
		150 = elective_monarchy.8
		150 = elective_monarchy.9
		150 = elective_monarchy.10
		150 = elective_monarchy.11
		150 = elective_monarchy.12
		150 = elective_monarchy.14
		150 = elective_monarchy.17
		# 25 = elective_monarchy.18 # doesn't exist
		
		# Free Cities
		25 = free_cities.3
		25 = free_cities.7
		25 = free_cities.8
		25 = free_cities.13
		25 = free_cities.17
		25 = free_cities.19
		
		#Tribal Federations
		50 = tribal_federation_events.1
		50 = tribal_federation_events.2
		50 = tribal_federation_events.3
		50 = tribal_federation_events.4
		#50 = tribal_federation_events.5
		50 = tribal_federation_events.6
		50 = tribal_federation_events.7
		50 = tribal_federation_events.8
		50 = tribal_federation_events.10
		
		1000 = 0
	}
}

on_four_year_pulse_2 = {
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {

}

on_five_year_pulse = {
	#if = {
	#	limit = { always = yes }
	#	#country_event = { id = DO_census.001 days = 3 random = 15 }
	#	#	country_event = { id = comm_effic.1 days = 5 random = 15 }
	#}
	events = {
		flavor_spa.8002 # Castile-Genoa trade deal
		MT_general_fixes.3 # force AI tech increase
	}
}

on_five_year_pulse_2 = {
	random_events = {
		# Republic Factions
		#100 = republic_factions.2
		100 = republic_factions.5
		100 = republic_factions.7
		100 = republic_factions.9
		100 = republic_factions.10
		100 = republic_factions.12
		100 = republic_factions.13
		100 = republic_factions.14
		100 = republic_factions.15
		100 = republic_factions.16
		100 = republic_factions.17
		100 = republic_factions.18
		100 = republic_factions.19
		100 = republic_factions.20
		100 = republic_factions.22
		100 = republic_factions.23
		100 = republic_factions.24
		
		# Tribes
		33 = tribal_estate_events.1
		#50 = tribal_estate_events.2
		#50 = tribal_estate_events.3
		33 = tribal_estate_events.4
		33 = tribal_estate_events.5
		33 = tribal_estate_events.6
		33 = tribal_estate_events.7
		33 = tribal_estate_events.8
		33 = tribal_estate_events.9
		75 = tribal_estate_events.11 #Demands
		75 = tribal_estate_events.12 #Demands
		75 = tribal_estate_events.13 #Demands
		75 = tribal_estate_events.14 #Demands
		
		1000 = 0
	}
}

on_five_year_pulse_3 = {
	#events = {
		# removed pending getting the events back
		# rank_reduction.1 #rank reduced
		# rank_reduction.2 #rank reduced
		# rank_reduction.3 #rank reduced
		# rank_reduction.4 #rank reduced
		# rank_reduction.5 #rank reduced
	#}
	random_events = {
		100 = propagate_religion_events.1
		100 = propagate_religion_events_christian.1
		100 = propagate_religion_events.2
		100 = propagate_religion_events_christian.2
		100 = propagate_religion_events.3
		100 = propagate_religion_events.4
		100 = propagate_religion_events_christian.4
		100 = propagate_religion_events.5
		100 = propagate_religion_events_christian.5
		100 = propagate_religion_events.6
		100 = propagate_religion_events.8
		100 = propagate_religion_events.9
		100 = propagate_religion_events.10
		#100 = propagate_religion_events.11 #Province event
		500 = 0
	}
}

on_five_year_pulse_4 = {
}

# El Dorado
on_explore_coast = {
	random_events = {
		10 = exploration_events.1
		10 = exploration_events.2
		10 = exploration_events.3
		10 = exploration_events.4
		10 = exploration_events.5
		10 = exploration_events.6
		10 = exploration_events.7
		10 = exploration_events.8
		10 = exploration_events.9
		10 = exploration_events.10
		10 = exploration_events.11
		10 = exploration_events.12
		10 = exploration_events.13
		10 = exploration_events.14
		10 = exploration_events.15
	}
}
on_conquistador_empty = {
	random_events = {
		10 = seven_cities_events.1
		10 = seven_cities_events.2
		10 = seven_cities_events.3
		10 = seven_cities_events.4
		# 10 = seven_cities_events.5
		10 = seven_cities_events.6
		10 = seven_cities_events.7
		10 = seven_cities_events.8
		
		# 10 = seven_cities_events.100
		# 10 = seven_cities_events.101
		# 10 = seven_cities_events.102
		# 10 = seven_cities_events.103
		# 10 = seven_cities_events.104
		# 10 = seven_cities_events.105
		
		50 = seven_cities_events.200
		50 = seven_cities_events.201
		50 = seven_cities_events.202
		50 = seven_cities_events.203
		50 = seven_cities_events.204
		50 = seven_cities_events.205
		50 = seven_cities_events.206
		50 = seven_cities_events.207
		50 = seven_cities_events.208
		50 = seven_cities_events.209
		# 50 = seven_cities_events.210
		50 = seven_cities_events.211
		50 = seven_cities_events.212
		50 = seven_cities_events.213
		50 = seven_cities_events.214
		50 = seven_cities_events.215
		50 = seven_cities_events.216
		50 = seven_cities_events.217
		50 = seven_cities_events.218
		50 = seven_cities_events.219
		50 = seven_cities_events.220
		50 = seven_cities_events.221
		50 = seven_cities_events.222
		50 = seven_cities_events.223
		
		10 = seven_cities_events.303
		10 = seven_cities_events.308
		10 = seven_cities_events.309
		
		10 = seven_cities_events.400
		10 = seven_cities_events.401
		10 = seven_cities_events.402
		10 = seven_cities_events.405
		10 = seven_cities_events.406
		10 = seven_cities_events.407
		10 = seven_cities_events.408
		10 = seven_cities_events.409
		# 10 = seven_cities_events.410
		10 = seven_cities_events.413
		10 = seven_cities_events.414
		
		2000 = 0
	}
}

on_conquistador_native = {
	random_events = {
		10 = seven_cities_events.300
		10 = seven_cities_events.301
		10 = seven_cities_events.302
		10 = seven_cities_events.303
		10 = seven_cities_events.304
		10 = seven_cities_events.305
		10 = seven_cities_events.306
		10 = seven_cities_events.307
		10 = seven_cities_events.308
		10 = seven_cities_events.309
		# 10 = seven_cities_events.310
		
		250 = 0
	}
}

on_buy_religious_reform = {
	events = {
		dg_primitives.001
	}
}

on_circumnavigation = {
	events = {
		exploration_events.17
		exploration_events.16
	}
}

on_become_free_city = {
	events = {
		free_cities.1
	}
}

on_remove_free_city = {
	events = {
		free_cities.2
	}
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
}

on_revoke_estate_land = {
	
}

on_grant_estate_land = {
	remove_estate = estate_greater_nobles
	remove_estate = estate_lesser_nobles
	remove_estate = estate_city_burghers
	remove_estate = estate_tribes
	#remove_estate = estate_freeholders
}

on_death_has_harem = {
	if = {
		limit = {
			has_heir = no
		}
		country_event = { id = harem_events.2 }
	}
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
	
}

# country
on_gain_great_power_status = {
	#if = {
	#	limit = {
	#		NOT = { has_country_flag = became_great_power_flag }
	#	}
	#	set_country_flag = became_great_power_flag
	#}
}

# country
on_lose_great_power_status = {
}

# province
# Triggers only on missionary conversion. No Centers of Reformation, Trade Religion Propagation or Effects. - Inimicus
on_province_religion_converted = {
}

# province
on_province_culture_converted = {
}

# THIS = Province, FROM = Country who Propogated
# WORKS EXACTLY AS ADVERTISED. AAAAAAAAAAAAAAA - Inimicus
on_convert_by_trade_policy = {
}

# province
on_province_owner_change = {
	FROM = {
		country_event = {
			id = miscexpenses.001
		}
	}
	if = {
		limit = {
			check_variable = { which = misc_expenses_cache value = 0.001 }
		}
		remove_misc_expense_modifiers = yes
		set_variable = {
			which = misc_expenses_cache
			value = 0
		}
	}
	
	trigger_switch = {
		on_trigger = has_building
		temple = {
			if = {
				limit = {
					has_owner_religion = no
				}
				remove_building = temple
				#if = {
				#	limit = {
				#		NOT = { has_building = temple_heathen }
				#	}
					add_building = temple_heathen
				#}
				set_province_flag = temple_to_convert
				owner = {
					if = {
						limit = {
							NOT = { has_country_flag = convert_heathen_temples }
						}
						set_country_flag = convert_heathen_temples
						country_event = {
							id = dg_piety.056
							days = 5
						}
					}
				}
			}
		}
		temple_heathen = {
			if = {
				limit = {
					has_owner_religion = yes
				}
				remove_building = temple_heathen
				#if = {
				#	limit = {
				#		NOT = { has_building = temple }
				#	}
					add_building = temple
				#}
				owner = {
					if = {
						limit = {
							NOT = { has_country_flag = convert_temples }
						}
						set_country_flag = convert_temples
						country_event = {
							id = dg_piety.057
							days = 1
						}
					}
				}
			}
			else = {
				set_province_flag = temple_to_convert
				owner = {
					if = {
						limit = {
							NOT = { has_country_flag = convert_heathen_temples }
						}
						set_country_flag = convert_heathen_temples
						country_event = {
							id = dg_piety.056
							days = 5
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			has_any_communication_efficiency_modifier_trigger = no
		}
		add_province_modifier = { name = martial_law	duration = -1 }
		
		set_variable = { which = runner_final_time value = 100 }
	}
	#if = {
	#	limit = {
	#		has_province_flag = future_capital
	#	}
	#	clr_province_flag = future_capital
	#}
	# province_event = { ### When a province with capital is conquered or acquired, you can flip it to regional capital
	# id = POP_shifting_modifiers.006
	# days = 2
	# }
	#if = {
	#	limit = {
	#		has_province_modifier = surrendered_timer
	#	}
		remove_province_modifier = surrendered_timer
	#}
	#if = {
	#	limit = {
	#		has_province_modifier = war_dynamism
	#	}
		remove_province_modifier = war_dynamism
	#}
	#if = {
	#	limit = {
	#		has_province_modifier = principality_of_kiev
	#		owner = {
	#			OR = {
	#				AND = {
	#					NOT = { culture_group = tartar_group }
	#					religion_group = christian
	#				}
	#				AND = {
	#					culture_group = tartar_group
	#					absolutism = 60
	#				}
	#			}
	#		}
	#	}
	#	remove_province_modifier = principality_of_kiev
	#}
	#if = {
	#	limit = {
	#		has_province_modifier = principality_of_chernigov
	#		owner = {
	#			OR = {
	#				AND = {
	#					NOT = { culture_group = tartar_group }
	#					religion_group = christian
	#				}
	#				AND = {
	#					culture_group = tartar_group
	#					absolutism = 60
	#				}
	#			}
	#		}
	#	}
	#	remove_province_modifier = principality_of_chernigov
	#}
	base_unrest_remove_modifier = yes
	set_variable = { which = base_unrest 	value = 0 }
	DiploAnnex_Remove = yes
	#if = {
	#	limit = { has_province_flag = infra_calc_done }
	#	recalc_infra_owner_change = yes
	#}
	#else = {
		province_event = { id = MT_general_fixes.300 }
	#}
	set_province_flag = rebellions_block
	events = {
		culture_conversions.3
		POP_Estates.999
		POP_Estates.9998
		italian_power.6
	}
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

#Chinese Empire on_actions

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	#events = {
	#	
	#}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
#	Vanilla Stuff:
#	if = {
#		limit = {
#			technology_group = nomad_group
#		}
#		change_technology_group = chinese
#		change_unit_type = chinese
#	}
#	celestial_effect = yes
#	set_mandate = 60
#	china_superregion = {
#		limit = {
#			NOT = { is_core = ROOT }
#		}
#		add_permanent_claim = ROOT
#	}
#	if = {
#		limit = {
#			has_dlc = "Mandate of Heaven"
#		}
#		remove_faction = temples
#		remove_faction = enuchs
#		remove_faction = bureaucrats
#	}
#	if = {
#		limit = {
#			has_country_modifier = lost_mandate_of_heaven
#		}
#		remove_country_modifier = lost_mandate_of_heaven
#	}
#	country_event = { #Reforming the Bureaucracy
#		id = china_events.31
#		days = 365
#	}
#	country_event = {
#		id = china_events.32 #Records of the last Empire
#		days = 183
#	}
#	country_event = {
#		id = celestial_empire_events.2
#		days = 1825
#	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
#	Vanilla Stuff:
#	despotisation_effect = yes
#	set_government_rank = 2
#	add_country_modifier = {
#		name = lost_mandate_of_heaven
#		duration = 5475	# 15 years
#	}
#
#	china_superregion = {
#		limit = {
#			is_permanent_claim = ROOT
#		}
#		remove_claim = ROOT
#	}
}

# country
on_harmonized_pagan = {
}

on_harmonized_christian = {
}

on_harmonized_muslim = {
}

on_harmonized_jewish_group = {
}

on_harmonized_taoic = {
}

on_harmonized_dharmic = {
}

on_harmonized_mahayana = {
}

on_harmonized_buddhism = { #Theravada
}

on_harmonized_shinto = {
}

on_harmonized_vajrayana = {
}

on_harmonized_new_world_pagan = {
}

on_harmonized_european_pagan = {
}


# country
on_russian_sudebnik = {
	
}

# country
on_russian_oprichnina = {
	
}

# country
on_russian_streltsy = {
	
}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
	if = {
		limit = {
			OR = {
				culture_group = chinese_group
				has_country_flag = mandate_of_heaven_claimed
				has_consort_flag = barbarian_claimant_china
			}
		}
		every_subject_country = {
			limit = {
				is_tributary_trigger = yes
				NOT = { has_country_modifier = tributary_timer }
			}
			country_event = { id = tianxia.60 }
		}
	}
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
	
}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	if = {
		limit = {
			FROM = {
				OR = {
					full_idea_group = mercenary_ideas
					full_idea_group = mercenary_ideas_2
				}
			}
		}
	}
	else = { add_army_professionalism = -0.002 }
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
}

# THIS = Province
on_janissaries_raised = {
	
}

on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {

}

on_center_of_trade_downgrade = {

}

on_culture_promoted = {

}


# FROM = Previous Country, ROOT = Province
on_company_chartered = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	
}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {

}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	if = {
		limit = {
			has_faction = pr_buccaneers
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = 1
		}
	}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.2 }
		#set_country_flag = trophy_hunter_flag
	}
	FROM = {
		country_event = { id = flagship_events.1 }
	}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.4 }
	}
	FROM = {
		country_event = { id = flagship_events.3 }
	}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	if = {
		limit = {
			tag = PAP
		}
		papafication_effect = yes
		adopt_reform_progress = FROM
	}
}
