namespace = POP_Estates

### By Demian

country_event = {
	id = POP_Estates.001
	title = "POP_Estates.001.t"
	desc = "POP_Estates.001.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	trigger = {
		has_global_flag = first_estate_fired
	}
	
	immediate = {
		# log = "BEGIN: POP_Estates.001"
		set_global_flag = estate_calc
		if = {
			limit = { NOT = { has_global_flag = initialising_estates } }
			every_country = {
				limit = {
					#exists = yes
					is_nomad = yes
					has_country_flag = stuffs_set
				}
				trigger_switch = {
					on_trigger = has_country_modifier
					tribal_marriage_1 = {
						#set_variable = { which = tribes_loyalty_added 			value = 0 }
						set_variable = { which = tribes_loyalty_added 			value = 1 }
						estate_tribes_loyalty_added = yes
						set_variable = { which = tribes_loyalty_added 			value = 0 }
					}
					tribal_marriage_2 = {
						#set_variable = { which = tribes_loyalty_added 			value = 0 }
						set_variable = { which = tribes_loyalty_added 			value = 2 }
						estate_tribes_loyalty_added = yes
						set_variable = { which = tribes_loyalty_added 			value = 0 }
					}
					tribal_marriage_3 = {
						#set_variable = { which = tribes_loyalty_added 			value = 0 }
						set_variable = { which = tribes_loyalty_added			value = 3 }
						estate_tribes_loyalty_added = yes
						set_variable = { which = tribes_loyalty_added 			value = 0 }
					}
				}
				
				if = {
					limit = {
						NOT = { check_variable = { which = tribal_dip_ticker	value = 0.01 } }
					}
					set_variable = { which = tribal_dip_ticker	value = 0 }
				}
				random_list = {
					33 = { change_variable = { which = tribal_dip_ticker		value = 0.5 } }
					34 = { change_variable = { which = tribal_dip_ticker		value = 1 } }
					33 = { change_variable = { which = tribal_dip_ticker		value = 1.5 } }
				}
				if = {
					limit = {
						check_variable = { which = tribal_dip_ticker 	value = 5 }
					}
					country_event = { id = POP_Estates.575 }
				}
			}
		}
		if = {
			limit = {
				NOT = { has_global_flag = initialising_estates }
			}
			every_country = {
				limit = {
					#exists = yes
					check_variable = { which = estate_tribals_weight_share	value = 0.01 }
					has_country_flag = stuffs_set
				}
				if = {
					limit = {
						check_variable = { which = estate_tribals_loyalty		value = 0.305 }
					}
					subtract_variable = { which = estate_tribals_loyalty		value = 0.005 }
				}
				else_if = {
					limit = {
						NOT = { check_variable = { which = estate_tribals_loyalty		value = 0.3 } }
						ai = yes
					}
					change_variable = { which = estate_tribals_loyalty		value = 0.005 }
				}
			}
		}
		if = {
			limit = {
				has_global_flag = initialising_estates
			}
			regiongroup = {
				region = {
					limit = {
						is_city = yes
						OR = {
							AND = {
								NOT = { has_province_flag = tribals_control_province }
								NOT = { has_province_flag = was_tribals }
								NOT = { check_variable = { which = tribals_ratio	value = 10.001 } }
							}
							# Keeps BYZ legalistic at game start
							area = epirus_area
						}
					}
					add_institution_embracement = {
						which = legalism
						value = 100
					}
					if = {
						limit = {
							OR = {
								superregion = east_china_superregion
								superregion = north_china_superregion
								superregion = southwest_china_superregion
								region = korea_region
							}
						}
						add_institution_embracement = {
							which = I_meritocracy
							value = 100
						}
					}
				}
			}
			regiongroup = {
				region = {
					limit = {
						is_city = yes
					}
					if = {
						limit = {
							check_variable = { which = tribals_ratio	value = 0.001 }
						}
						POP_tribes_add_institution = {
							institution = legalism
						}
					}
					POP_estate_assignment = yes
				}
			}
		}
		regiongroup = {
			region = {
				limit = {
					is_city = yes
				}
				if = {
					limit = {
						check_variable = { which = tribals_ratio	value = 0.001 }
					}
					calc_settlement_score_gravity = yes # Recalculate the gravity
					tribals_settlement_calc = yes # Update tribal settlement score
					tribals_ratio_update = yes # Update the tribals ratio
					set_tribal_settlement = yes # Update modifiers
				}
				if = {
					limit = {
						OR = {
							has_province_flag = tribals_control_province
							has_province_flag = was_tribals
							has_province_flag = tribals_present
						}
					}
					if = {
						limit = {
							NOT = { check_variable = { which = tribals_ratio	value = 20 } }
							OR = {
								has_province_flag = tribals_control_province
								has_province_flag = was_tribals
							}
						}
						tribes_majority_to_minority = yes
					}
					if = {
						limit = {
							NOT = { check_variable = { which = tribals_ratio	value = 0.001 } }
						}
						remove_tribes = yes
					}
					else_if = {
						limit = {
							check_variable = { which = tribals_ratio	value = 20.5 }
							has_province_flag = tribals_present
						}
						tribes_minority_to_majority = yes
					}
				}
				POP_estate_reassignment = yes
			}
		}
		#if = {
		#	limit = {
		#		any_province = {
		#			is_city = yes
		#			is_variable_equal = { which = ptm_subcounty_type		value = 2 }
		#		}
		#	}
		#	country_event = { id = ptm_subcounty_tribes.001 }
		#}
		if = {
			limit = {
				has_global_flag = initialising_estates
			}
			every_country = {
				limit = {
					#exists = yes
					has_country_flag = stuffs_set
				}
				if = {
					limit = {
						OR = {
							is_nomad = yes
							is_tribal = yes
						}
					}
					set_variable = { which = estate_tribals_loyalty 		value = 0.5 }
				}
				else = {
					set_variable = { which = estate_tribals_loyalty 		value = 0.3 }
				}
				set_variable = { which = estate_greater_nobles_loyalty 	value = 0.5 }
				set_variable = { which = estate_lesser_nobles_loyalty 	value = 0.5 }
				set_variable = { which = estate_burghers_loyalty 		value = 0.5 }
				#set_variable = { which = estate_freeholders_loyalty 	value = 0.5 }
				if = {
					limit = {
						tag = CAS
					}
					if = {
						limit = { ai = no }
						set_variable = { which = estate_greater_nobles_loyalty value = 0.25 }
						set_variable = { which = estate_lesser_nobles_loyalty value = 0.25 }
						set_variable = { which = estate_burghers_loyalty value = 0.35 }
					}
					else = {
						set_variable = { which = estate_greater_nobles_loyalty value = 0.5 }
						set_variable = { which = estate_lesser_nobles_loyalty value = 0.5 }
						set_variable = { which = estate_burghers_loyalty value = 0.5 }
					}
				}
				else_if = {
					limit = {
						tag = FEZ
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.3 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.3 }
					set_variable = { which = estate_burghers_loyalty value = 0.4 }
					set_variable = { which = estate_tribals_loyalty value = 0.25 }
				}
				else_if = {
					limit = {
						tag = CHU
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.2 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.15 }
					set_variable = { which = estate_burghers_loyalty value = 0.1 }
					set_variable = { which = estate_tribals_loyalty value = 0.15 }
				}
				else_if = {
					limit = {
						tag = BYZ
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.35 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.4 }
					set_variable = { which = estate_burghers_loyalty value = 0.5 }
					set_variable = { which = estate_tribals_loyalty value = 0.15 }
				}
				else_if = {
					limit = {
						tag = OTT
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.7 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.7 }
					set_variable = { which = estate_burghers_loyalty value = 0.7 }
				}
				else_if = {
					limit = {
						tag = HAB
						ai = yes
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.6 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.6 }
					set_variable = { which = estate_burghers_loyalty value = 0.6 }
				}
				else_if = {
					limit = {
						tag = MOS
						ai = yes
					}
					set_variable = { which = estate_greater_nobles_loyalty value = 0.7 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.7 }
					set_variable = { which = estate_burghers_loyalty value = 0.7 }
				}
			}
		}
		
		every_country = {
			limit = {
				#exists = yes
				has_country_flag = stuffs_set
			}
			#set_variable = { which = average_autonomy 	value = 0 }
			#export_to_variable = {
			#	which = average_autonomy
			#	value = average_autonomy
			#}
			
			### Insure that loyalty can not go below 0 or above 100 ###
			update_estate_dlc_loyalty = yes
			
			set_variable = { which = estate_weight_bu						value = 0 }
			set_variable = { which = estate_burghers_weight_country			value = 0 } ### Total raw strength of Burghers
			set_variable = { which = estate_greater_nobles_weight_country 	value = 0 } ### Total raw strength of Greater Nobles
			set_variable = { which = estate_lesser_nobles_weight_country 	value = 0 } ### Total raw strength of Lesser Nobles
			set_variable = { which = estate_tribals_weight_country 			value = 0 }
			#set_variable = { which = estate_freeholders_weight_country 		value = 0 }
			
			every_owned_province = { ### Pull values from provinces to sum at country scope
				limit = {
					is_city = yes
				}
				set_variable = { 	  which = estate_rural_weight 			value = 0.001 }	### The rural power footprint of a province
				set_variable = { 	  which = estate_city_weight  			value = 0.001 } ### The urban power footprint of a province
				change_variable = {   which = estate_rural_weight 			which = upper_rural_weight }	 ### Upper classes strenghten the estates that they share a province with
				if = { # Burghers in Trade Companies
					limit = {
						is_owned_by_trade_company = yes
					}
					multiply_variable = { 	which = estate_rural_weight value = 0.35 }
				}
				change_variable = {   which = estate_city_weight  			which = upper_urban_weight }	 ### Upper classes strenghten the estates that they share a province with
				multiply_variable = { which = estate_rural_weight			value = 1.5 } ### Nobles have slight entrenchment advantage

				#set_variable = { 	  which = local_autonomy 				value = 0 }
				export_to_variable = {
					which = local_autonomy
					value = local_autonomy
				}
				if = {
					limit = {
						is_capital = yes
						check_variable = { which = local_autonomy value = 1 }
					}
					subtract_variable = {   which = local_autonomy			value = 1 }
				}
				multiply_variable = {   which = local_autonomy				value = 0.01 }
				
				   ## Partly from Bast Display mod
				set_variable = { which = estate_weight which = estate_city_weight }
				change_variable = { which = estate_weight which = estate_rural_weight }
				
				set_variable = { which = estate_la_multiplier which = local_autonomy }
				multiply_variable = { which = estate_la_multiplier value = 0.8 }
				change_variable = { which = estate_la_multiplier value = 0.2 }
				
				set_variable = { which = estate_weight_bu value = 1 }
				subtract_variable = { which = estate_weight_bu which = estate_la_multiplier }
				multiply_variable = { which = estate_weight_bu which = estate_weight }
				
				PREV = { change_variable = { which = estate_weight_bu which = PREV } }
				
				multiply_variable = { which = estate_weight which = estate_la_multiplier }
				
				set_variable = { which = estate_la_multiplier value = 0 }
				set_variable = { which = estate_weight_bu value = 0 }
				
				#set_variable = { which = estate_city_weight_display which = estate_city_weight }
				#set_variable = { which = estate_rural_weight_display which = estate_rural_weight }
				
				set_variable = { which = burghers_nobles_disparity which = estate_city_weight }
				if = { # Burghers in Trade Companies
					limit = {
						is_owned_by_trade_company = yes
					}
					divide_variable = { which = burghers_nobles_disparity value = 0.35 }
				}
				if = {
					limit = { is_variable_equal = { which = estate_rural_weight value = 0 } }
					set_variable = { which = estate_rural_weight value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
				}
				divide_variable = { which = burghers_nobles_disparity which = estate_rural_weight }
				
				if = { ### Province flips from Burghers to Rural Estate
					limit = {
						has_province_flag = burghers_control_province
					}
					set_variable = { which = estate_burghers_weight_country which = estate_weight }
					PREV = { change_variable = { which = estate_burghers_weight_country which = PREV } }
					set_variable = { which = estate_burghers_weight_country value = 0 }
					
					set_variable = { which = estate_disparity_disp value = 1 }
					divide_variable = { which = estate_disparity_disp which = burghers_nobles_disparity }
					multiply_variable = { which = estate_disparity_disp value = 0.8 }
					multiply_variable = { which = estate_disparity_disp value = 100 }
					
					if = {
						limit = {
							NOT = { check_variable = { which = burghers_nobles_disparity value = 0.8 } }
						}
						trigger_switch = {
							on_trigger = has_province_flag
							was_greater_nobles = {
								set_province_flag = estate_changed
								clr_province_flag = was_greater_nobles
								remove_burghers = yes
								add_greater_nobles_visible = yes
							}
							was_lesser_nobles = {
								set_province_flag = estate_changed
								clr_province_flag = was_lesser_nobles
								remove_burghers = yes
								add_lesser_nobles_visible = yes
							}
							was_tribals = {
								set_province_flag = estate_changed
								clr_province_flag = was_tribals
								remove_burghers = yes
								add_tribes_visible = yes
							}
							#was_freeholders = {
							#	set_province_flag = estate_changed
							#	clr_province_flag = was_freeholders
							#	remove_burghers = yes
							#	add_freeholders_visible = yes
							#}
						}
					}
				}
				else_if = { ### Province flips from Rural Estate to Burghers
					limit = {
						OR = {
							has_province_flag = greater_nobles_control_province
							has_province_flag = lesser_nobles_control_province
							has_province_flag = tribals_control_province
							#has_province_flag = freeholders_control_province
						}
					}
					trigger_switch = {
						on_trigger = has_province_flag
						greater_nobles_control_province = { ### Determine the total weight and influence of estate
							set_variable = { which = estate_greater_nobles_weight_country which = estate_weight }
							PREV = { change_variable = { which = estate_greater_nobles_weight_country which = PREV } }
							set_variable = { which = estate_greater_nobles_weight_country value = 0 }
						}
						lesser_nobles_control_province = { ### Determine the total weight and influence of estate
							set_variable = { which = estate_lesser_nobles_weight_country which = estate_weight }
							PREV = { change_variable = { which = estate_lesser_nobles_weight_country which = PREV } }
							set_variable = { which = estate_lesser_nobles_weight_country value = 0 }
						}
						tribals_control_province = { ### Determine the total weight and influence of estate
							set_variable = { which = estate_tribals_weight_country which = estate_weight }
							PREV = { change_variable = { which = estate_tribals_weight_country which = PREV } }
							set_variable = { which = estate_tribals_weight_country value = 0 }
						}
						#freeholders_control_province = { ### Determine the total weight and influence of estate
						#	set_variable = { which = estate_freeholders_weight_country which = estate_weight }
						#	PREV = { change_variable = { which = estate_freeholders_weight_country which = PREV } }
						#	set_variable = { which = estate_freeholders_weight_country value = 0 }
						#}
					}
					
					set_variable = { which = estate_disparity_disp which = burghers_nobles_disparity }
					multiply_variable = { which = estate_disparity_disp value = 0.8 }
					multiply_variable = { which = estate_disparity_disp value = 100 }
					
					if = {
						limit = {
							check_variable = { which = burghers_nobles_disparity	 value = 1.25 }
						}
						trigger_switch = {
							on_trigger = has_province_flag
							greater_nobles_control_province = {
								set_province_flag = estate_changed
								remove_greater_nobles_was = yes
								add_burghers_visible = yes
							}
							lesser_nobles_control_province = {
								set_province_flag = estate_changed
								remove_lesser_nobles_was = yes
								add_burghers_visible = yes
							}
							tribals_control_province = {
								set_province_flag = estate_changed
								remove_tribes_was = yes
								add_burghers_visible = yes
							}
							#freeholders_control_province = {
							#	set_province_flag = estate_changed
							#	remove_freeholders_was = yes
							#	add_burghers_visible = yes
							#}
						}
					}
				}
				set_variable = { which = local_autonomy 	value = 0 }
			}
			if = {
				limit = {
					any_owned_province = {
						has_province_flag = estate_changed
					}
				}
				if = {
					limit = {
						OR = {
							ai = yes
							has_country_flag = hide_estate_changes
						}
					}
					every_owned_province = {
						clr_province_flag = estate_changed
					}
				}
				else_if = {
					limit = {
						has_country_flag = some_estate_changes
					}
					country_event = { id = POP_Estates.513 }
				}
				else = {
					random_owned_province = {
						limit = {
							has_province_flag = estate_changed
						}
						province_event = { id = POP_Estates.501 days = 1 }
					}
				}
			}
			
			# Calculate weight share
			Influence_PrivilegeMod = yes
			
			multiply_variable = { which = EstateInfluence_GN which = estate_greater_nobles_weight_country }
			multiply_variable = { which = EstateInfluence_LN which = estate_lesser_nobles_weight_country }
			multiply_variable = { which = EstateInfluence_BG which = estate_burghers_weight_country }
			multiply_variable = { which = EstateInfluence_TR which = estate_tribals_weight_country }
			#multiply_variable = { which = EstateInfluence_FR which = estate_freeholders_weight_country }
			
			set_variable = { which = estate_bureaucracy_weight_share which = estate_weight_bu }
			set_variable = { which = estate_greater_nobles_weight_share which = estate_greater_nobles_weight_country }
			set_variable = { which = estate_lesser_nobles_weight_share which = estate_lesser_nobles_weight_country }
			set_variable = { which = estate_burghers_weight_share which = estate_burghers_weight_country }
			set_variable = { which = estate_tribals_weight_share which = estate_tribals_weight_country }
			#set_variable = { which = estate_freeholders_weight_share which = estate_freeholders_weight_country }
			
			change_variable = { which = estate_greater_nobles_weight_share which = EstateInfluence_GN }
			change_variable = { which = estate_lesser_nobles_weight_share which = EstateInfluence_LN }
			change_variable = { which = estate_burghers_weight_share which = EstateInfluence_BG }
			change_variable = { which = estate_tribals_weight_share which = EstateInfluence_TR }
			#change_variable = { which = estate_freeholders_weight_share which = EstateInfluence_FR }
			
			set_variable = { which = estate_weight_total which = estate_weight_bu }
			change_variable = { which = estate_weight_total which = estate_greater_nobles_weight_share }
			change_variable = { which = estate_weight_total which = estate_lesser_nobles_weight_share }
			change_variable = { which = estate_weight_total which = estate_burghers_weight_share }
			change_variable = { which = estate_weight_total which = estate_tribals_weight_share }
			#change_variable = { which = estate_weight_total which = estate_freeholders_weight_share }
			
			if = {
				limit = { is_variable_equal = { which = estate_weight_total value = 0 } }
				set_variable = { which = estate_weight_total value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
			}
			divide_variable = { which = estate_bureaucracy_weight_share which = estate_weight_total }
			divide_variable = { which = estate_greater_nobles_weight_share which = estate_weight_total }
			divide_variable = { which = estate_lesser_nobles_weight_share which = estate_weight_total }
			divide_variable = { which = estate_burghers_weight_share which = estate_weight_total }
			divide_variable = { which = estate_tribals_weight_share which = estate_weight_total }
			#divide_variable = { which = estate_freeholders_weight_share which = estate_weight_total }
			
			
			# Initialize estate privileges and modify influence share accordingly
			if = {
				limit = {
					NOT = { has_global_flag = initialising_estates }
				}
				set_variable = { which = estate_weight_bu value = 0 }
			}
			set_variable = { which = estate_weight_total value = 0 }
			
			set_variable = { which = EstateInfluence_GN value = 0 }
			set_variable = { which = EstateInfluence_LN value = 0 }
			set_variable = { which = EstateInfluence_BG value = 0 }
			set_variable = { which = EstateInfluence_TR value = 0 }
			#set_variable = { which = EstateInfluence_FR value = 0 }
		}
		
		# Initialize estate privileges and modify influence share accordingly
		if = {
			limit = {
				has_global_flag = initialising_estates
			}
			every_country = {
				limit = {
					#exists = yes
					has_country_flag = stuffs_set
				}
				PrivilegeInit = yes
				
				set_country_flag = pre_set_privileges
				
				POP_set_privilege_demand_ticker = yes
				
				
				# Calculate weight share
				Influence_PrivilegeMod = yes
				
				multiply_variable = { which = EstateInfluence_GN which = estate_greater_nobles_weight_country }
				multiply_variable = { which = EstateInfluence_LN which = estate_lesser_nobles_weight_country }
				multiply_variable = { which = EstateInfluence_BG which = estate_burghers_weight_country }
				multiply_variable = { which = EstateInfluence_TR which = estate_tribals_weight_country }
				#multiply_variable = { which = EstateInfluence_FR which = estate_freeholders_weight_country }
				
				set_variable = { which = estate_bureaucracy_weight_share which = estate_weight_bu }
				set_variable = { which = estate_greater_nobles_weight_share which = estate_greater_nobles_weight_country }
				set_variable = { which = estate_lesser_nobles_weight_share which = estate_lesser_nobles_weight_country }
				set_variable = { which = estate_burghers_weight_share which = estate_burghers_weight_country }
				set_variable = { which = estate_tribals_weight_share which = estate_tribals_weight_country }
				#set_variable = { which = estate_freeholders_weight_share which = estate_freeholders_weight_country }
				
				change_variable = { which = estate_greater_nobles_weight_share which = EstateInfluence_GN }
				change_variable = { which = estate_lesser_nobles_weight_share which = EstateInfluence_LN }
				change_variable = { which = estate_burghers_weight_share which = EstateInfluence_BG }
				change_variable = { which = estate_tribals_weight_share which = EstateInfluence_TR }
				#change_variable = { which = estate_freeholders_weight_share which = EstateInfluence_FR }
				
				set_variable = { which = estate_weight_total which = estate_weight_bu }
				change_variable = { which = estate_weight_total which = estate_greater_nobles_weight_share }
				change_variable = { which = estate_weight_total which = estate_lesser_nobles_weight_share }
				change_variable = { which = estate_weight_total which = estate_burghers_weight_share }
				change_variable = { which = estate_weight_total which = estate_tribals_weight_share }
				#change_variable = { which = estate_weight_total which = estate_freeholders_weight_share }
				
				if = {
					limit = { is_variable_equal = { which = estate_weight_total value = 0 } }
					set_variable = { which = estate_weight_total value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
				}
				divide_variable = { which = estate_bureaucracy_weight_share which = estate_weight_total }
				divide_variable = { which = estate_greater_nobles_weight_share which = estate_weight_total }
				divide_variable = { which = estate_lesser_nobles_weight_share which = estate_weight_total }
				divide_variable = { which = estate_burghers_weight_share which = estate_weight_total }
				divide_variable = { which = estate_tribals_weight_share which = estate_weight_total }
				#divide_variable = { which = estate_freeholders_weight_share which = estate_weight_total }
				
				set_variable = { which = EstateInfluence_GN value = 0 }
				set_variable = { which = EstateInfluence_LN value = 0 }
				set_variable = { which = EstateInfluence_BG value = 0 }
				set_variable = { which = EstateInfluence_TR value = 0 }
				#set_variable = { which = EstateInfluence_FR value = 0 }
				
				set_variable = { which = estate_weight_total value = 0 }
				set_variable = { which = estate_weight_bu value = 0 }
				
				# Initialize income and tax
				IncomeSetPre = yes
				
				every_owned_province = {
					limit = {
						is_city = yes
					}
					StatSetCore = yes
					IncomeSet = yes
					
					DevSet = yes
					
					StatCleanup = yes
				}
				# Set provincial income and its taxation
				get_estate_income = yes
				
				IncomeSetPost = yes
			}
		}
		
		#ptm_subtribe_recalc_all = yes
		
		every_country = { ### Calculate the share of country power for each estate
			limit = {
				#exists = yes
				has_country_flag = stuffs_set
			}
			#set_variable = {	which = estate_unit_maintenance_modifier 			value = 0 } ### This will scale up levy maintenance over time.  Eventually, it becomes more expensive than state troops, incentivizing revokation of levy privileges
			set_variable = {	which = estate_unit_maintenance_modifier 			value = 250 }
			change_variable = { which = estate_unit_maintenance_modifier 			which = year_ticker }
			multiply_variable = { which = estate_unit_maintenance_modifier 			value = 0.004 }
			
			if = {
				limit = { full_idea_group = quantity_ideas }
				multiply_variable = { which = estate_unit_maintenance_modifier 		value = 0.9 }
			}
			
			set_variable = { 	which = estate_burghers_treasury_annual 			which = EstateIncome_BG_Total }	### Annual gross income gain for estate
			set_variable = {	which = estate_greater_nobles_treasury_annual		which = EstateIncome_GN_Total }	### Annual gross income gain for estate
			set_variable = {	which = estate_lesser_nobles_treasury_annual		which = EstateIncome_LN_Total }	### Annual gross income gain for estate
			set_variable = {	which = estate_tribals_treasury_annual				which = EstateIncome_TR_Total }
			
			#ptm_subtribe_add_all = yes
			
			change_variable = { which = estate_tribals_treasury_annual 				which = estate_tribals_being_tribals }
			
			
			every_owned_province = { ### Determines treasuries and other money related stats for estates
				limit = {
					is_city = yes
				}
				trigger_switch = {
					on_trigger = has_province_flag
					burghers_control_province = { ### Determines the importance of each province to the estate which controls it.  Estates cling on harder to more important provinces
						#set_variable = { 	  which = estate_burghers_weight_country 				value = 0 }
						set_variable = {   which = estate_burghers_weight_country 				which = PREV }
						#set_variable = {	  which = estate_burghers_province_percentage 			value = 0 }
						set_variable = { 	  which = estate_burghers_province_percentage 			which = estate_weight }
						multiply_variable = { which = estate_burghers_province_percentage 			value = 100 }
						
						if = {
							limit = { is_variable_equal = { which = estate_burghers_weight_country value = 0 } }
							set_variable = { which = estate_burghers_weight_country value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
						}
						#else = {
							divide_variable = {
								which = estate_burghers_province_percentage
								which = estate_burghers_weight_country
							}
						#}
					}
					greater_nobles_control_province = { ### Determines the importance of each province to the estate which controls it, also adds tax related income
						#set_variable = {	  which = estate_greater_nobles_weight_country 				value = 0 }
						set_variable = {   which = estate_greater_nobles_weight_country 				which = PREV }
						#set_variable = { 	  which = estate_greater_nobles_province_percentage 			value = 0 } ### The percentage weight this province accounts for relative to the country total
						set_variable = { 	  which = estate_greater_nobles_province_percentage 			which = estate_weight }
						multiply_variable = { which = estate_greater_nobles_province_percentage 			value = 100 }
						#if = {
						#	limit = {
						#		is_variable_equal = {
						#			which = estate_greater_nobles_weight_country
						#			value = 0
						#		}
						#	}
						#	
						#	# log = "<ERROR><BD47B400><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
						#	
						#}
						#else = {
							divide_variable = {
								which = estate_greater_nobles_province_percentage
								which = estate_greater_nobles_weight_country
							}
						#}
						
						#if = { ### Stop gap to remove double flagging
						#	limit = {
						#		has_province_flag = lesser_nobles_control_province
						#	}
							clr_province_flag = lesser_nobles_control_province
						#}
					}
					lesser_nobles_control_province = { ### Determines the importance of each province to the estate which controls it
						#set_variable = {	  which = estate_lesser_nobles_weight_country 				value = 0 }
						set_variable = {   which = estate_lesser_nobles_weight_country 				which = PREV }
						#set_variable = { 	  which = estate_lesser_nobles_province_percentage			value = 0 }
						set_variable = { 	  which = estate_lesser_nobles_province_percentage			which = estate_weight }
						multiply_variable = { which = estate_lesser_nobles_province_percentage			value = 100 }
						
						if = {
							limit = { is_variable_equal = { which = estate_lesser_nobles_weight_country value = 0 } }
							set_variable = { which = estate_lesser_nobles_weight_country value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
						}
						#else = {
							divide_variable = {
								which = estate_lesser_nobles_province_percentage
								which = estate_lesser_nobles_weight_country
							}
						#}
						
						#if = { ### Stop gap to remove double flagging
						#	limit = {
						#		has_province_flag = greater_nobles_control_province
						#	}
							clr_province_flag = greater_nobles_control_province
						#}
					}
					tribals_control_province = { ### Determines the importance of each province to the estate which controls it
						#set_variable = {	  which = estate_tribals_weight_country 				value = 0 }
						set_variable = {   which = estate_tribals_weight_country 				which = PREV }
						#set_variable = { 	  which = estate_tribals_province_percentage			value = 0 }
						set_variable = { 	  which = estate_tribals_province_percentage			which = estate_weight }
						multiply_variable = { which = estate_tribals_province_percentage			value = 100 }
						#if = {
						#	limit = {
						#		is_variable_equal = {
						#			which = estate_tribals_weight_country
						#			value = 0
						#		}
						#	}
						#	
						#	# log = "<ERROR><E7B2CA90><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
						#	
						#}
						#else = {
							divide_variable = {
								which = estate_tribals_province_percentage
								which = estate_tribals_weight_country
							}
						#}
						
						#if = { ### Stop gap to remove double flagging
						#	limit = {
						#		has_province_flag = greater_nobles_control_province
						#	}
							clr_province_flag = greater_nobles_control_province
						#}
					}
					#freeholders_control_province = { ### Determines the importance of each province to the estate which controls it
					#	set_variable = {	  which = estate_freeholders_weight_country 				value = 0 }
					#	change_variable = {   which = estate_freeholders_weight_country 				which = PREV }
					#	set_variable = { 	  which = estate_freeholders_province_percentage			value = 0 }
					#	set_variable = { 	  which = estate_freeholders_province_percentage			which = estate_weight }
					#	multiply_variable = { which = estate_freeholders_province_percentage			value = 100 }
					#	if = {
					#		limit = {
					#			is_variable_equal = {
					#				which = estate_freeholders_weight_country
					#				value = 0
					#			}
					#		}
					#		
					#		# log = "<ERROR><8C531340><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
					#		
					#	}
					#	else = {
					#		divide_variable = {
					#			which = estate_freeholders_province_percentage
					#			which = estate_freeholders_weight_country
					#		}
					#	}
					#}
				}
			}
			
			# Estates pay 'state maintenance' for their pops
			every_owned_province = {
				limit = {
					is_city = yes
				}
				
				#set_variable = { which = local_autonomy 	value = 0 }
				export_to_variable = {
					which = local_autonomy
					value = local_autonomy
				}
				if = {
					limit = {
						is_capital = yes
						check_variable = { which = local_autonomy value = 1 }
					}
					subtract_variable = {   which = local_autonomy			value = 1 }
				}
				multiply_variable = {   which = local_autonomy                    value = 0.01 }
				set_variable = { which = estate_state_maintenance which = total_pop }
				multiply_variable = { which = estate_state_maintenance which = local_autonomy }
				
				set_variable = { which = local_autonomy 	value = 0 }
				
				# 100 / 12 = 8.333...
				divide_variable = { which = estate_state_maintenance value = 8.3 }
				
				trigger_switch = {
					on_trigger = has_province_flag
					greater_nobles_control_province = {
						set_variable = { which = estate_greater_nobles_treasury_annual which = estate_state_maintenance }
						
						PREV = { subtract_variable = { which = estate_greater_nobles_treasury_annual which = PREV } }
						
						set_variable = { which = estate_greater_nobles_treasury_annual value = 0 }
					}
					lesser_nobles_control_province = {
						set_variable = { which = estate_lesser_nobles_treasury_annual which = estate_state_maintenance }
						
						PREV = { subtract_variable = { which = estate_lesser_nobles_treasury_annual which = PREV } }
						
						set_variable = { which = estate_lesser_nobles_treasury_annual value = 0 }
					}
					burghers_control_province = {
						set_variable = { which = estate_burghers_treasury_annual which = estate_state_maintenance }
						
						PREV = { subtract_variable = { which = estate_burghers_treasury_annual which = PREV } }
						
						set_variable = { which = estate_burghers_treasury_annual value = 0 }
					}
					tribals_control_province = {
						set_variable = { which = estate_tribals_treasury_annual which = estate_state_maintenance }
						multiply_variable = { which = estate_tribals_treasury_annual value = 0.25 }
						
						PREV = { subtract_variable = { which = estate_tribals_treasury_annual which = PREV } }
						
						set_variable = { which = estate_tribals_treasury_annual value = 0 }
					}
				}
			}
			
			if = {
				limit = {
					has_global_flag = initialising_estates
				}
				set_variable = { which = estate_burghers_treasury					which = estate_burghers_treasury_annual }
				set_variable = { which = estate_greater_nobles_treasury				which = estate_greater_nobles_treasury_annual }
				set_variable = { which = estate_lesser_nobles_treasury				which = estate_lesser_nobles_treasury_annual }
				### Startup treasuries added ###
				if = {
					limit = {
						check_variable = { which = estate_burghers_treasury      			value = 0.01 }
					}
					multiply_variable = { which = estate_burghers_treasury 						value = 8 }
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_treasury      		value = 0.01 }
					}
					multiply_variable = { which = estate_greater_nobles_treasury 				value = 6 }
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_treasury      		value = 0.01 }
					}
					multiply_variable = { which = estate_lesser_nobles_treasury 				value = 6 }
				}
			}
			else = {
				### All incomes tick up here ###
				change_variable = {     which = estate_burghers_treasury			which = estate_burghers_treasury_annual }
				change_variable = { 	which = estate_greater_nobles_treasury		which = estate_greater_nobles_treasury_annual }
				change_variable = { 	which = estate_lesser_nobles_treasury		which = estate_lesser_nobles_treasury_annual }
			}
			
			# Later used for construction assess
			#set_variable = { 	which = treasury_limit 	which = year_ticker }
			#divide_variable = { which = treasury_limit 	value = 50 }
			#multiply_variable = { which = treasury_limit 	value = 0.02 }
			#change_variable = { which = treasury_limit 	value = 10 }
			
			if = { ### If estate exists, calculate years of cash variable
				limit = {
					check_variable = { which = estate_burghers_weight_share      	value = 0.01 }
				}
				#set_variable = { 	which = estate_burghers_years_of_cash			value = 0 }
				set_variable = { 	which = estate_burghers_years_of_cash			which = estate_burghers_treasury }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_burghers_treasury_annual
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><E9137EB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				if = {
					limit = { is_variable_equal = { which = estate_burghers_treasury_annual value = 0 } }
					set_variable = { which = estate_burghers_treasury_annual value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
				}
				#else = {
					divide_variable = {
						which = estate_burghers_years_of_cash
						which = estate_burghers_treasury_annual
					}
				#}
				#set_variable = { 	which = estate_burghers_fort_forcelimit 		value = 0.01 }
				#set_variable = { 	which = estate_burghers_fort_forcelimit 		which = estate_burghers_treasury_annual }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
				#	divide_variable = {
				#		which = estate_burghers_fort_forcelimit
				#		which = estate_unit_maintenance_modifier
				#	}
				#}
				#multiply_variable = { which = estate_burghers_fort_forcelimit			value = 0.2 }
			}
			if = { ### If estate exists, calculate years of cash variable and forcelimits
				limit = {
					check_variable = { which = estate_greater_nobles_weight_share      	value = 0.01 }
				}
				#set_variable = { 	  which = estate_greater_nobles_years_of_cash			value = 0 }
				set_variable = { 	  which = estate_greater_nobles_years_of_cash			which = estate_greater_nobles_treasury }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_greater_nobles_treasury_annual
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><66522DC0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_greater_nobles_years_of_cash
						which = estate_greater_nobles_treasury_annual
					}
				#}
				#set_variable = { 	  which = estate_greater_nobles_infantry_forcelimit		value = 0 }
				set_variable = { 	  which = estate_greater_nobles_infantry_forcelimit		which = estate_greater_nobles_treasury_annual } ### Forcelimit it ultimately contingent on how much the estate is capable of paying
				#set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		value = 0 }
				set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		which = estate_greater_nobles_treasury_annual }
				#set_variable = { 	  which = estate_greater_nobles_artillery_forcelimit	value = 0 }
				set_variable = { 	  which = estate_greater_nobles_artillery_forcelimit	which = estate_greater_nobles_treasury_annual }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_greater_nobles_infantry_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				### Higher maintenance modifier through time ultimately depresses forcelimit
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_greater_nobles_cavalry_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_greater_nobles_artillery_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				
				set_variable = { which = estate_greater_nobles_land		value = 0 }
				set_variable = { which = estate_greater_nobles_cavalry_land		value = 0 }
				every_owned_province = {
					limit = {
						has_province_flag = greater_nobles_control_province
					}
					PREV = { change_variable = { which = estate_greater_nobles_land		value = 1 } }
					if = {
						limit = {
							NOT = { has_province_flag = no_horses_present }
						}
						PREV = { change_variable = { which = estate_greater_nobles_cavalry_land		value = 1 } }
					}
				}
				if = {
					limit = {
						NOT = { check_variable = { which = estate_greater_nobles_cavalry_land		value = 1 } }
					}
					set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		value = 0.001 }
					divide_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 7 } ### Troops are infantry only
					multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry_forcelimit		value = 1000 }
					set_variable = { which = estate_greater_nobles_infantry_ratio				value = 1 }
					set_variable = { which = estate_greater_nobles_cavalry_ratio				value = 0 }
				}
				else = {
					divide_variable = { which = estate_greater_nobles_cavalry_land			which = estate_greater_nobles_land }
					set_variable = { which = estate_greater_nobles_cavalry_ratio			which = estate_greater_nobles_cavalry_land }
					
					multiply_variable = { which = estate_greater_nobles_cavalry_ratio			value = 0.35 }
					
					set_variable = { which = estate_greater_nobles_infantry_ratio				value = 1 }
					subtract_variable = { which = estate_greater_nobles_infantry_ratio			which = estate_greater_nobles_cavalry_ratio }
											
					divide_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 7 }
					divide_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 7 }
					multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		which = estate_greater_nobles_cavalry_ratio }
					multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		which = estate_greater_nobles_infantry_ratio }
					
					multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 0.001 }
					multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 0.001 }
					multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 1000 }
					multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit	value = 1000 }
				}
				#divide_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 40 }
				multiply_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 0.025 }
				multiply_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 0.001 }
				multiply_variable = { which = estate_greater_nobles_artillery_forcelimit		value = 1000 }
				
				
				if = { ### No artiller if not mil tech 10
					limit = {
						OR = {
							NOT = { mil_tech = 10 }
							
							AND = {
								capital_scope = {
									OR = {
										has_province_flag = part_cont_of_5255
										has_province_flag = part_cont_of_5254
									}
								}
								
								NOT = { mil_tech = 28 }
							}
						}
					}
					set_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = 0 }
				}
				
				#set_variable = { 	  which = estate_greater_nobles_fort_forcelimit 		value = 0.01 }
				#set_variable = { 	  which = estate_greater_nobles_fort_forcelimit 		which = estate_greater_nobles_treasury_annual }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
				#	divide_variable = {
				#		which = estate_greater_nobles_fort_forcelimit
				#		which = estate_unit_maintenance_modifier
				#	}
				#}
				#multiply_variable = {   which = estate_greater_nobles_fort_forcelimit			value = 0.1 }
				
				if = { ### Insures that nobles always have at least 1 regiment
					limit = {
						NOT = { check_variable = { which = estate_greater_nobles_infantry_forcelimit 	value = 1 } }
						check_variable = { which = estate_greater_nobles_treasury_annual					value = 2 }
						is_vassal = no
					}
					set_variable = { which = estate_greater_nobles_infantry_forcelimit	value = 1 }
				}
				if = { ### Don't buy artillery unless they have enough money
					limit = {
						NOT = { check_variable = { which = estate_greater_nobles_treasury_annual	value = 10 } }
					}
					set_variable = { which = estate_greater_nobles_artillery_forcelimit		value = 0 }
				}
				
				if = {
					limit = {
						has_global_flag = initialising_estates
					}
					set_variable = { which = estate_greater_nobles_infantry		which = estate_greater_nobles_infantry_forcelimit }
					set_variable = { which = estate_greater_nobles_cavalry		which = estate_greater_nobles_cavalry_forcelimit }
					set_variable = { which = estate_greater_nobles_artillery	which = estate_greater_nobles_artillery_forcelimit }
				}
				
				#set_variable = { 		which = estate_greater_nobles_infantry_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
				#set_variable = { 		which = estate_greater_nobles_cavalry_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
				#set_variable = { 		which = estate_greater_nobles_artillery_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
				set_variable = { 	which = estate_greater_nobles_infantry_total 		which = estate_greater_nobles_infantry }
				set_variable = { 	which = estate_greater_nobles_cavalry_total 		which = estate_greater_nobles_cavalry }
				set_variable = { 	which = estate_greater_nobles_artillery_total 		which = estate_greater_nobles_artillery }
				if = {
					limit = {
						check_variable = { which = GN_infantry_remaining		value = 1 }
					}
					change_variable = { 	which = estate_greater_nobles_infantry_total 		which = GN_infantry_remaining  } ### Soldiers in the field that have not yet been killed
				}
				if = {
					limit = {
						check_variable = { which = GN_cavalry_remaining		value = 1 }
					}
					change_variable = { 	which = estate_greater_nobles_cavalry_total 		which = GN_cavalry_remaining  } ### Soldiers in the field that have not yet been killed
				}
				if = {
					limit = {
						check_variable = { which = GN_artillery_remaining		value = 1 }
					}
					change_variable = { 	which = estate_greater_nobles_artillery_total 		which = GN_artillery_remaining  } ### Soldiers in the field that have not yet been killed
				}
				
				change_variable = { 	which = estate_greater_nobles_infantry_forcelimit	value = 1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
				change_variable = { 	which = estate_greater_nobles_cavalry_forcelimit	value = 1 }
				change_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = 1 }
				if = {
					limit = {
						is_at_war = no
					}
					set_variable = { which = estate_greater_nobles_infantry_total		which = estate_greater_nobles_infantry }
					set_variable = { which = estate_greater_nobles_cavalry_total		which = estate_greater_nobles_cavalry }
					set_variable = { which = estate_greater_nobles_artillery_total		which = estate_greater_nobles_artillery }
				}
				
				
				if = { ### If above forcelimit, disband down
					limit = {
						NOT = { has_country_flag = raised_special_units }
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_infantry		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_greater_nobles_infantry 		which = estate_greater_nobles_infantry_forcelimit }
							}
							set_variable = { which = estate_greater_nobles_infantry 		which = estate_greater_nobles_infantry_forcelimit }
						}
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_cavalry		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_greater_nobles_cavalry 		which = estate_greater_nobles_cavalry_forcelimit }
							}
							set_variable = { which = estate_greater_nobles_cavalry 		which = estate_greater_nobles_cavalry_forcelimit }
						}
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_artillery		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_greater_nobles_artillery 		which = estate_greater_nobles_artillery_forcelimit }
							}
							set_variable = { which = estate_greater_nobles_artillery 		which = estate_greater_nobles_artillery_forcelimit }
						}
					}
				}
				
				change_variable = { 	which = estate_greater_nobles_infantry_forcelimit	value = -1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
				change_variable = { 	which = estate_greater_nobles_cavalry_forcelimit	value = -1 }
				change_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = -1 }
				
				#set_variable = { 	which = estate_greater_nobles_total_forcelimit		value = 0 }
				set_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_infantry_forcelimit }
				change_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_cavalry_forcelimit }
				change_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_artillery_forcelimit }
				
				#set_variable = { 	which = estate_greater_nobles_troops_total 			value = 0 }
				set_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_infantry_total }
				change_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_cavalry_total }
				change_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_artillery_total }
				if = {
					limit = {
						NOT = { check_variable = { which = estate_greater_nobles_troops_total 	which = estate_greater_nobles_total_forcelimit } }
						check_variable = { which = estate_greater_nobles_total_forcelimit 		value = 1 }
						NOT = { has_global_flag = initialising_estates }
					}
					if = { ### Artillery levies are enabled once you have at least mil tech 10
						limit = {
							NOT = { mil_tech = 10 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 0 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else_if = {
						limit = {
							NOT = { mil_tech = 20 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 1 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else_if = {
						limit = {
							NOT = { mil_tech = 30 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 2 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else = {
						set_variable = { 	which = estate_artillery_amount		value = 3 }
						set_variable = { 	which = estate_construct_multiplier	value = 2 }
					}
					estate_construct_troops = {
						estate = estate_greater_nobles
						estate_prefix = GN
						cavalry_amount_var = estate_greater_nobles_cavalry_ratio
						infantry_amount_var = estate_greater_nobles_infantry_ratio
						artillery_amount_var = estate_artillery_amount
						multiplier_var = estate_construct_multiplier
					}
				}
				set_variable = { 	which = estate_greater_nobles_total_forcelimit		value = 0 }
				set_variable = { 	which = estate_greater_nobles_troops_total 			value = 0 }
				set_variable = { 	which = estate_artillery_amount						value = 0 }
				set_variable = { 	which = estate_construct_multiplier 				value = 0 }
				
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_infantry 		value = 0.001 }
					}
					multiply_variable = {   which = estate_greater_nobles_infantry 		value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry 		value = 1000 }
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_cavalry 		value = 0.001 }
					}
					multiply_variable = {   which = estate_greater_nobles_cavalry 		value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_cavalry 		value = 1000 }
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_artillery 		value = 0.001 }
					}
					multiply_variable = {   which = estate_greater_nobles_artillery 		value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_artillery 		value = 1000 }
				}
				
				#set_variable = { 	  which = estate_greater_nobles_total_soldiers 	value = 0 }
				set_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_infantry }
				change_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_cavalry }
				change_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_artillery }
				
				
				### Everything below pertains to the paying of maintenance on raised units ###
				#set_variable = { 		which = estate_greater_nobles_infantry_maint		value = 0 }
				set_variable = { 		which = estate_greater_nobles_infantry_maint		which = estate_greater_nobles_infantry }
				multiply_variable = { 	which = estate_greater_nobles_infantry_maint		value = 1.8 }
				multiply_variable = { 	which = estate_greater_nobles_infantry_maint 		which = estate_unit_maintenance_modifier }
				#set_variable = { 		which = estate_greater_nobles_cavalry_maint			value = 0 }
				set_variable = { 		which = estate_greater_nobles_cavalry_maint			which = estate_greater_nobles_cavalry }
				multiply_variable = { 	which = estate_greater_nobles_cavalry_maint			value = 2.7 }
				multiply_variable = { 	which = estate_greater_nobles_cavalry_maint 		which = estate_unit_maintenance_modifier }
				#set_variable = { 		which = estate_greater_nobles_artillery_maint		value = 0 }
				set_variable = { 		which = estate_greater_nobles_artillery_maint		which = estate_greater_nobles_artillery }
				multiply_variable = { 	which = estate_greater_nobles_artillery_maint		value = 3.6 }
				multiply_variable = { 	which = estate_greater_nobles_artillery_maint 		which = estate_unit_maintenance_modifier }
				#set_variable = { 	    which = estate_greater_nobles_army_maintenance 		value = 0 }	### This variable is displayed in menu to show the player how much their estate is spending on troop maintenance
				set_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_infantry_maint }
				change_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_cavalry_maint }
				change_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_artillery_maint }
				subtract_variable = { 	which = estate_greater_nobles_treasury 				which = estate_greater_nobles_army_maintenance }
			}
			if = { ### If estate exists, calculate years of cash variable and forcelimits
				limit = {
					check_variable = { which = estate_lesser_nobles_weight_share      	value = 0.01 }
				}
				#set_variable = { 	  which = estate_lesser_nobles_years_of_cash			value = 0 }
				set_variable = { 	  which = estate_lesser_nobles_years_of_cash			which = estate_lesser_nobles_treasury }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				if = {
					limit = { is_variable_equal = { which = estate_lesser_nobles_treasury_annual value = 0 } }
					set_variable = { which = estate_lesser_nobles_treasury_annual value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
				}
				#else = {
					divide_variable = {
						which = estate_lesser_nobles_years_of_cash
						which = estate_lesser_nobles_treasury_annual
					}
				#}
				#set_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 0.01 }
				set_variable = { which = estate_lesser_nobles_infantry_forcelimit		which = estate_lesser_nobles_treasury_annual }
				#set_variable = { which = estate_lesser_nobles_cavalry_forcelimit		value = 0.01 }
				set_variable = { which = estate_lesser_nobles_cavalry_forcelimit		which = estate_lesser_nobles_treasury_annual }
				#set_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 0.01 }
				set_variable = { which = estate_lesser_nobles_artillery_forcelimit		which = estate_lesser_nobles_treasury_annual }
				
				
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_lesser_nobles_infantry_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_lesser_nobles_cavalry_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = estate_lesser_nobles_artillery_forcelimit
						which = estate_unit_maintenance_modifier
					}
				#}
				set_variable = { which = estate_lesser_nobles_land		value = 0 }
				set_variable = { which = estate_lesser_nobles_cavalry_land		value = 0 }
				every_owned_province = {
					limit = {
						has_province_flag = lesser_nobles_control_province
					}
					PREV = { change_variable = { which = estate_lesser_nobles_land		value = 1 } }
					if = {
						limit = {
							NOT = { has_province_flag = no_horses_present }
						}
						PREV = { change_variable = { which = estate_lesser_nobles_cavalry_land		value = 1 } }
					}
				}
				if = {
					limit = {
						NOT = { check_variable = { which = estate_lesser_nobles_cavalry_land		value = 1 } }
					}
					set_variable = { 	  which = estate_lesser_nobles_cavalry_forcelimit		value = 0.001 }
					divide_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 7 } ### Troops are infantry only
					multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 1000 }
					set_variable = { which = estate_lesser_nobles_infantry_ratio				value = 1 }
					set_variable = { which = estate_lesser_nobles_cavalry_ratio					value = 0 }
				}
				else = {
					divide_variable = { which = estate_lesser_nobles_cavalry_land			which = estate_lesser_nobles_land }
					set_variable = { which = estate_lesser_nobles_cavalry_ratio			which = estate_lesser_nobles_cavalry_land }
					
					multiply_variable = { which = estate_lesser_nobles_cavalry_ratio			value = 0.3 }
					
					set_variable = { which = estate_lesser_nobles_infantry_ratio				value = 1 }
					subtract_variable = { which = estate_lesser_nobles_infantry_ratio			which = estate_lesser_nobles_cavalry_ratio }
											
					divide_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 7 }
					divide_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 7 }
					multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		which = estate_lesser_nobles_cavalry_ratio }
					multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		which = estate_lesser_nobles_infantry_ratio }
					
					multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 0.001 }
					multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 0.001 }
					multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 1000 }
					multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit	value = 1000 }
				}
				divide_variable = {   which = estate_lesser_nobles_artillery_forcelimit		value = 45 }
				multiply_variable = {   which = estate_lesser_nobles_artillery_forcelimit		value = 0.001 }
				multiply_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 1000 }
				
				if = { ### No artiller if not mil tech 10
					limit = {
						OR = {
							NOT = { mil_tech = 10 }
							
							AND = {
								capital_scope = {
									OR = {
										has_province_flag = part_cont_of_5255
										has_province_flag = part_cont_of_5254
									}
								}
								
								NOT = { mil_tech = 28 }
							}
						}
					}
					set_variable = { 	which = estate_lesser_nobles_artillery_forcelimit	value = 0 }
				}
				
				#set_variable = { 	  which = estate_lesser_nobles_fort_forcelimit 			value = 0.01 }
				#set_variable = { 	  which = estate_lesser_nobles_fort_forcelimit 			which = estate_lesser_nobles_treasury_annual }
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = estate_unit_maintenance_modifier
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><69D36320><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
				#	divide_variable = {
				#		which = estate_lesser_nobles_fort_forcelimit
				#		which = estate_unit_maintenance_modifier
				#	}
				#}
				#multiply_variable = {   which = estate_lesser_nobles_fort_forcelimit			value = 0.1 }
				
				if = { ### Lesser Nobles must always have at least one unit as long as they make at least 2 ducats annually
					limit = {
						NOT = { check_variable = { which = estate_lesser_nobles_infantry_forcelimit 	value = 1 } }
						check_variable = { which = estate_lesser_nobles_treasury_annual				value = 2 }
						is_vassal = no
					}
					set_variable = { which = estate_lesser_nobles_infantry_forcelimit	value = 1 }
				}
				
				if = {
					limit = {
						NOT = { check_variable = { which = estate_lesser_nobles_treasury_annual	value = 10 } }
					}
					set_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 0 }
				}
				#if = {
				#	limit = {
				#		government = medieval_monarchy # more dependent on levies
				#	}
				#	change_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 1 }
				#}
				
				if = {
					limit = {
						has_global_flag = initialising_estates
					}
					set_variable = { which = estate_lesser_nobles_infantry		which = estate_lesser_nobles_infantry_forcelimit }
					set_variable = { which = estate_lesser_nobles_cavalry		which = estate_lesser_nobles_cavalry_forcelimit }
					set_variable = { which = estate_lesser_nobles_artillery		which = estate_lesser_nobles_artillery_forcelimit }
				}
				
				#set_variable = { 	which = estate_lesser_nobles_infantry_total 		value = 0 }
				#set_variable = { 	which = estate_lesser_nobles_cavalry_total 			value = 0 }
				#set_variable = { 	which = estate_lesser_nobles_artillery_total 		value = 0 }
				set_variable = { which = estate_lesser_nobles_infantry_total 		which = estate_lesser_nobles_infantry }
				set_variable = { which = estate_lesser_nobles_cavalry_total 			which = estate_lesser_nobles_cavalry }
				set_variable = { which = estate_lesser_nobles_artillery_total 		which = estate_lesser_nobles_artillery }
				if = {
					limit = {
						check_variable = { which = LN_infantry_remaining		value = 1 }
					}
					change_variable = { 	which = estate_lesser_nobles_infantry_total 		which = LN_infantry_remaining  } ### Soldiers in the field that have not yet been killed
				}
				if = {
					limit = {
						check_variable = { which = LN_cavalry_remaining		value = 1 }
					}
					change_variable = { 	which = estate_lesser_nobles_cavalry_total 		which = LN_cavalry_remaining  } ### Soldiers in the field that have not yet been killed
				}
				if = {
					limit = {
						check_variable = { which = LN_artillery_remaining		value = 1 }
					}
					change_variable = { 	which = estate_lesser_nobles_artillery_total 		which = LN_artillery_remaining  } ### Soldiers in the field that have not yet been killed
				}

				change_variable = { which = estate_lesser_nobles_infantry_forcelimit	value = 1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
				change_variable = { which = estate_lesser_nobles_cavalry_forcelimit		value = 1 }
				change_variable = { which = estate_lesser_nobles_artillery_forcelimit	value = 1 }
				if = {
					limit = {
						is_at_war = no
					}
					set_variable = { which = estate_lesser_nobles_infantry_total		which = estate_lesser_nobles_infantry }
					set_variable = { which = estate_lesser_nobles_cavalry_total		which = estate_lesser_nobles_cavalry }
					set_variable = { which = estate_lesser_nobles_artillery_total		which = estate_lesser_nobles_artillery }
				}
				if = { ### If above forcelimit, disband down
					limit = {
						NOT = { has_country_flag = raised_special_units }
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_infantry		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_lesser_nobles_infantry 		which = estate_lesser_nobles_infantry_forcelimit }
							}
							set_variable = { which = estate_lesser_nobles_infantry		which = estate_lesser_nobles_infantry_forcelimit }
						}
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_cavalry		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_lesser_nobles_cavalry 		which = estate_lesser_nobles_cavalry_forcelimit }
							}
							set_variable = { which = estate_lesser_nobles_cavalry		which = estate_lesser_nobles_cavalry_forcelimit }
						}
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_artillery		value = 2 }
						}
						if = {
							limit = {
								check_variable = { which = estate_lesser_nobles_artillery 		which = estate_lesser_nobles_artillery_forcelimit }
							}
							set_variable = { which = estate_lesser_nobles_artillery		which = estate_lesser_nobles_artillery_forcelimit }
						}
					}
				}
				change_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = -1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
				change_variable = { which = estate_lesser_nobles_cavalry_forcelimit			value = -1 }
				change_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = -1 }
				
				#set_variable = { 	which = estate_lesser_nobles_total_forcelimit		value = 0 }
				set_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_infantry_forcelimit }
				change_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_cavalry_forcelimit }
				change_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_artillery_forcelimit }
				
				#set_variable = { 	which = estate_lesser_nobles_troops_total 			value = 0 }
				set_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_infantry_total }
				change_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_cavalry_total }
				change_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_artillery_total }
				
				if = {
					limit = {
						NOT = { check_variable = { which = estate_lesser_nobles_troops_total 		which = estate_lesser_nobles_total_forcelimit } }
						check_variable = { which = estate_lesser_nobles_total_forcelimit			value = 1 }
						NOT = { has_global_flag = initialising_estates }
					}
					if = { ### Artillery levies are enabled once you have at least mil tech 10
						limit = {
							NOT = { mil_tech = 10 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 0 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else_if = {
						limit = {
							NOT = { mil_tech = 20 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 1 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else_if = {
						limit = {
							NOT = { mil_tech = 30 }
						}
						set_variable = { 	which = estate_artillery_amount		value = 2 }
						set_variable = { 	which = estate_construct_multiplier	value = 1 }
					}
					else = {
						set_variable = { 	which = estate_artillery_amount		value = 3 }
						set_variable = { 	which = estate_construct_multiplier	value = 2 }
					}
					estate_construct_troops = {
						estate = estate_lesser_nobles
						estate_prefix = LN
						cavalry_amount_var = estate_lesser_nobles_cavalry_ratio
						infantry_amount_var = estate_lesser_nobles_infantry_ratio
						artillery_amount_var = estate_artillery_amount
						multiplier_var = estate_construct_multiplier
					}
				}
				set_variable = { 	which = estate_lesser_nobles_total_forcelimit		value = 0 }
				set_variable = { 	which = estate_lesser_nobles_troops_total 			value = 0 }
				set_variable = { 	which = estate_artillery_amount						value = 0 }
				set_variable = { 	which = estate_construct_multiplier 				value = 0 }
				
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_infantry 		value = 0.001 }
					}
					multiply_variable = {   which = estate_lesser_nobles_infantry 		value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry 		value = 1000 }
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_cavalry 		value = 0.001 }
					}
					multiply_variable = {   which = estate_lesser_nobles_cavalry 			value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_cavalry 			value = 1000 }
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_artillery 		value = 0.001 }
					}
					multiply_variable = {   which = estate_lesser_nobles_artillery 		value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_artillery 		value = 1000 }
				}
				
				#set_variable = { 	  which = estate_lesser_nobles_total_soldiers 	value = 0 }
				set_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_infantry }
				change_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_cavalry }
				change_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_artillery }
				
				### Everything below pertains to maintenance of lesser noble levies
				#set_variable = {    	which = estate_lesser_nobles_maint					value = 0 }
				#set_variable = { 		which = estate_lesser_nobles_infantry_maint			value = 0 }
				set_variable = { 		which = estate_lesser_nobles_infantry_maint			which = estate_lesser_nobles_infantry }
				multiply_variable = { 	which = estate_lesser_nobles_infantry_maint			value = 1.8 }
				multiply_variable = { 	which = estate_lesser_nobles_infantry_maint			which = estate_unit_maintenance_modifier }
				#set_variable = { 		which = estate_lesser_nobles_cavalry_maint			value = 0 }
				set_variable = { 		which = estate_lesser_nobles_cavalry_maint			which = estate_lesser_nobles_cavalry }
				multiply_variable = { 	which = estate_lesser_nobles_cavalry_maint			value = 2.7 }
				multiply_variable = { 	which = estate_lesser_nobles_cavalry_maint			which = estate_unit_maintenance_modifier }
				#set_variable = { 		which = estate_lesser_nobles_artillery_maint		value = 0 }
				set_variable = { 		which = estate_lesser_nobles_artillery_maint		which = estate_lesser_nobles_artillery }
				multiply_variable = { 	which = estate_lesser_nobles_artillery_maint		value = 3.6 }
				multiply_variable = { 	which = estate_lesser_nobles_artillery_maint		which = estate_unit_maintenance_modifier }
				#set_variable = { 	    which = estate_lesser_nobles_army_maintenance 		value = 0 }
				set_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_infantry_maint }
				change_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_cavalry_maint }
				change_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_artillery_maint }
				subtract_variable = { 	which = estate_lesser_nobles_treasury 				which = estate_lesser_nobles_army_maintenance }
			}
			if = {
				limit = {
					has_global_flag = initialising_estates
				}
				# Factor in any tag-based startup effects here
				# Hundred Year War existing losses
				if = {
					limit = { # France had its army destroyed by the English
						tag = FRA
						NOT = { is_year = 1365 }
					}
					multiply_variable = { which = estate_greater_nobles_infantry	value = 0.3 }
					multiply_variable = { which = estate_greater_nobles_cavalry		value = 0.3 }
					multiply_variable = { which = estate_lesser_nobles_infantry		value = 0.3 }
					multiply_variable = { which = estate_lesser_nobles_cavalry		value = 0.3 }
					
					multiply_variable = { which = estate_greater_nobles_treasury	value = 0.15 }
					multiply_variable = { which = estate_lesser_nobles_treasury		value = 0.3 }
					multiply_variable = { which = estate_burghers_treasury			value = 0.6 }
					
					multiply_variable = { which = estate_greater_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 1000 }
				}
				else_if = { # Less heavy losses for existing states within France
					limit = {
						capital_scope = {
							superregion = france_superregion
						}
						NOT = { tag = GUY }
						NOT = { tag = DAL }
						NOT = { tag = NAV }
						NOT = { tag = BLO }
						NOT = { tag = MNF }
						NOT = { is_year = 1365 }
					}
					multiply_variable = { which = estate_greater_nobles_infantry	value = 0.4 }
					multiply_variable = { which = estate_greater_nobles_cavalry		value = 0.4 }
					multiply_variable = { which = estate_lesser_nobles_infantry		value = 0.4 }
					multiply_variable = { which = estate_lesser_nobles_cavalry		value = 0.4 }
					
					multiply_variable = { which = estate_greater_nobles_treasury	value = 0.4 }
					multiply_variable = { which = estate_lesser_nobles_treasury		value = 0.6 }
					multiply_variable = { which = estate_burghers_treasury			value = 0.8 }
					
					multiply_variable = { which = estate_greater_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 1000 }
				}
				else_if = { # Blois isnt as wounded
					limit = {
						tag = BLO
						NOT = { is_year = 1365 }
					}
					multiply_variable = { which = estate_greater_nobles_infantry	value = 0.55 }
					multiply_variable = { which = estate_greater_nobles_cavalry		value = 0.55 }
					multiply_variable = { which = estate_lesser_nobles_infantry		value = 0.65 }
					multiply_variable = { which = estate_lesser_nobles_cavalry		value = 0.65 }
					
					multiply_variable = { which = estate_greater_nobles_treasury	value = 0.6 }
					multiply_variable = { which = estate_lesser_nobles_treasury		value = 0.8 }
					multiply_variable = { which = estate_burghers_treasury			value = 0.9 }
					
					multiply_variable = { which = estate_greater_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 1000 }
				}
				else_if = { # England and Montfort has only some losses, treasuries are better too
					limit = {
						OR = {
							tag = ENG
							tag = GUY
							tag = DAL
							tag = NAV
							tag = MNF
						}
						NOT = { is_year = 1365 }
					}
					multiply_variable = { which = estate_greater_nobles_infantry	value = 0.8 }
					multiply_variable = { which = estate_greater_nobles_cavalry		value = 0.8 }
					multiply_variable = { which = estate_lesser_nobles_infantry		value = 0.85 }
					multiply_variable = { which = estate_lesser_nobles_cavalry		value = 0.85 }
					
					multiply_variable = { which = estate_greater_nobles_treasury	value = 0.7 }
					multiply_variable = { which = estate_lesser_nobles_treasury		value = 0.8 }
					multiply_variable = { which = estate_burghers_treasury			value = 0.9 }
				
					multiply_variable = { which = estate_greater_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_greater_nobles_cavalry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_infantry value = 1000 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 0.001 }
					multiply_variable = { which = estate_lesser_nobles_cavalry value = 1000 }
				}
			}
			
			### Estates pay for their local fortifications ###
			set_variable = { 	  which = estate_base_fort_maintenance_cost				value = 0.75 }
			multiply_variable = { which = estate_base_fort_maintenance_cost				which = estate_unit_maintenance_modifier }
			set_variable = { 	  which = estate_greater_nobles_fort_maintenance		value = 0 }
			set_variable = { 	  which = estate_lesser_nobles_fort_maintenance			value = 0 }
			set_variable = { 	  which = estate_burghers_fort_maintenance				value = 0 }
			set_variable = { 	  which = estate_greater_nobles_forts_total				value = 0 }
			set_variable = { 	  which = estate_lesser_nobles_forts_total				value = 0 }
			set_variable = { 	  which = estate_burghers_forts_total					value = 0 }
			every_owned_province = {
				limit = {
					OR = {
						has_building = local_fortification_1
						has_building = local_fortification_2
						has_building = local_fortification_3
					}
				}
				trigger_switch = {
					on_trigger = has_province_flag
					burghers_control_province = {
						trigger_switch = {
							on_trigger = has_building
							local_fortification_1 = {
								owner = { change_variable = { which = estate_burghers_forts_total 	value = 1 } }
							}
							local_fortification_2 = {
								owner = { change_variable = { which = estate_burghers_forts_total 	value = 2 } }
							}
							local_fortification_3 = {
								owner = { change_variable = { which = estate_burghers_forts_total 	value = 3 } }
							}
						}
					}
					greater_nobles_control_province = {
						trigger_switch = {
							on_trigger = has_building
							local_fortification_1 = {
								owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 1 } }
							}
							local_fortification_2 = {
								owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 2 } }
							}
							local_fortification_3 = {
								owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 3 } }
							}
						}
					}
					lesser_nobles_control_province = {
						trigger_switch = {
							on_trigger = has_building
							local_fortification_1 = {
								owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 1 } }
							}
							local_fortification_2 = {
								owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 2 } }
							}
							local_fortification_3 = {
								owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 3 } }
							}
						}
					}
				}
			}
			set_variable = { 	  which = estate_greater_nobles_fort_maintenance	which = estate_greater_nobles_forts_total }
			set_variable = { 	  which = estate_lesser_nobles_fort_maintenance		which = estate_lesser_nobles_forts_total }
			set_variable = { 	  which = estate_burghers_fort_maintenance			which = estate_burghers_forts_total }
			set_variable = { 	  which = estate_greater_nobles_forts_total			value = 0 }
			set_variable = { 	  which = estate_lesser_nobles_forts_total			value = 0 }
			set_variable = { 	  which = estate_burghers_forts_total				value = 0 }
			multiply_variable = { which = estate_greater_nobles_fort_maintenance	which = estate_base_fort_maintenance_cost }
			multiply_variable = { which = estate_lesser_nobles_fort_maintenance     which = estate_base_fort_maintenance_cost }
			multiply_variable = { which = estate_burghers_fort_maintenance          which = estate_base_fort_maintenance_cost }
			if = {
				limit = { full_idea_group = fortification_ideas }
				multiply_variable = { which = estate_greater_nobles_fort_maintenance	value = 0.75 }
				multiply_variable = { which = estate_lesser_nobles_fort_maintenance     value = 0.75 }
				multiply_variable = { which = estate_burghers_fort_maintenance          value = 0.75 }
			}
			subtract_variable = { which = estate_greater_nobles_treasury			which = estate_greater_nobles_fort_maintenance }
			subtract_variable = { which = estate_lesser_nobles_treasury             which = estate_lesser_nobles_fort_maintenance }
			subtract_variable = { which = estate_burghers_treasury                  which = estate_burghers_fort_maintenance }
			
			### Calculates Tribal Host Number ###
			if = {
				limit = {
					check_variable = { which = estate_tribals_weight_share		value = 0.01 }
				}
				if = {
					limit = {
						has_global_flag = initialising_estates
					}
					#set_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0 }
					#set_variable = { which = estate_tribals_wealth 					value = 0 }
					set_variable = { which = estate_tribals_wealth 				which = estate_tribals_treasury_annual }
					set_variable = { which = estate_tribals_wealth_startup_ticker 	which = estate_tribals_wealth }
					if = {
						limit = {
							tag = WHI
							NOT = { is_year = 1359 }
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 110 }
					}
					else_if = {
						limit = {
							tag = BLU
							NOT = { is_year = 1359 }
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 75 }
					}
					else_if = {
						limit = {
							tag = CHU
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 30 }
						}
					else_if = {
						limit = {
							tag = MAL
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 20 }
					}
					else_if = {
						limit = {
							tag = KBO
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 25 }
					}
					else_if = {
						limit = {
							tag = YUA
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 40 }
					}
					else_if = {
						limit = {
							is_nomad = yes
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 60 }
					}
					else_if = {
						limit = {
							is_tribal = no
						}
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 35 }
					}
					else = {
						multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 50 }
					}
					multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0.925 }
					change_variable = {   which = estate_tribals_treasury_annual		value = 10 } ### Giving something to work off of for dinky little tribes
					change_variable = { which = estate_tribals_wealth 					which = estate_tribals_wealth_startup_ticker }
			set_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0 }
				}
				else = {
					change_variable = {   which = estate_tribals_treasury_annual	value = 10 } ### Giving something to work off of for dinky little tribes
					change_variable = {   which = estate_tribals_wealth				which = estate_tribals_treasury_annual }
				}
				calc_tribal_tribute_favor = yes
				change_variable = {   which = estate_tribals_wealth				which = tribal_tribute_favor }
				
				#set_variable = { 	  which = estate_tribals_wealth_spent		value = 0 }
				set_variable = { 	  which = estate_tribals_wealth_spent 		which = estate_tribals_wealth }
				
				
				if = {
					limit = {
						is_nomad = yes
						}
					if = {
						limit = {
							has_global_flag = initialising_estates
						}
						set_horde_unity_var = yes
					}
					#set_variable = { 	  which = estate_tribal_tribute				value = 0 } ### Money given from the tribe to the government if government is horde
					set_variable = { 	  which = estate_tribal_tribute				which = estate_tribals_wealth }
					#set_variable = { 	  which = estate_tribal_tribute_percent		value = 0 } ### Percentage gain based on Horde Unity
					set_variable = {	  which = estate_tribal_tribute_percent		which = horde_unity }
					multiply_variable = {   which = estate_tribal_tribute_percent		value = 0.01 }
					if = {
						limit = {
							NOT = { check_variable = { which = estate_tribal_tribute_percent		value = 0.3 } }
						}
						set_variable = {	  which = estate_tribal_tribute_percent		value = 0.3 } # Min 30% tribute floor, prevents death spirals
					}
					multiply_variable = { which = estate_tribal_tribute_percent		value = 0.01 } #Tribal Tribute rate, balance with this. 0.01 = 1% of the treasury as tribute
					multiply_variable = { which = estate_tribal_tribute				which = estate_tribal_tribute_percent }
					
					multiply_variable = { which = estate_tribals_wealth				value = 0.925 }
					set_variable = { 	  which = estate_tribals_wealth_percent		value = 0.075 }
					subtract_variable = { which = estate_tribals_wealth_percent		which = estate_tribal_tribute_percent }
					multiply_variable = { which = estate_tribals_wealth_spent 		which = estate_tribals_wealth_percent }
					set_variable = { 	  which = estate_tribal_tribute_percent		value = 0 }
					set_variable = { 	  which = estate_tribals_wealth_percent		value = 0 }
					
					calc_tribal_tribute = yes
					
					#if = {
						#limit = {
						#	NOT = { has_global_flag = show_for_developers }
						#}
						set_variable = { which = estate_tribal_tribute_percent		value = 0 }
						set_variable = { which = estate_tribal_tribute_cost			value = 0 }
					#}
				}
				else = {
					if = {
						limit = {
							check_variable = { which = estate_tribal_tribute		value = 0.001 }
						}
						clear_tribal_tribute = yes
					}
					multiply_variable = { which = estate_tribals_wealth			value = 0.925 }
					multiply_variable = { which = estate_tribals_wealth_spent 	value = 0.075 }
				}
				if = {
					limit = {
						NOT = { has_country_flag = TR_partial_support }
						NOT = { has_country_flag = TR_full_support }
					}
					set_variable = { which = estate_tribals_land		value = 0 }
					set_variable = { which = estate_tribals_cavalry_land		value = 0 }
					every_owned_province = {
						limit = {
							has_province_flag = tribals_control_province
						}
						PREV = { change_variable = { which = estate_tribals_land		value = 1 } }
						if = {
							limit = {
								NOT = { has_province_flag = no_horses_present }
							}
							PREV = { change_variable = { which = estate_tribals_cavalry_land		value = 1 } }
						}
					}
					if = {
						limit = {
							NOT = { check_variable = { which = estate_tribals_cavalry_land		value = 1 } }
						}
						#set_variable = { 	  which = estate_tribals_infantry_loyal		value = 0 }
						set_variable = { 	  which = estate_tribals_infantry_loyal		which = estate_tribals_wealth_spent }
						multiply_variable = { which = estate_tribals_infantry_loyal		which = estate_unit_maintenance_modifier }
						set_variable = { 	  which = estate_tribals_cavalry_loyal		value = 0.001 }
						divide_variable = {   which = estate_tribals_infantry_loyal		value = 8.5 } ### Troops are infantry only
						set_variable = { which = estate_tribals_infantry_ratio			value = 1 }
						set_variable = { which = estate_tribals_cavalry_ratio			value = 0 }
						multiply_variable = {   which = estate_tribals_infantry_loyal			value = 0.001 }
						multiply_variable = {   which = estate_tribals_infantry_loyal		value = 1000 }
					}
					else = {
						divide_variable = { which = estate_tribals_cavalry_land			which = estate_tribals_land }
						set_variable = { which = estate_tribals_cavalry_ratio			which = estate_tribals_cavalry_land }
						if = {
							limit = {
								is_nomad = yes
							}
							multiply_variable = { which = estate_tribals_cavalry_ratio			value = 0.8 }
						}
						else = {
							multiply_variable = { which = estate_tribals_cavalry_ratio			value = 0.4 }
						}
						set_variable = { which = estate_tribals_infantry_ratio				value = 1 }
						subtract_variable = { which = estate_tribals_infantry_ratio			which = estate_tribals_cavalry_ratio }
						
						set_variable = { 	  which = estate_tribals_cavalry_loyal		value = 0.001 } ### Tribal troops don't pay maintenance and are always at forcelimit unless killed.  Forcelimit is determined by how much each month is spent from the wealth pool.
						set_variable = { 	  which = estate_tribals_infantry_loyal		value = 0.001 }
						set_variable = { 	  which = estate_tribals_cavalry_loyal		which = estate_tribals_wealth_spent }
						set_variable = { 	  which = estate_tribals_infantry_loyal		which = estate_tribals_wealth_spent }
						divide_variable = { which = estate_tribals_cavalry_loyal		which = estate_unit_maintenance_modifier }
						divide_variable = { which = estate_tribals_infantry_loyal		which = estate_unit_maintenance_modifier }
						
						divide_variable = {   which = estate_tribals_cavalry_loyal		value = 8.5 }
						divide_variable = {   which = estate_tribals_infantry_loyal		value = 8.5 }
						multiply_variable = { which = estate_tribals_cavalry_loyal		which = estate_tribals_cavalry_ratio }
						multiply_variable = { which = estate_tribals_infantry_loyal		which = estate_tribals_infantry_ratio }
						multiply_variable = {   which = estate_tribals_cavalry_loyal		value = 0.001 }
						multiply_variable = {   which = estate_tribals_infantry_loyal		value = 0.001 }
						multiply_variable = { which = estate_tribals_cavalry_loyal		value = 1000 }
						multiply_variable = { which = estate_tribals_infantry_loyal		value = 1000 }
					}
				}
				if = {
					limit = {
						is_nomad = yes
					}
					if = {
						limit = {
							NOT = { check_variable = { which = estate_tribals_cavalry_loyal 	value = 1 } }
						}
						set_variable = { which = estate_tribals_cavalry_loyal 	value = 1 }
					}
				}
				else_if = {
					limit = {
						NOT = { check_variable = { which = estate_tribals_infantry_loyal 	value = 1 } }
					}
					set_variable = { which = estate_tribals_infantry_loyal 	value = 1 }
				}
				### Tribal troops don't pay maintenance and are always at forcelimit unless killed.  Forcelimit is determined by how much each month is spent from the wealth pool.
				#set_variable = { which = estate_tribals_infantry_host			value = 0 }
				set_variable = { which = estate_tribals_infantry_host			which = estate_tribals_infantry_loyal }
				#set_variable = { which = estate_tribals_cavalry_host			value = 0 }
				set_variable = { which = estate_tribals_cavalry_host			which = estate_tribals_cavalry_loyal }
				
				#change_variable = { which = estate_tribals_infantry_host 		which = estate_tribals_subtribe_infantry }
				#change_variable = { which = estate_tribals_cavalry_host 		which = estate_tribals_subtribe_cavalry }
					
				
				#set_variable = { 	which = estate_tribals_total_soldiers			value = 0 }
				set_variable = { which = estate_tribals_total_soldiers 			which = estate_tribals_cavalry_host }
				change_variable = { which = estate_tribals_total_soldiers 			which = estate_tribals_infantry_host }
				
				#ptm_subtribe_power_share_calc = yes
			}
			else = {
				set_variable = { which = tribal_tribute_favor				value = 0 }
				if = {
					limit = {
						check_variable = { which = estate_tribal_tribute		value = 0.001 }
					}
					clear_tribal_tribute = yes
				}
			}
			
			# Updates the flags that display an estates influence
			POP_update_estates_influence = yes
		}
		if = {
			limit = {
				NOT = { has_global_flag = initialising_estates }
			}
			#Estates consider building stuffs
			country_event = {
				id = POP_Estates_KJH.999
				days = 3
			}
			country_event = {
				id = POP_Estates_Events.001
				days = 30
			}
			every_country = { ### Add promotion juice if High court titles are present for Lesser Nobles
				limit = {
					#exists = yes
					check_variable = { which = estate_lesser_nobles_weight_share 	value = 0.01 }
					has_country_flag = stuffs_set
				}
				if = { ### Add Greater Noble Growth from Lesser Nobles
					limit = {
						OR = {
							has_country_flag = LN_high_court_titles_1_flag
							has_country_flag = LN_high_court_titles_2_flag
						}
					}
					random_list = {
						25 = { set_country_flag = promotion_happens }
						75 = { }
					}
					if = {
						limit = {
							has_country_flag = promotion_happens
						}
						clr_country_flag = promotion_happens
						if = {
							limit = {
								NOT = { check_variable = { which = estate_lesser_nobles_promotion_weight 	value = 0.001 } }
							}
							set_variable = { which = estate_lesser_nobles_promotion_weight			value = 0 }
						}
						set_variable = { which = estate_lesser_nobles_promotion_weight_added	value = 0 }
						if = {
							limit = {
								has_country_flag = LN_high_court_titles_1_flag
							}
							set_variable = { which = estate_lesser_nobles_promotion_weight_added	value = 0.003 }
						}
						if = {
							limit = {
								has_country_flag = LN_high_court_titles_2_flag
							}
							set_variable = { which = estate_lesser_nobles_promotion_weight_added	value = 0.006 }
						}
						multiply_variable = { which = estate_lesser_nobles_promotion_weight_added	which = estate_lesser_nobles_weight_country }
						change_variable = {   which = estate_lesser_nobles_promotion_weight			which = estate_lesser_nobles_promotion_weight_added }
					}
				}
				#set_variable = { 	  which = estate_lesser_nobles_promotion_check 			value = 0 }
				set_variable = {      which = estate_lesser_nobles_promotion_check			which = estate_lesser_nobles_promotion_weight }
				multiply_variable = { which = estate_lesser_nobles_promotion_check			value = 5 }
				if = { ### Check to see if there are any Lesser Noble Promotions
					limit = {
						check_variable = { which = estate_lesser_nobles_promotion_check		which = estate_lesser_nobles_weight_country }
					}
					every_owned_province = {
						limit = {
							has_province_flag = lesser_nobles_control_province
						}
						#set_variable = { which = estate_lesser_nobles_promotion_weight		value = 0 }
						set_variable = { which = estate_lesser_nobles_promotion_weight 		which = PREV }
					}
					while = {
						limit = {
							any_owned_province = {
								has_province_flag = lesser_nobles_control_province
								NOT = { has_province_flag = time_to_promote }
								check_variable = { which = estate_lesser_nobles_promotion_weight 	which = estate_weight }
							}
						}
						random_owned_province = {
							limit = {
								check_variable = { which = estate_lesser_nobles_promotion_weight		which = estate_weight }
								has_province_flag = lesser_nobles_control_province
								NOT = { has_province_flag = time_to_promote }
							}
							#set_variable = { which = estate_lesser_nobles_promotion_weight_subtract 	value = 0 }
							set_variable = { which = estate_lesser_nobles_promotion_weight_subtract		which = estate_weight } ### set to weight in province
							
							#PREV = { set_variable = { which = estate_lesser_nobles_promotion_weight_subtract		value = 0 } }
							PREV = { set_variable = { which = estate_lesser_nobles_promotion_weight_subtract		which = PREV } }
							PREV = { subtract_variable = { which = estate_lesser_nobles_promotion_weight			which = estate_lesser_nobles_promotion_weight_subtract } }
							#	set_variable = { which = estate_lesser_nobles_promotion_weight_subtract				value = 0 }
							set_province_flag = time_to_promote
						}
						every_owned_province = {
							limit = {
								has_province_flag = lesser_nobles_control_province
							}
							#set_variable = { which = estate_lesser_nobles_promotion_weight		value = 0 }
							set_variable = { which = estate_lesser_nobles_promotion_weight 		which = PREV }
						}
					}
					country_event = {
						id = POP_Estates.510
					}
				}
			}
			every_country = { ### Special taxes assigned
				limit = {
					#exists = yes
					OR = {
						check_variable = { which = GN_special_taxes_ticker		value = 1 }
						check_variable = { which = LN_special_taxes_ticker		value = 1 }
					}
					is_at_war = no
					has_country_flag = stuffs_set
				}
				if = {
					limit = {
						num_of_loans = 3
					}
					country_event = {
						id = POP_Estates_Interactions.700
						days = 3
					}
				}
				else = {
					country_event = {
						id = POP_Estates_Interactions.701
						days = 3
					}
				}
			}
			every_country = { ### Privileges reassigned wherever appropriate
				limit = {
					#exists = yes
					has_country_flag = stuffs_set
				}
				### Greater Nobles Privileges
				trigger_switch = {
					on_trigger = has_country_flag
					commoners_banned_from_officers_corps_1_flag = {
						commoners_banned_from_officers_corps_1 = yes
					}
					commoners_banned_from_officers_corps_2_flag = {
						commoners_banned_from_officers_corps_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					ceremonial_generalships_1_flag = {
						ceremonial_generalships_1 = yes
					}
					ceremonial_generalships_2_flag = {
						ceremonial_generalships_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_exclude_commoners_cabinet_1_flag = {
						GN_exclude_commoners_cabinet_1 = yes
					}
					GN_exclude_commoners_cabinet_2_flag = {
						GN_exclude_commoners_cabinet_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_high_court_titles_1_flag = {
						GN_high_court_titles_1 = yes
					}
					GN_high_court_titles_2_flag = {
						GN_high_court_titles_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_relaxed_levy_obligations_1_flag = {
						GN_relaxed_levy_obligations_1 = yes
					}
					GN_relaxed_levy_obligations_2_flag = {
						GN_relaxed_levy_obligations_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_tax_exemptions_1_flag = {
						GN_tax_exemptions_1 = yes
					}
					GN_tax_exemptions_2_flag = {
						GN_tax_exemptions_2 = yes
					}
					GN_tax_exemptions_3_flag = {
						GN_tax_exemptions_3 = yes
					}
					GN_tax_exemptions_4_flag = {
						GN_tax_exemptions_4 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_high_nobles_court_1_flag = {
						GN_high_nobles_court_1 = yes
					}
					GN_high_nobles_court_2_flag = {
						GN_high_nobles_court_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					GN_authority_to_govern_locally_1_flag = {
						GN_authority_to_govern_locally_1 = yes
					}
					GN_authority_to_govern_locally_2_flag = {
						GN_authority_to_govern_locally_2 = yes
					}
					GN_authority_to_govern_locally_3_flag = {
						GN_authority_to_govern_locally_3 = yes
					}
					GN_authority_to_govern_locally_4_flag = {
						GN_authority_to_govern_locally_4 = yes
					}
				}
				
				### Lesser Noble Privileges
				trigger_switch = {
					on_trigger = has_country_flag
					LN_relaxed_levy_obligations_1_flag = {
						LN_relaxed_levy_obligations_1 = yes
					}
					LN_relaxed_levy_obligations_2_flag = {
						LN_relaxed_levy_obligations_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					LN_tax_exemptions_1_flag = {
						LN_tax_exemptions_1 = yes
					}
					LN_tax_exemptions_2_flag = {
						LN_tax_exemptions_2 = yes
					}
					LN_tax_exemptions_3_flag = {
						LN_tax_exemptions_3 = yes
					}
					LN_tax_exemptions_4_flag = {
						LN_tax_exemptions_4 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					LN_high_court_titles_1_flag = {
						LN_high_court_titles_1 = yes
					}
					LN_high_court_titles_2_flag = {
						LN_high_court_titles_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					LN_authority_to_govern_locally_1_flag = {
						LN_authority_to_govern_locally_1 = yes
					}
					LN_authority_to_govern_locally_2_flag = {
						LN_authority_to_govern_locally_2 = yes
					}
					LN_authority_to_govern_locally_3_flag = {
						LN_authority_to_govern_locally_3 = yes
					}
					LN_authority_to_govern_locally_4_flag = {
						LN_authority_to_govern_locally_4 = yes
					}
				}
				
				### Burgher Privileges
				trigger_switch = {
					on_trigger = has_country_flag
					BG_tolerate_smuggling_1_flag = {
						BG_tolerate_smuggling_1 = yes
					}
					BG_tolerate_smuggling_2_flag = {
						BG_tolerate_smuggling_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_honorary_noble_titles_1_flag = {
						BG_honorary_noble_titles_1 = yes
					}
					BG_honorary_noble_titles_2_flag = {
						BG_honorary_noble_titles_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_right_of_commerce_1_flag = {
						BG_right_of_commerce_1 = yes
					}
					BG_right_of_commerce_2_flag = {
						BG_right_of_commerce_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_authority_to_govern_locally_1_flag = {
						BG_authority_to_govern_locally_1 = yes
					}
					BG_authority_to_govern_locally_2_flag = {
						BG_authority_to_govern_locally_2 = yes
					}
					BG_authority_to_govern_locally_3_flag = {
						BG_authority_to_govern_locally_3 = yes
					}
					BG_authority_to_govern_locally_4_flag = {
						BG_authority_to_govern_locally_4 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_resist_embargoes_1_flag = {
						BG_resist_embargoes_1 = yes
					}
					BG_resist_embargoes_2_flag = {
						BG_resist_embargoes_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_exemption_from_military_services_1_flag = {
						BG_exemption_from_military_services_1 = yes
					}
					BG_exemption_from_military_services_2_flag = {
						BG_exemption_from_military_services_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_expanded_ship_builders_privileges_1_flag = {
						BG_expanded_ship_builders_privileges_1 = yes
					}
					BG_expanded_ship_builders_privileges_2_flag = {
						BG_expanded_ship_builders_privileges_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_appoint_as_court_suppliers_1_flag = {
						BG_appoint_as_court_suppliers_1 = yes
					}
					BG_appoint_as_court_suppliers_2_flag = {
						BG_appoint_as_court_suppliers_2 = yes
					}
				}
				
				trigger_switch = {
					on_trigger = has_country_flag
					BG_monopoly_on_armaments_1_flag = {
						BG_monopoly_on_armaments_1 = yes
					}
					BG_monopoly_on_armaments_2_flag = {
						BG_monopoly_on_armaments_2 = yes
					}
				}
			}
		}
		
		#every_country = {
		#	limit = {
		#		#exists = yes
		#		has_country_flag = stuffs_set
		#	}
		#	POP_privilege_corruption_calc = yes
		#	if = {
		#		limit = {
		#			has_global_flag = initialising_estates
		#		}
		#		set_startup_corruption = yes
		#	}
		#}
		#if = {
			#limit = {
			#	NOT = { has_global_flag = show_for_developers }
			#}
			every_country = {
				limit = {
					has_country_flag = stuffs_set
				}
				
				POP_privilege_corruption_calc = yes
				if = {
					limit = {
						has_global_flag = initialising_estates
					}
					set_startup_corruption = yes
				}
				
				set_variable = { which = estate_unit_maintenance_modifier				value = 0 }
				#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_infantry_maint 			value = 0 }
				#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_cavalry_maint 			value = 0 }
				#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_maint					value = 0 }
				#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
				#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
				set_variable = { which = estate_base_fort_maintenance_cost				value = 0 }
				set_variable = { which = estate_greater_nobles_fort_maintenance			value = 0 }
				set_variable = { which = estate_lesser_nobles_fort_maintenance			value = 0 }
				set_variable = { which = estate_burghers_fort_maintenance				value = 0 }
				set_variable = { which = estate_greater_nobles_influence_ticker			value = 0 }
				set_variable = { which = estate_lesser_nobles_influence_ticker			value = 0 }
				set_variable = { which = estate_burghers_influence_ticker				value = 0 }
				set_variable = { which = estate_tribals_influence_ticker				value = 0 }
				#set_variable = { which = estate_freeholders_influence_ticker			value = 0 }
				set_variable = { which = estate_bureaucracy_influence_ticker			value = 0 }
				set_variable = { which = estate_lesser_nobles_promotion_check			value = 0 }
				set_variable = { which = estate_lesser_nobles_promotion_weight_subtract value = 0 }
				set_variable = { which = estate_tribals_being_tribals					value = 0 }
				set_variable = { which = estate_greater_nobles_land						value = 0 }
				set_variable = { which = estate_greater_nobles_cavalry_land				value = 0 }
				set_variable = { which = estate_greater_nobles_cavalry_ratio			value = 0 }
				set_variable = { which = estate_lesser_nobles_land						value = 0 }
				set_variable = { which = estate_lesser_nobles_cavalry_land				value = 0 }
				set_variable = { which = estate_lesser_nobles_cavalry_ratio				value = 0 }
				set_variable = { which = estate_tribals_land							value = 0 }
				set_variable = { which = estate_tribals_cavalry_land					value = 0 }
				set_variable = { which = estate_tribals_cavalry_ratio					value = 0 }
			}
			regiongroup = {
				region = {
					limit = {
						is_wasteland = no
						owner = { has_country_flag = stuffs_set }
					}
					set_variable = { which = estate_rural_weight							 value = 0 }
					set_variable = { which = estate_city_weight								 value = 0 }
					set_variable = { which = nobles_burghers_disparity						 value = 0 }
					set_variable = { which = estate_burghers_weight_autonomy				 value = 0 }
					set_variable = { which = estate_greater_nobles_weight_autonomy			 value = 0 }
					set_variable = { which = estate_lesser_nobles_weight_autonomy			 value = 0 }
					set_variable = { which = estate_tribals_weight_autonomy					 value = 0 }
					#set_variable = { which = estate_freeholders_weight_autonomy				 value = 0 }
					set_variable = { which = estate_burghers_province_percentage			 value = 0 }
					set_variable = { which = estate_greater_nobles_province_percentage		 value = 0 }
					set_variable = { which = estate_lesser_nobles_province_percentage		 value = 0 }
					set_variable = { which = estate_tribals_province_percentage				 value = 0 }
					#set_variable = { which = estate_freeholders_province_percentage			 value = 0 }
					set_variable = { which = estate_state_maintenance						 value = 0 }
					set_variable = { which = estate_tribals_wealth_spent					 value = 0 }
					
					set_variable = { which = estate_lesser_nobles_treasury_annual value = 0 }
					set_variable = { which = estate_lesser_nobles_weight_country value = 0 }
					set_variable = { which = estate_greater_nobles_treasury_annual value = 0 }
					set_variable = { which = estate_greater_nobles_weight_country value = 0 }
					set_variable = { which = estate_burghers_treasury_annual value = 0 }
					set_variable = { which = estate_burghers_weight_country value = 0 }
					set_variable = { which = estate_tribals_treasury_annual value = 0 }
					set_variable = { which = estate_tribals_weight_country value = 0 }
				}
			}
		#}
	}
	option = {
		name = "POP_Estates.001.a"
		ai_chance = { factor = 100 }
		
		if = {
			limit = {
				NOT = { has_global_flag = initialising_estates }
			}
			country_event = {
				id = POP_Estates.9999
				days = 1
			}
		}
	}
	after = {
		# log = "END: POP_Estates.001"
		clr_global_flag = estate_calc
		clr_global_flag = initialising_estates
	}
}


################################
## Factions and Estate Events ##
################################

#country_event = {
#    id = POP_Estates.201
#    title = "POP_Estates.201.t"
#    desc = "POP_Estates.201.d"
#    picture = CITY_DEVELOPMENT_AU_eventPicture
#	is_triggered_only = yes
#    hidden = yes
#   
#   
#   
#    immediate = {
#		every_owned_province = {
#			limit = {
#				is_state = yes
#			}
#			if = {
#				limit = {
#					}
#			}
#		}
#		
#		
#	}
#
#	option = {
#		name = "POP_Census.201.a"
#		ai_chance = { factor = 100 }
#		
#	}
#}

country_event = { ### Greater Nobles event selection directory
	id = POP_Estates.201
	title = "POP_Estates.201.t"
	desc = "POP_Estates.201.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		
		if = {
			limit = {
				NOT = { check_variable = { which = estate_greater_nobles_loyalty value = 0.11 } }
				check_variable = { which = estate_greater_nobles_loyalty value = 0.01 }
			}
		}
		
		if = {
			limit = {
				check_variable = { which = estate_greater_nobles_loyalty value = 0.11 }
				NOT = { check_variable = { which = estate_greater_nobles_loyalty value = 0.7 } }
			}
		}
		
		if = {
			limit = {
				check_variable = { which = estate_greater_nobles_loyalty value = 0.7 }
			}
		}
	}
	option = {
		name = "POP_Estates.201.a"
		ai_chance = { factor = 100 }
		#	country_event = {
		#		id = POP_Estates.001
		#	}
	}
}




country_event = {
	id = POP_Estates.301
	title = "POP_Estates.301.t"
	desc = "POP_Estates.301.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	
	immediate = {
		
	}
	option = {
		name = "POP_Estates.301.a"
		ai_chance = { factor = 100 }
		#	country_event = {
		#		id = POP_Estates.001
		#	}
	}
}




country_event = {
	id = POP_Estates.401
	title = "POP_Estates.401.t"
	desc = "POP_Estates.401.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	
	immediate = {
		
	}
	option = {
		name = "POP_Estates.401.a"
		ai_chance = { factor = 100 }
		#	country_event = {
		#		id = POP_Estates.001
		#	}
	}
}



province_event = {
	id = POP_Estates.501
	title = "POP_Estates.501.title"
	desc = { trigger = { has_province_flag = was_greater_nobles } desc = "POP_Estates.501.d" }
	desc = { trigger = { has_province_flag = was_lesser_nobles } desc = "POP_Estates.502.d" }
	desc = { trigger = { has_province_flag = was_tribals } desc = "POP_Estates.503.d" }
	#desc = { trigger = { has_province_flag = was_freeholders } desc = "POP_Estates.504.d" }
	desc = { trigger = { has_province_flag = greater_nobles_control_province } desc = "POP_Estates.505.d" }
	desc = { trigger = { has_province_flag = lesser_nobles_control_province } desc = "POP_Estates.506.d" }
	desc = { trigger = { has_province_flag = tribals_control_province } desc = "POP_Estates.507.d" }
	#desc = { trigger = { has_province_flag = freeholders_control_province } desc = "POP_Estates.508.d" }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } owner = { technology_group = western } } picture = WE_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } OR = { owner = { technology_group = muslim }  owner = { technology_group = turkishtech } owner = { technology_group = steppestech } } } picture = ISL_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } owner = { technology_group = eastern } } picture = EE_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } owner = { technology_group = indian } } picture = IND_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } owner = { technology_group = chinese } } picture = EA_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } OR = { owner = { technology_group = soudantech } owner = { technology_group = sub_saharan } owner = { technology_group = central_african } owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } OR = { owner = { technology_group = austranesian } owner = { technology_group = hawaii_tech } } } picture = SEA_BUR_eventPicture }
	picture = { trigger = { OR = { has_province_flag = was_greater_nobles has_province_flag = was_lesser_nobles has_province_flag = was_tribals } OR = { owner = { technology_group = mesoamerican } owner = { technology_group = south_american } } } picture = AMR_BUR_eventPicture }
	
	picture = { trigger = { has_province_flag = greater_nobles_control_province owner = { technology_group = western } } picture = WE_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province OR = { owner = { technology_group = muslim }  owner = { technology_group = turkishtech } owner = { technology_group = steppestech } } } picture = ISL_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province owner = { technology_group = eastern } } picture = EE_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province owner = { technology_group = indian } } picture = IND_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province owner = { technology_group = chinese } } picture = EA_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province OR = { owner = { technology_group = soudantech } owner = { technology_group = sub_saharan } owner = { technology_group = central_african } owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province OR = { owner = { technology_group = austranesian } owner = { technology_group = hawaii_tech } } } picture = SEA_GN_eventPicture }
	picture = { trigger = { has_province_flag = greater_nobles_control_province OR = { owner = { technology_group = mesoamerican } owner = { technology_group = south_american } } } picture = AMR_GN_eventPicture }
	
	picture = { trigger = { has_province_flag = lesser_nobles_control_province owner = { technology_group = western } } picture = WE_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province OR = { owner = { technology_group = muslim }  owner = { technology_group = turkishtech } owner = { technology_group = steppestech } } } picture = ISL_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province owner = { technology_group = eastern } } picture = EE_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province owner = { technology_group = indian } } picture = IND_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province owner = { technology_group = chinese } } picture = EA_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province OR = { owner = { technology_group = soudantech } owner = { technology_group = sub_saharan } owner = { technology_group = central_african } owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province OR = { owner = { technology_group = austranesian } owner = { technology_group = hawaii_tech } } } picture = SEA_LN_eventPicture }
	picture = { trigger = { has_province_flag = lesser_nobles_control_province OR = { owner = { technology_group = mesoamerican } owner = { technology_group = south_american } } } picture = AMR_LN_eventPicture }
	
	picture = { trigger = { has_province_flag = tribals_control_province OR = { owner = { technology_group = chinese }  owner = { technology_group = turkishtech } owner = { technology_group = western } owner = { technology_group = eastern } owner = { technology_group = indian } owner = { technology_group = steppestech } } } picture = MON_TRI_eventPicture }
	picture = { trigger = { has_province_flag = tribals_control_province OR = { owner = { technology_group = muslim }  owner = { technology_group = soudantech } } } picture = ARAB_TRI_eventPicture }
	picture = { trigger = { has_province_flag = tribals_control_province OR = { owner = { technology_group = sub_saharan }  owner = { technology_group = central_african }  owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_LN_eventPicture }
	picture = { trigger = { has_province_flag = tribals_control_province OR = { owner = { technology_group = austranesian }  owner = { technology_group = hawaii_tech }  } } picture = SEA_LN_eventPicture }
	picture = { trigger = { has_province_flag = tribals_control_province OR = { owner = { technology_group = mesoamerican }  owner = { technology_group = south_american }  } } picture = AMR_LN_eventPicture }

	#picture = { trigger = { has_province_flag = freeholders_control_province } picture = CITY_DEVELOPMENT_AU_eventPicture }
	
	trigger = {
		NOT = { has_country_flag = hide_estate_changes }
		NOT = { has_country_flag = some_estate_changes }
	}
	
	is_triggered_only = yes
	hidden = no
	
	option = {
		name = "POP_Estates.501.a"
		hidden_effect = {
			clr_province_flag = estate_changed
			owner = {
				random_owned_province = {
					limit = {
						has_province_flag = estate_changed
					}
					province_event = { id = POP_Estates.501 days = 1 }
				}
			}
		}
	}
}

province_event = { ### Lesser Nobles to Greater Nobles
	id = POP_Estates.509
	title = "POP_Estates.509.t"
	desc = "POP_Estates.509.d"
	is_triggered_only = yes
	picture = { trigger = { owner = { technology_group = western } } picture = WE_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = muslim }  owner = { technology_group = turkishtech } owner = { technology_group = steppestech } } } picture = ISL_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = eastern } } picture = EE_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = indian } } picture = IND_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = chinese } } picture = EA_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = soudantech } owner = { technology_group = sub_saharan } owner = { technology_group = central_african } owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = austranesian } owner = { technology_group = hawaii_tech } } } picture = SEA_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = mesoamerican } owner = { technology_group = south_american } } } picture = AMR_GN_eventPicture }
	
	trigger = {
		NOT = { has_country_flag = hide_estate_changes }
		NOT = { has_country_flag = some_estate_changes }
	}
	
	option = {
		name = "POP_Estates.509.a"
		hidden_effect = {
			clr_province_flag = time_to_promote
			owner = {
				random_owned_province = {
					limit = {
						has_province_flag = time_to_promote
					}
					province_event = {
						id = POP_Estates.509
						days = 1
					}
				}
			}
		}
	}
}

country_event = { ### Lesser nobles promote
	id = POP_Estates.510
	title = "POP_Estates.510.t"
	desc = "POP_Estates.510.d"
	is_triggered_only = yes
	picture = { trigger = { technology_group = western } picture = WE_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = muslim technology_group = turkishtech technology_group = steppestech } } picture = ISL_GN_eventPicture }
	picture = { trigger = { technology_group = eastern } picture = EE_GN_eventPicture }
	picture = { trigger = { technology_group = indian } picture = IND_GN_eventPicture }
	picture = { trigger = { technology_group = chinese } picture = EA_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = soudantech technology_group = sub_saharan technology_group = central_african technology_group = malagasy_tech technology_group = east_african } } picture = AFR_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = austranesian technology_group = hawaii_tech } } picture = SEA_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = mesoamerican technology_group = south_american } } picture = AMR_GN_eventPicture }
	
	trigger = {
		any_owned_province = {
			has_province_flag = time_to_promote
		}
	}
	immediate = {
		hidden_effect = {
			every_owned_province = {
				limit = {
					has_province_flag = time_to_promote
				}
				remove_lesser_nobles = yes
				add_greater_nobles = yes
			}
		}
	}
	
	option = {
		name = "POP_Estates.510.a"
		if = {
			limit = {
				OR = {
					ai = yes
					has_country_flag = hide_estate_changes
				}
			}
			hidden_effect = {
				every_owned_province = {
					clr_province_flag = time_to_promote
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = some_estate_changes
			}
			every_owned_province = {
				limit = {
					has_province_flag = time_to_promote
				}
				custom_tooltip = POP_Estates.510.tt
				hidden_effect = {
					clr_province_flag = time_to_promote
				}
			}
		}
		else = {
			hidden_effect = {
				random_owned_province = {
					limit = {
						has_province_flag = time_to_promote
					}
					province_event = {
						id = POP_Estates.509
						days = 1
					}
				}
			}
		}
	}
}

country_event = { ### Greater nobles demote
	id = POP_Estates.511
	title = "POP_Estates.511.t"
	desc = "POP_Estates.511.d"
	is_triggered_only = yes
	picture = { trigger = { technology_group = western } picture = WE_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = muslim technology_group = turkishtech technology_group = steppestech } } picture = ISL_GN_eventPicture }
	picture = { trigger = { technology_group = eastern } picture = EE_GN_eventPicture }
	picture = { trigger = { technology_group = indian } picture = IND_GN_eventPicture }
	picture = { trigger = { technology_group = chinese } picture = EA_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = soudantech technology_group = sub_saharan technology_group = central_african technology_group = malagasy_tech technology_group = east_african } } picture = AFR_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = austranesian technology_group = hawaii_tech } } picture = SEA_GN_eventPicture }
	picture = { trigger = { OR = { technology_group = mesoamerican technology_group = south_american } } picture = AMR_GN_eventPicture }
	
	trigger = {
		any_owned_province = {
			has_province_flag = time_to_demote
		}
	}
	immediate = {
		hidden_effect = {
			every_owned_province = {
				limit = {
					has_province_flag = time_to_demote
				}
				remove_greater_nobles = yes
				add_lesser_nobles = yes
			}
		}
	}
	
	option = {
		name = "POP_Estates.511.a"
		if = {
			limit = {
				OR = {
					ai = yes
					has_country_flag = hide_estate_changes
				}
			}
			hidden_effect = {
				every_owned_province = {
					clr_province_flag = time_to_demote
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = some_estate_changes
			}
			every_owned_province = {
				limit = {
					has_province_flag = time_to_demote
				}
				custom_tooltip = POP_Estates.511.tt
				hidden_effect = {
					clr_province_flag = time_to_demote
				}
			}
		}
		else = {
			hidden_effect = {
				random_owned_province = {
					limit = {
						has_province_flag = time_to_demote
					}
					province_event = {
						id = POP_Estates.512
						days = 1
					}
				}
			}
		}
	}
}

province_event = { ### Greater Nobles Demoted to Lesser Nobles
	id = POP_Estates.512
	title = "POP_Estates.512.t"
	desc = "POP_Estates.512.d"
	is_triggered_only = yes
	picture = { trigger = { owner = { technology_group = western } } picture = WE_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = muslim }  owner = { technology_group = turkishtech } owner = { technology_group = steppestech } } } picture = ISL_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = eastern } } picture = EE_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = indian } } picture = IND_GN_eventPicture }
	picture = { trigger = { owner = { technology_group = chinese } } picture = EA_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = soudantech } owner = { technology_group = sub_saharan } owner = { technology_group = central_african } owner = { technology_group = malagasy_tech } owner = { technology_group = east_african } } } picture = AFR_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = austranesian } owner = { technology_group = hawaii_tech } } } picture = SEA_GN_eventPicture }
	picture = { trigger = { OR = { owner = { technology_group = mesoamerican } owner = { technology_group = south_american } } } picture = AMR_GN_eventPicture }
	
	trigger = {
		NOT = { has_country_flag = hide_estate_changes }
		NOT = { has_country_flag = some_estate_changes }
	}
	
	option = {
		name = "POP_Estates.512.a"
		hidden_effect = {
			clr_province_flag = time_to_demote
			owner = {
				random_owned_province = {
					limit = {
						has_province_flag = time_to_demote
					}
					province_event = {
						id = POP_Estates.512
						days = 1
					}
				}
			}
		}
	}
}
country_event = { ### Estate change info
	id = POP_Estates.513
	title = "POP_Estates.513.t"
	desc = "POP_Estates.513.d"
	picture = ELECTION_REPUBLICAN_eventPicture
	is_triggered_only = yes
	trigger = {
		any_owned_province = { has_province_flag = estate_changed }
	}
	option = {
		name = "POP_Estates.501.a"
		every_owned_province = {
			limit = {
				has_province_flag = estate_changed
			}
			trigger_switch = {
				on_trigger = has_province_flag
				was_greater_nobles = { custom_tooltip = POP_Estates.513.tt1 }
				was_lesser_nobles = { custom_tooltip = POP_Estates.513.tt2 }
				was_tribals = { custom_tooltip = POP_Estates.513.tt3 }
				#was_freeholders = { custom_tooltip = POP_Estates.513.tt4 }
				greater_nobles_control_province = { custom_tooltip = POP_Estates.513.tt5 }
				lesser_nobles_control_province = { custom_tooltip = POP_Estates.513.tt6 }
				tribals_control_province = { custom_tooltip = POP_Estates.513.tt7 }
				#freeholders_control_province = { custom_tooltip = POP_Estates.513.tt8 }
			}
			hidden_effect = {
				clr_province_flag = estate_changed
			}
		}
	}
}

country_event = { ### Tribes swing in loyalty
	id = POP_Estates.575
	title = "POP_Estates.575.t"
	desc = "POP_Estates.575.d"
	picture = { trigger = { OR = { technology_group = chinese technology_group = turkishtech technology_group = western technology_group = eastern technology_group = indian technology_group = steppestech } } picture = MON_TRI_eventPicture }
	picture = { trigger = { OR = { technology_group = muslim technology_group = soudantech } } picture = ARAB_TRI_eventPicture }
	picture = { trigger = { OR = { technology_group = sub_saharan technology_group = central_african technology_group = malagasy_tech technology_group = east_african } } picture = AFR_LN_eventPicture }
	picture = { trigger = { OR = { technology_group = austranesian technology_group = hawaii_tech } } picture = SEA_LN_eventPicture }
	picture = { trigger = { OR = { technology_group = mesoamerican technology_group = south_american } } picture = AMR_LN_eventPicture }
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = {
			subtract_variable = { which = tribal_dip_ticker value = 5 }
			#	if = {
			#		limit = {
			#			NOT = { check_variable = { which = tribal_dip_ticker	value = 0.01 } }
			#		}
			#		set_variable = { which = tribal_dip_ticker	value = 0 }
			#	}
			if = {
				limit = {
					DIP = 6
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = 5 }
			}
			else_if = {
				limit = {
					DIP = 5
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = 3 }
			}
			else_if = {
				limit = {
					DIP = 4
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = 1 }
			}
			else_if = {
				limit = {
					DIP = 3
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = -1 }
			}
			else_if = {
				limit = {
					DIP = 2
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = -2 }
			}
			else_if = {
				limit = {
					DIP = 1
				}
				set_variable = { which = tribal_loyalty_diplo_skill 	value = -5 }
			}
			else = {
				set_variable = { which = tribal_loyalty_diplo_skill 	value = -10 }
			}
			random_list = {
				10 = { multiply_variable = { which = tribal_loyalty_diplo_skill 	value = 0.5 } }
				20 = { multiply_variable = { which = tribal_loyalty_diplo_skill 	value = 0.75 } }
				40 = {
					#multiply_variable = { which = tribal_loyalty_diplo_skill 	value = 1 } 
				}
				20 = { multiply_variable = { which = tribal_loyalty_diplo_skill 	value = 1.5 } }
				10 = { multiply_variable = { which = tribal_loyalty_diplo_skill 	value = 2 } }
			}
			random_list = {
				10 = { change_variable = { which = tribal_loyalty_diplo_skill 	value = -2 } }
				20 = { change_variable = { which = tribal_loyalty_diplo_skill 	value = -1 } }
				40 = { change_variable = { which = tribal_loyalty_diplo_skill 	value = 0 } }
				20 = { change_variable = { which = tribal_loyalty_diplo_skill 	value = 1 } }
				10 = { change_variable = { which = tribal_loyalty_diplo_skill 	value = 2 } }
			}
			multiply_variable = {   		   which = tribal_loyalty_diplo_skill	value = 0.001 }
			multiply_variable = { 		   which = tribal_loyalty_diplo_skill	value = 1000 }
			if = {
				limit = {
					check_variable = { which = tribal_loyalty_diplo_skill	value = 0.01 }
				}
				hidden_effect = {
					#set_variable = { which = tribes_loyalty_added_a 	value = 0 }
					set_variable = { which = tribes_loyalty_added_a		which = tribal_loyalty_diplo_skill }
				}
			}
			else = {
				hidden_effect = {
					#set_variable = { which = tribes_loyalty_removed_a 		value = 0 }
					set_variable = { which = tribes_loyalty_removed_a		which = tribal_loyalty_diplo_skill }
					multiply_variable = { which = tribes_loyalty_removed_a	value = -1 }
				}
			}
		}
	}
	
	option = {
		name = "POP_Estates.575.a"
		ai_chance = { factor = 100 }
		if = {
			limit = {
				check_variable = { which = tribal_loyalty_diplo_skill	value = 0.01 }
			}
			hidden_effect = {
				#set_variable = { which = tribes_loyalty_added 		value = 0 }
				set_variable = { which = tribes_loyalty_added 		which = tribes_loyalty_added_a }
				estate_tribes_loyalty_added = yes
			}
			custom_tooltip = estate_tribes_loyalty_added_a
		}
		else = {
			hidden_effect = {
				#set_variable = { which = tribes_loyalty_removed 			value = 0 }
				set_variable = { which = tribes_loyalty_removed 			which = tribes_loyalty_removed_a }
				estate_tribes_loyalty_removed = yes
			}
			custom_tooltip = estate_tribes_loyalty_removed_a
		}
		hidden_effect = {
			set_variable = { which = tribes_loyalty_removed_a 		value = 0 }
			set_variable = { which = tribal_loyalty_diplo_skill 	value = 0 }
		}
	}
}

country_event = { ### Revokation of Greater Noble privileges
	id = POP_Estates.600
	title = "POP_Estates.600.t"
	desc = "POP_Estates.600.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes
	
	immediate = {
		hidden_effect = {
			random_list = {
				20 = { country_event = { id = POP_Estates.601 days = 1 } }
				20 = { country_event = { id = POP_Estates.602 days = 1 } }
				20 = { country_event = { id = POP_Estates.603 days = 1 } }
				20 = { country_event = { id = POP_Estates.604 days = 1 } }
				20 = { country_event = { id = POP_Estates.605 days = 1 } }
			}
		}
	}
	
	option = {
		name = "POP_Estates.600.a"
		ai_chance = { factor = 100 }
	}
}

country_event = { ### No Effect
	id = POP_Estates.601
	title = "POP_Estates.601.t"
	desc = "POP_Estates.601.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0 } }
		clr_country_flag = GN_revokation_pain_signal
		clr_country_flag = GN_revokation_pain_1
		clr_country_flag = GN_revokation_pain_2
		clr_country_flag = GN_revokation_pain_3
		clr_country_flag = GN_revokation_pain_4
		clr_country_flag = GN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.601.a"
		ai_chance = { factor = 100 }
		greater_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Slight Effect
	id = POP_Estates.602
	title = "POP_Estates.602.t"
	desc = "POP_Estates.602.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0.5 } }
		clr_country_flag = GN_revokation_pain_signal
		clr_country_flag = GN_revokation_pain_1
		clr_country_flag = GN_revokation_pain_2
		clr_country_flag = GN_revokation_pain_3
		clr_country_flag = GN_revokation_pain_4
		clr_country_flag = GN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.602.a"
		ai_chance = { factor = 100 }
		greater_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Moderate Effect
	id = POP_Estates.603
	title = "POP_Estates.603.t"
	desc = "POP_Estates.603.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		#hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1 } }
		clr_country_flag = GN_revokation_pain_signal
		clr_country_flag = GN_revokation_pain_1
		clr_country_flag = GN_revokation_pain_2
		clr_country_flag = GN_revokation_pain_3
		clr_country_flag = GN_revokation_pain_4
		clr_country_flag = GN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.603.a"
		ai_chance = { factor = 100 }
		greater_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Significant Effect
	id = POP_Estates.604
	title = "POP_Estates.604.t"
	desc = "POP_Estates.604.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1.5 } }
		clr_country_flag = GN_revokation_pain_signal
		clr_country_flag = GN_revokation_pain_1
		clr_country_flag = GN_revokation_pain_2
		clr_country_flag = GN_revokation_pain_3
		clr_country_flag = GN_revokation_pain_4
		clr_country_flag = GN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.604.a"
		ai_chance = { factor = 100 }
		greater_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Severe Effect
	id = POP_Estates.605
	title = "POP_Estates.605.t"
	desc = "POP_Estates.605.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 2 } }
		clr_country_flag = GN_revokation_pain_signal
		clr_country_flag = GN_revokation_pain_1
		clr_country_flag = GN_revokation_pain_2
		clr_country_flag = GN_revokation_pain_3
		clr_country_flag = GN_revokation_pain_4
		clr_country_flag = GN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.605.a"
		ai_chance = { factor = 100 }
		greater_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Revokation of Lesser Noble privileges
	id = POP_Estates.700
	title = "POP_Estates.700.t"
	desc = "POP_Estates.700.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes
	
	immediate = {
		hidden_effect = {
			random_list = {
				20 = { country_event = { id = POP_Estates.701 } }
				20 = { country_event = { id = POP_Estates.702 } }
				20 = { country_event = { id = POP_Estates.703 } }
				20 = { country_event = { id = POP_Estates.704 } }
				20 = { country_event = { id = POP_Estates.705 } }
			}
			clr_country_flag = lesser_nobles_revoked_event
		}
	}
	
	option = {
		name = "POP_Estates.700.a"
		ai_chance = { factor = 100 }
	}
}

country_event = { ### No Effect
	id = POP_Estates.701
	title = "POP_Estates.701.t"
	desc = "POP_Estates.701.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0 } }
		clr_country_flag = LN_revokation_pain_signal
		clr_country_flag = LN_revokation_pain_1
		clr_country_flag = LN_revokation_pain_2
		clr_country_flag = LN_revokation_pain_3
		clr_country_flag = LN_revokation_pain_4
		clr_country_flag = LN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.701.a"
		ai_chance = { factor = 100 }
		lesser_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Slight Effect
	id = POP_Estates.702
	title = "POP_Estates.702.t"
	desc = "POP_Estates.702.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0.5 } }
		clr_country_flag = LN_revokation_pain_signal
		clr_country_flag = LN_revokation_pain_1
		clr_country_flag = LN_revokation_pain_2
		clr_country_flag = LN_revokation_pain_3
		clr_country_flag = LN_revokation_pain_4
		clr_country_flag = LN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.702.a"
		ai_chance = { factor = 100 }
		lesser_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Moderate Effect
	id = POP_Estates.703
	title = "POP_Estates.703.t"
	desc = "POP_Estates.703.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		#hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1 } }
		clr_country_flag = LN_revokation_pain_signal
		clr_country_flag = LN_revokation_pain_1
		clr_country_flag = LN_revokation_pain_2
		clr_country_flag = LN_revokation_pain_3
		clr_country_flag = LN_revokation_pain_4
		clr_country_flag = LN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.703.a"
		ai_chance = { factor = 100 }
		lesser_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Significant Effect
	id = POP_Estates.704
	title = "POP_Estates.704.t"
	desc = "POP_Estates.704.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1.5 } }
		clr_country_flag = LN_revokation_pain_signal
		clr_country_flag = LN_revokation_pain_1
		clr_country_flag = LN_revokation_pain_2
		clr_country_flag = LN_revokation_pain_3
		clr_country_flag = LN_revokation_pain_4
		clr_country_flag = LN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.704.a"
		ai_chance = { factor = 100 }
		lesser_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Severe Effect
	id = POP_Estates.705
	title = "POP_Estates.705.t"
	desc = "POP_Estates.705.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 2 } }
		clr_country_flag = LN_revokation_pain_signal
		clr_country_flag = LN_revokation_pain_1
		clr_country_flag = LN_revokation_pain_2
		clr_country_flag = LN_revokation_pain_3
		clr_country_flag = LN_revokation_pain_4
		clr_country_flag = LN_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.705.a"
		ai_chance = { factor = 100 }
		lesser_nobles_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Revokation of Lesser Noble privileges
	id = POP_Estates.800
	title = "POP_Estates.800.t"
	desc = "POP_Estates.800.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes
	
	immediate = {
		hidden_effect = {
			random_list = {
				20 = { country_event = { id = POP_Estates.801 } }
				20 = { country_event = { id = POP_Estates.802 } }
				20 = { country_event = { id = POP_Estates.803 } }
				20 = { country_event = { id = POP_Estates.804 } }
				20 = { country_event = { id = POP_Estates.805 } }
			}
			clr_country_flag = burghers_revoked_event
		}
	}
	
	option = {
		name = "POP_Estates.800.a"
		ai_chance = { factor = 100 }
	}
}

country_event = { ### No Effect
	id = POP_Estates.801
	title = "POP_Estates.801.t"
	desc = "POP_Estates.801.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0 } }
		clr_country_flag = BG_revokation_pain_signal
		clr_country_flag = BG_revokation_pain_1
		clr_country_flag = BG_revokation_pain_2
		clr_country_flag = BG_revokation_pain_3
		clr_country_flag = BG_revokation_pain_4
		clr_country_flag = BG_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.801.a"
		ai_chance = { factor = 100 }
		burghers_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Slight Effect
	id = POP_Estates.802
	title = "POP_Estates.802.t"
	desc = "POP_Estates.802.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 0.5 } }
		clr_country_flag = BG_revokation_pain_signal
		clr_country_flag = BG_revokation_pain_1
		clr_country_flag = BG_revokation_pain_2
		clr_country_flag = BG_revokation_pain_3
		clr_country_flag = BG_revokation_pain_4
		clr_country_flag = BG_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.802.a"
		ai_chance = { factor = 100 }
		burghers_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Moderate Effect
	id = POP_Estates.803
	title = "POP_Estates.803.t"
	desc = "POP_Estates.803.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		#hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1 } }
		clr_country_flag = BG_revokation_pain_signal
		clr_country_flag = BG_revokation_pain_1
		clr_country_flag = BG_revokation_pain_2
		clr_country_flag = BG_revokation_pain_3
		clr_country_flag = BG_revokation_pain_4
		clr_country_flag = BG_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.803.a"
		ai_chance = { factor = 100 }
		burghers_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Significant Effect
	id = POP_Estates.804
	title = "POP_Estates.804.t"
	desc = "POP_Estates.804.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 1.5 } }
		clr_country_flag = BG_revokation_pain_signal
		clr_country_flag = BG_revokation_pain_1
		clr_country_flag = BG_revokation_pain_2
		clr_country_flag = BG_revokation_pain_3
		clr_country_flag = BG_revokation_pain_4
		clr_country_flag = BG_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.804.a"
		ai_chance = { factor = 100 }
		burghers_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Severe Effect
	id = POP_Estates.805
	title = "POP_Estates.805.t"
	desc = "POP_Estates.805.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		hidden_effect = { multiply_variable = { which = stability_loss_on_privilege_revoke	value = 2 } }
		clr_country_flag = BG_revokation_pain_signal
		clr_country_flag = BG_revokation_pain_1
		clr_country_flag = BG_revokation_pain_2
		clr_country_flag = BG_revokation_pain_3
		clr_country_flag = BG_revokation_pain_4
		clr_country_flag = BG_revokation_pain_5
	}
	
	option = {
		name = "POP_Estates.805.a"
		ai_chance = { factor = 100 }
		burghers_loss_on_privilege_revoke = yes
	}
}

country_event = { ### Custom tool tip trigger tickers
	id = POP_Estates.900
	title = "POP_Estates.900.t"
	desc = "POP_Estates.900.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = no
	
	immediate = {
		every_country = {
			if = {
				limit = { check_variable = { which = estate_tribals_weight_share value = 0.01 } }
				if = {
					limit = { check_variable = { which = TR_favor_time_left	value = 1 } }
					subtract_variable = { which = TR_favor_time_left value = 1 }
				}
			}
			if = {
				limit = { check_variable = { which = estate_greater_nobles_weight_share value = 0.01 } }
				if = {
					limit = { check_variable = { which = GN_privileges_time_left value = 1 } }
					subtract_variable = { which = GN_privileges_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = GN_favor_time_left value = 1 } }
					subtract_variable = { which = GN_favor_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = GN_demand_support_time_left value = 1 } }
					subtract_variable = { which = GN_demand_support_time_left value = 1 }
				}
			}
			
			if = {
				limit = { check_variable = { which = estate_lesser_nobles_weight_share value = 0.01 } }
				if = {
					limit = { check_variable = { which = LN_privileges_time_left value = 1 } }
					subtract_variable = { which = LN_privileges_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = LN_favor_time_left value = 1 } }
					subtract_variable = { which = LN_favor_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = LN_demand_support_time_left value = 1 } }
					subtract_variable = { which = LN_demand_support_time_left value = 1 }
				}
			}
			
			if = {
				limit = { check_variable = { which = estate_burghers_weight_share value = 0.01 } }
				if = {
					limit = { check_variable = { which = BG_privileges_time_left value = 1 } }
					subtract_variable = { which = BG_privileges_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = BG_favor_time_left value = 1 } }
					subtract_variable = { which = BG_favor_time_left value = 1 }
				}
				if = {
					limit = { check_variable = { which = BG_demand_support_time_left value = 1 } }
					subtract_variable = { which = BG_demand_support_time_left value = 1 }
				}
			}
			if = {
				limit = { check_variable = { which = promote_demote_nobles_time_left value = 1 } }
				subtract_variable = { which = promote_demote_nobles_time_left value = 1 }
			}
		}
	}
	
	option = {
		name = "POP_Estates.900.a"
		ai_chance = { factor = 100 }
	}
}

 
province_event = {
	id = POP_Estates.999
	title = "POP_Estates.999.t"
	desc = "POP_Estates.999.d"
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes

	immediate = {
		if = {
			limit = {
				has_global_flag = first_estate_fired
			}
			POP_estate_reassignment_conquest = yes
		}
	}

	option = {
		name = "POP_Estates.999.a"
		ai_chance = { factor = 100 }
	}
}

# Reset estate loyalty unrest on conquest
province_event = {
	id = POP_Estates.9998
	title = no_localisation
	desc = no_localisation
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	
	hidden = yes
	
	immediate = {
		trigger_switch = {
			on_trigger = has_province_flag
			
			burghers_control_province = { EstateProv_SetUnrestMain = { estate=burghers } }
			greater_nobles_control_province = { EstateProv_SetUnrestMain = { estate=greater_nobles } }
			lesser_nobles_control_province = { EstateProv_SetUnrestMain = { estate=lesser_nobles } }
			tribals_control_province = { EstateProv_SetUnrestMain = { estate=tribals } }
		}
	}
	
	option = {
		name = no_localisation
	}
}

country_event = {
	id = POP_Estates.9999
	title = no_localisation
	desc = no_localisation
	picture = CITY_DEVELOPMENT_AU_eventPicture
	
	is_triggered_only = yes
	
	hidden = yes
	
	immediate = {
		every_country = {
			#if = {
				#limit = {
				#	exists = yes
				#}
				#if = {
				#	limit = {
				#		NOT = { has_country_flag = ELI }
				#	}
				#	set_country_flag = ELI
				#}
				if = {
					limit = {
						check_variable = { which = estate_burghers_weight_share value = 0.01 }
					}
					EstateLoyalty_CalcVar = { estate=burghers }
					EstateLoyalty_CalcShift = { estate=burghers return=shft_burghers_EL }
					EstateLoyalty_CalcLoyalty = { estate=burghers shft=shft_burghers_EL }
					
					set_variable = { which = shft_burghers_EL value = 0 }
				}
				else_if = {
					limit = {
						check_variable = { which = estate_burghers_weight_share_sm value = 0.001 }
					}
					EstateLoyalty_Clear = { estate=burghers }
					EstateLoyalty_ClearLoyalty = { estate=burghers }
				}
				
				if = {
					limit = {
						check_variable = { which = estate_tribals_weight_share value = 0.01 }
					}
					EstateLoyalty_CalcVar = { estate=tribals }
					EstateLoyalty_CalcShift = { estate=tribals return=shft_tribals_EL }
					EstateLoyalty_CalcLoyalty = { estate=tribals shft=shft_tribals_EL }
					
					set_variable = { which = shft_tribals_EL value = 0 }
				}
				else_if = {
					limit = {
						check_variable = { which = estate_tribals_weight_share_sm value = 0.001 }
					}
					EstateLoyalty_Clear = { estate=tribals }
					EstateLoyalty_ClearLoyalty = { estate=tribals }
				}
				
				# Nobles share a same variable
				set_variable = { which = estate_nobles_weight_share_sm value = 0 }
				set_variable = { which = estate_nobles_weight_share_old value = 0 }
				set_variable = { which = estate_nobles_treasury_annual_sm value = 0 }
				set_variable = { which = estate_nobles_treasury_annual_old value = 0 }
				
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_weight_share value = 0.01 }
					}
					EstateLoyalty_CalcVar = { estate=greater_nobles }
					
					change_variable = { which = estate_nobles_weight_share_sm which = estate_greater_nobles_weight_share_sm }
					change_variable = { which = estate_nobles_weight_share_old which = estate_greater_nobles_weight_share_old }
					
					change_variable = { which = estate_nobles_treasury_annual_sm which = estate_greater_nobles_treasury_annual_sm }
					change_variable = { which = estate_nobles_treasury_annual_old which = estate_greater_nobles_treasury_annual_old }
				}
				else_if = {
					limit = {
						check_variable = { which = estate_greater_nobles_weight_share_sm value = 0.001 }
					}
					EstateLoyalty_Clear = { estate=greater_nobles }
					EstateLoyalty_ClearLoyalty = { estate=greater_nobles }
				}
				
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_weight_share value = 0.01 }
					}
					EstateLoyalty_CalcVar = { estate=lesser_nobles }
					
					change_variable = { which = estate_nobles_weight_share_sm which = estate_lesser_nobles_weight_share_sm }
					change_variable = { which = estate_nobles_weight_share_old which = estate_lesser_nobles_weight_share_old }
					
					change_variable = { which = estate_nobles_treasury_annual_sm which = estate_lesser_nobles_treasury_annual_sm }
					change_variable = { which = estate_nobles_treasury_annual_old which = estate_lesser_nobles_treasury_annual_old }
				}
				else_if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_weight_share_sm value = 0.001 }
					}
					EstateLoyalty_Clear = { estate=lesser_nobles }
					EstateLoyalty_ClearLoyalty = { estate=lesser_nobles }
				}
				
				if = {
					limit = {
						check_variable = { which = estate_nobles_weight_share_sm value = 0.001 }
					}
					EstateLoyalty_CalcShift = { estate=nobles return=shft_nobles_EL }
					
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_weight_share value = 0.01 }
						}
						EstateLoyalty_CalcLoyalty = { estate=greater_nobles shft=shft_nobles_EL }
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_weight_share value = 0.01 }
						}
						EstateLoyalty_CalcLoyalty = { estate=lesser_nobles shft=shft_nobles_EL }
					}
					
					set_variable = { which = shft_nobles_EL value = 0 }
				}
			#}
			#else_if = {
			#	limit = {
			#		has_country_flag = ELI
			#	}
			#	clr_country_flag = ELI
			#	
			#	EstateLoyalty_Clear = { estate=burghers }
			#	EstateLoyalty_ClearLoyalty = { estate=burghers }
			#	
			#	EstateLoyalty_Clear = { estate=tribals }
			#	EstateLoyalty_ClearLoyalty = { estate=tribals }
			#	
			#	EstateLoyalty_Clear = { estate=greater_nobles }
			#	EstateLoyalty_ClearLoyalty = { estate=greater_nobles }
			#		
			#	EstateLoyalty_Clear = { estate=lesser_nobles }
			#	EstateLoyalty_ClearLoyalty = { estate=lesser_nobles }
			#}
		}
		if = {
			limit = {
				NOT = { has_global_flag = loyalty_init }
			}
			set_global_flag = loyalty_init
			CAS = {
				if = {
					limit = { ai = no }
					set_variable = { which = estate_greater_nobles_loyalty value = 0.25 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.25 }
					set_variable = { which = estate_burghers_loyalty value = 0.35 }
				}
				else = {
					set_variable = { which = estate_greater_nobles_loyalty value = 0.5 }
					set_variable = { which = estate_lesser_nobles_loyalty value = 0.5 }
					set_variable = { which = estate_burghers_loyalty value = 0.5 }
				}
			}
			FEZ = {
				set_variable = { which = estate_greater_nobles_loyalty value = 0.3 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.3 }
				set_variable = { which = estate_burghers_loyalty value = 0.4 }
				set_variable = { which = estate_tribals_loyalty value = 0.25 }
			}
			CHU = {
				set_variable = { which = estate_greater_nobles_loyalty value = 0.2 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.15 }
				set_variable = { which = estate_burghers_loyalty value = 0.1 }
				set_variable = { which = estate_tribals_loyalty value = 0.15 }
			}
			BYZ = {
				set_variable = { which = estate_greater_nobles_loyalty value = 0.35 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.4 }
				set_variable = { which = estate_burghers_loyalty value = 0.5 }
				set_variable = { which = estate_tribals_loyalty value = 0.15 }
			}
			OTT = {
				set_variable = { which = estate_greater_nobles_loyalty value = 0.7 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.7 }
				set_variable = { which = estate_burghers_loyalty value = 0.7 }
			}
			if = {
				limit = {
					tag = HAB
					ai = yes
				}
				set_variable = { which = estate_greater_nobles_loyalty value = 0.6 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.6 }
				set_variable = { which = estate_burghers_loyalty value = 0.6 }
			}
			if = {
				limit = {
					tag = MOS
					ai = yes
				}
				set_variable = { which = estate_greater_nobles_loyalty value = 0.7 }
				set_variable = { which = estate_lesser_nobles_loyalty value = 0.7 }
				set_variable = { which = estate_burghers_loyalty value = 0.7 }
			}
		}
	}
	
	option = {
		name = no_localisation
	}
}

country_event = {
	id = POP_Estates.1001
	title = no_localization
	desc = no_localization
	picture = CITY_DEVELOPMENT_AU_eventPicture
	
	hidden = yes
	
	trigger = {
		#exists = yes
		NOT = { has_country_flag = stuffs_set }
		has_global_flag = first_estate_fired
		NOT = { has_global_flag = estate_calc }
	}
	
	mean_time_to_happen = {
		months = 1
	}
	
	immediate = {
		#set_variable = { which = AI_savings_spent_on_loans					value = 1 }
		#set_variable = { which = AI_savings_spent_on_buildings				value = 1 }
		set_variable = { which = stability_points							value = 10 }
		
		cavalry_elephants_flags = yes
			
		set_variable = { which = stability_points 		value = 10 }
		
		get_multiplier_stability = yes
		#get_multiplier_prestige = yes
		get_multiplier_we = yes
		
		check_stability_modifier = yes
			
		get_country_total = yes
		
		#set_variable = {        which = capital_relevance               value = 0 } ### determines the strength of the capital to draw urban dwellers
		#set_variable = {        which = capital_relevance               which = country_total_pop }
		#multiply_variable = {   which = capital_relevance               value = 0.7 }
		check_centralisation_absolutism = yes
		
		export_to_variable = {
			which = tech_admin_level
			value = adm_tech
		}
		export_to_variable = {
			which = tech_diplo_level
			value = dip_tech
		}
		export_to_variable = {
			which = tech_milit_level
			value = mil_tech
		}
		
		set_variable = {    which = innate_rural_pop_tech		which = tech_admin_level }
		change_variable = { which = innate_rural_pop_tech		which = tech_diplo_level }
		multiply_variable = { which = innate_rural_pop_tech		value = 0.01 }
		change_variable = { which = innate_rural_pop_tech		value = 1 }
	
		if = {
			limit = {
				NOT = {
					has_country_modifier = travel_time_still_not_set
					
					has_global_flag = runner_still_running
				}
				
				has_global_flag = ce_initialized
			}
			add_country_modifier = {
				name = travel_time_still_not_set
				duration = 182
				hidden = yes
			}
			
			#set_country_flag = ce_keep_modifiers
			
			travel_time_prep = yes
			travel_time_main = yes
			travel_time_recap = yes
			travel_time_main = yes
			
			travel_isolated_provinces = yes
			
			travel_time_final = yes
		}
		
		every_owned_province = {
			limit = {
				is_city = yes
			}
			if = {
				limit = {
					check_variable = { which = tribals_ratio	value = 0.001 }
				}
				calc_settlement_score_gravity = yes # Recalculate the gravity
				tribals_settlement_calc = yes # Update tribal settlement score
				tribals_ratio_update = yes # Update the tribals ratio
				set_tribal_settlement = yes # Update modifiers
			}
			POP_estate_reassignment = yes
		}
		
		
		every_owned_province = {
			limit = {
				is_city = yes
			}
			set_variable = { which = national_multiplier_war_exhaustion		which = owner }
			set_variable = { which = national_multiplier_stability			which = owner }
			#set_variable = { which = national_multiplier_prestige 			which = owner }
			
			set_variable = { which = wealth_trauma_reduction				value = 0 }
			if = {
				limit = {
					check_variable = { which = province_trauma   value = 0.001 }
				}
				change_variable = { which = wealth_trauma_reduction				which = province_trauma }
				multiply_variable = { which = wealth_trauma_reduction				value = 0.05 }
			}
			change_variable = { which = wealth_trauma_reduction				value = 1 }
			
			#set_variable = { which = wartax_remain value = 1 }
			
			#if = {
			#	limit = {
			#		owner = { has_wartaxes = yes }
			#	}
			#	export_to_variable = {
			#		which = la_wt
			#		value = local_autonomy
			#	}
			#	multiply_variable = { which = la_wt value = 0.001 }
			#	
			#	set_variable = { which = wartax_lost value = 0.2 }
			#	subtract_variable = { which = wartax_lost which = la_wt }
			#	
			#	subtract_variable = { which = wartax_remain which = wartax_lost }
			#	
			#	set_variable = { which = la_wt value = 0 }
			#	set_variable = { which = wartax_lost value = 0 }
			#}
		}
		
		every_owned_province = {
			limit = {
				is_city = yes
			}
			export_to_variable = {
				which = t1
				value = modifier:local_autonomy
			}
			
			export_to_variable = {
				which = t2
				value = modifier:global_autonomy
				who = owner
			}
			
			set_variable = { which = t3 which = t1 }
			change_variable = { which = t3 which = t2 }
			multiply_variable = { which = t3 value = 100 }
			
			setAutonomy = { type=which inp=t3 }
			
			
			set_variable = { which = t1 value = 0 }
			set_variable = { which = t2 value = 0 }
			set_variable = { which = t3 value = 0 }
		}
		
		export_to_variable = {
			which = monthly_income_check
			value = monthly_income
		}
		set_variable = { which = country_trade_income           which = monthly_income_check }
		
		export_to_variable = {
			which = trade_income_percentage_check
			value = trade_income_percentage
		}
		multiply_variable = { which = country_trade_income      which = trade_income_percentage_check }
		
		calc_upper_pop = yes
		
		set_variable = { which = estate_greater_nobles_loyalty value = 0.5 }
		set_variable = { which = estate_lesser_nobles_loyalty value = 0.5 }
		set_variable = { which = estate_burghers_loyalty value = 0.5 }
		set_variable = { which = estate_tribals_loyalty value = 0.3 }
		#set_variable = { which = estate_freeholders_loyalty value = 0.5 }
		if = {
			limit = {
				is_nomad = yes
			}
			set_variable = { which = estate_tribals_loyalty value = 0.70 }
		}
		else_if = {
			limit = {
				is_tribal = yes
			}
			set_variable = { which = estate_tribals_loyalty value = 0.50 }
		}
		
		#set_variable = { which = average_autonomy 	value = 0 }
		#export_to_variable = {
		#	which = average_autonomy
		#	value = average_autonomy
		#}
			
		### Insure that loyalty can not go below 0 or above 100 ###
		update_estate_dlc_loyalty = yes
		
		set_variable = { which = estate_weight_bu						value = 0 }
		set_variable = { which = estate_burghers_weight_country			value = 0 } ### Total raw strength of Burghers
		set_variable = { which = estate_greater_nobles_weight_country 	value = 0 } ### Total raw strength of Greater Nobles
		set_variable = { which = estate_lesser_nobles_weight_country 	value = 0 } ### Total raw strength of Lesser Nobles
		set_variable = { which = estate_tribals_weight_country 			value = 0 }
		#set_variable = { which = estate_freeholders_weight_country 		value = 0 }
		
		every_owned_province = { ### Pull values from provinces to sum at country scope
			limit = {
				is_city = yes
			}
			set_variable = { 	  which = estate_rural_weight 			value = 0.001 }	### The rural power footprint of a province
			set_variable = { 	  which = estate_city_weight  			value = 0.001 } ### The urban power footprint of a province
			change_variable = {   which = estate_rural_weight 			which = upper_rural_weight }	 ### Upper classes strenghten the estates that they share a province with

			if = { # Burghers in Trade Companies
				limit = {
					is_owned_by_trade_company = yes
				}
				multiply_variable = { 	which = estate_rural_weight value = 0.35 }
			}
			change_variable = {   which = estate_city_weight  			which = upper_urban_weight }	 ### Upper classes strenghten the estates that they share a province with
			multiply_variable = { which = estate_rural_weight			value = 1.5 } ### Nobles have slight entrenchment advantage

			#set_variable = { 	  which = local_autonomy 				value = 0 }
			export_to_variable = {
				which = local_autonomy
				value = local_autonomy
			}
			if = {
				limit = {
					is_capital = yes
					check_variable = { which = local_autonomy value = 1 }
				}
				subtract_variable = {   which = local_autonomy			value = 1 }
			}
			multiply_variable = {   which = local_autonomy				value = 0.01 }
			
			
			set_variable = { which = estate_weight which = estate_city_weight }
			change_variable = { which = estate_weight which = estate_rural_weight }
			
			set_variable = { which = estate_la_multiplier which = local_autonomy }
			multiply_variable = { which = estate_la_multiplier value = 0.8 }
			change_variable = { which = estate_la_multiplier value = 0.2 }
			
			set_variable = { which = estate_weight_bu value = 1 }
			subtract_variable = { which = estate_weight_bu which = estate_la_multiplier }
			multiply_variable = { which = estate_weight_bu which = estate_weight }
			
			PREV = { change_variable = { which = estate_weight_bu which = PREV } }
			
			multiply_variable = { which = estate_weight which = estate_la_multiplier }
			
			set_variable = { which = estate_la_multiplier value = 0 }
			set_variable = { which = estate_weight_bu value = 0 }
			
			trigger_switch = {
				on_trigger = has_province_flag
				burghers_control_province = { ### Determine the total weight and influence of estate
					set_variable = { 			 which = estate_burghers_weight_country 			which = estate_weight }
					
					PREV = { change_variable = { which = estate_burghers_weight_country 			which = PREV } }
					
					set_variable = { which = estate_burghers_weight_country							value = 0 }
				}
				greater_nobles_control_province = { ### Determine the total weight and influence of estate
					set_variable = { 			 which = estate_greater_nobles_weight_country 		which = estate_weight }
					
					PREV = { change_variable = { which = estate_greater_nobles_weight_country 		which = PREV } }
					
					set_variable = { which = estate_greater_nobles_weight_country					value = 0 }
				}
				lesser_nobles_control_province = { ### Determine the total weight and influence of estate
					set_variable = { 			 which = estate_lesser_nobles_weight_country 		which = estate_weight }
					
					PREV = { change_variable = { which = estate_lesser_nobles_weight_country 		which = PREV } }
					
					set_variable = { which = estate_lesser_nobles_weight_country					value = 0 }
				}
				tribals_control_province = { ### Determine the total weight and influence of estate
					set_variable = { 			 which = estate_tribals_weight_country 				which = estate_weight }
					
					PREV = { change_variable = { which = estate_tribals_weight_country 				which = PREV } }
					
					set_variable = { which = estate_tribals_weight_country						value = 0 }
				}
				#freeholders_control_province = { ### Determine the total weight and influence of estate
				#	set_variable = { 			 which = estate_freeholders_weight_country 			which = estate_weight }
				#	
				#	PREV = { change_variable = { which = estate_freeholders_weight_country 			which = PREV } }
				#	
				#	set_variable = { which = estate_freeholders_weight_country						value = 0 }
				#}
			}
			
			set_variable = { which = local_autonomy 	value = 0 }
		}
		
		# Calculate weight share
		Influence_PrivilegeMod = yes
		
		multiply_variable = { which = EstateInfluence_GN which = estate_greater_nobles_weight_country }
		multiply_variable = { which = EstateInfluence_LN which = estate_lesser_nobles_weight_country }
		multiply_variable = { which = EstateInfluence_BG which = estate_burghers_weight_country }
		multiply_variable = { which = EstateInfluence_TR which = estate_tribals_weight_country }
		#multiply_variable = { which = EstateInfluence_FR which = estate_freeholders_weight_country }
		
		set_variable = { which = estate_bureaucracy_weight_share which = estate_weight_bu }
		set_variable = { which = estate_greater_nobles_weight_share which = estate_greater_nobles_weight_country }
		set_variable = { which = estate_lesser_nobles_weight_share which = estate_lesser_nobles_weight_country }
		set_variable = { which = estate_burghers_weight_share which = estate_burghers_weight_country }
		set_variable = { which = estate_tribals_weight_share which = estate_tribals_weight_country }
		#set_variable = { which = estate_freeholders_weight_share which = estate_freeholders_weight_country }
		
		change_variable = { which = estate_greater_nobles_weight_share which = EstateInfluence_GN }
		change_variable = { which = estate_lesser_nobles_weight_share which = EstateInfluence_LN }
		change_variable = { which = estate_burghers_weight_share which = EstateInfluence_BG }
		change_variable = { which = estate_tribals_weight_share which = EstateInfluence_TR }
		#change_variable = { which = estate_freeholders_weight_share which = EstateInfluence_FR }
		
		set_variable = { which = estate_weight_total which = estate_weight_bu }
		change_variable = { which = estate_weight_total which = estate_greater_nobles_weight_share }
		change_variable = { which = estate_weight_total which = estate_lesser_nobles_weight_share }
		change_variable = { which = estate_weight_total which = estate_burghers_weight_share }
		change_variable = { which = estate_weight_total which = estate_tribals_weight_share }
		#change_variable = { which = estate_weight_total which = estate_freeholders_weight_share }
		
		if = {
			limit = { is_variable_equal = { which = estate_weight_total value = 0 } }
			set_variable = { which = estate_weight_total value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
		}
		divide_variable = { which = estate_bureaucracy_weight_share which = estate_weight_total }
		divide_variable = { which = estate_greater_nobles_weight_share which = estate_weight_total }
		divide_variable = { which = estate_lesser_nobles_weight_share which = estate_weight_total }
		divide_variable = { which = estate_burghers_weight_share which = estate_weight_total }
		divide_variable = { which = estate_tribals_weight_share which = estate_weight_total }
		#divide_variable = { which = estate_freeholders_weight_share which = estate_weight_total }
		
		
		# Initialize estate privileges and modify influence share accordingly
		set_variable = { which = estate_weight_total value = 0 }
		
		set_variable = { which = EstateInfluence_GN value = 0 }
		set_variable = { which = EstateInfluence_LN value = 0 }
		set_variable = { which = EstateInfluence_BG value = 0 }
		set_variable = { which = EstateInfluence_TR value = 0 }
		#set_variable = { which = EstateInfluence_FR value = 0 }
	
		# Initialize estate privileges and modify influence share accordingly
		PrivilegeInit = yes
		
		set_country_flag = pre_set_privileges
		
		POP_set_privilege_demand_ticker = yes
		
		
		# Calculate weight share
		Influence_PrivilegeMod = yes
		
		multiply_variable = { which = EstateInfluence_GN which = estate_greater_nobles_weight_country }
		multiply_variable = { which = EstateInfluence_LN which = estate_lesser_nobles_weight_country }
		multiply_variable = { which = EstateInfluence_BG which = estate_burghers_weight_country }
		multiply_variable = { which = EstateInfluence_TR which = estate_tribals_weight_country }
		#multiply_variable = { which = EstateInfluence_FR which = estate_freeholders_weight_country }
		
		set_variable = { which = estate_bureaucracy_weight_share which = estate_weight_bu }
		set_variable = { which = estate_greater_nobles_weight_share which = estate_greater_nobles_weight_country }
		set_variable = { which = estate_lesser_nobles_weight_share which = estate_lesser_nobles_weight_country }
		set_variable = { which = estate_burghers_weight_share which = estate_burghers_weight_country }
		set_variable = { which = estate_tribals_weight_share which = estate_tribals_weight_country }
		#set_variable = { which = estate_freeholders_weight_share which = estate_freeholders_weight_country }
		
		change_variable = { which = estate_greater_nobles_weight_share which = EstateInfluence_GN }
		change_variable = { which = estate_lesser_nobles_weight_share which = EstateInfluence_LN }
		change_variable = { which = estate_burghers_weight_share which = EstateInfluence_BG }
		change_variable = { which = estate_tribals_weight_share which = EstateInfluence_TR }
		#change_variable = { which = estate_freeholders_weight_share which = EstateInfluence_FR }
		
		set_variable = { which = estate_weight_total which = estate_weight_bu }
		change_variable = { which = estate_weight_total which = estate_greater_nobles_weight_share }
		change_variable = { which = estate_weight_total which = estate_lesser_nobles_weight_share }
		change_variable = { which = estate_weight_total which = estate_burghers_weight_share }
		change_variable = { which = estate_weight_total which = estate_tribals_weight_share }
		#change_variable = { which = estate_weight_total which = estate_freeholders_weight_share }
		
		if = {
			limit = { is_variable_equal = { which = estate_weight_total value = 0 } }
			set_variable = { which = estate_weight_total value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
		}
		divide_variable = { which = estate_bureaucracy_weight_share which = estate_weight_total }
		divide_variable = { which = estate_greater_nobles_weight_share which = estate_weight_total }
		divide_variable = { which = estate_lesser_nobles_weight_share which = estate_weight_total }
		divide_variable = { which = estate_burghers_weight_share which = estate_weight_total }
		divide_variable = { which = estate_tribals_weight_share which = estate_weight_total }
		#divide_variable = { which = estate_freeholders_weight_share which = estate_weight_total }
		
		set_variable = { which = EstateInfluence_GN value = 0 }
		set_variable = { which = EstateInfluence_LN value = 0 }
		set_variable = { which = EstateInfluence_BG value = 0 }
		set_variable = { which = EstateInfluence_TR value = 0 }
		#set_variable = { which = EstateInfluence_FR value = 0 }
		
		set_variable = { which = estate_weight_total value = 0 }
		set_variable = { which = estate_weight_bu value = 0 }
		
		# Set stats
				
		# Initialize income and tax
		IncomeSetPre = yes
		
		every_owned_province = {
			limit = {
				is_city = yes
			}
			StatSetCore = yes
			IncomeSet = yes
			
			DevSet = yes
			
			#DevUpdate = {
			#	type1=Rural type2=tax
			#}
			#DevUpdate = {
			#	type1=Urban type2=production
			#}
			#DevUpdate = {
			#	type1=Upper type2=manpower
			#}
			DevUpdateRural = yes
			DevUpdateUrban = yes
			DevUpdateUpper = yes
			update_misc_expenses_if_capital = yes
			#clr_province_flag = update_capital
			
			StatCleanup = yes
		}
		# Set provincial income and its taxation
		get_estate_income = yes
		
		IncomeSetPost = yes
		
		#ptm_subtribe_recalc_all = yes
			
		### Calculate the share of country power for each estate
		#set_variable = {	which = estate_unit_maintenance_modifier 			value = 0 } ### This will scale up levy maintenance over time.  Eventually, it becomes more expensive than state troops, incentivizing revokation of levy privileges
		set_variable = {	which = estate_unit_maintenance_modifier 			value = 250 }
		change_variable = { which = estate_unit_maintenance_modifier 			which = year_ticker }
		multiply_variable = { which = estate_unit_maintenance_modifier 			value = 0.004 }
		
		set_variable = { 	which = estate_burghers_treasury_annual 			which = EstateIncome_BG_Total }	### Annual gross income gain for estate
		set_variable = {	which = estate_greater_nobles_treasury_annual		which = EstateIncome_GN_Total }	### Annual gross income gain for estate
		set_variable = {	which = estate_lesser_nobles_treasury_annual		which = EstateIncome_LN_Total }	### Annual gross income gain for estate
		set_variable = {	which = estate_tribals_treasury_annual				which = EstateIncome_TR_Total }
		
		#ptm_subtribe_add_all = yes
		
		change_variable = { which = estate_tribals_treasury_annual 				which = estate_tribals_being_tribals }
		
		
		every_owned_province = { ### Determines treasuries and other money related stats for estates
			limit = {
				is_city = yes
			}
			trigger_switch = {
				on_trigger = has_province_flag
				burghers_control_province = { ### Determines the importance of each province to the estate which controls it.  Estates cling on harder to more important provinces
					#set_variable = { 	  which = estate_burghers_weight_country 				value = 0 }
					set_variable = {   which = estate_burghers_weight_country 				which = PREV }
					#set_variable = {	  which = estate_burghers_province_percentage 			value = 0 }
					set_variable = { 	  which = estate_burghers_province_percentage 			which = estate_weight }
					multiply_variable = { which = estate_burghers_province_percentage 			value = 100 }
					
					if = {
						limit = { is_variable_equal = { which = estate_burghers_weight_country value = 0 } }
						set_variable = { which = estate_burghers_weight_country value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
					}
					#else = {
						divide_variable = {
							which = estate_burghers_province_percentage
							which = estate_burghers_weight_country
						}
					#}
				}
				greater_nobles_control_province = { ### Determines the importance of each province to the estate which controls it, also adds tax related income
					#set_variable = {	  which = estate_greater_nobles_weight_country 				value = 0 }
					set_variable = {   which = estate_greater_nobles_weight_country 				which = PREV }
					#set_variable = { 	  which = estate_greater_nobles_province_percentage 			value = 0 } ### The percentage weight this province accounts for relative to the country total
					set_variable = { 	  which = estate_greater_nobles_province_percentage 			which = estate_weight }
					multiply_variable = { which = estate_greater_nobles_province_percentage 			value = 100 }
					#if = {
					#	limit = {
					#		is_variable_equal = {
					#			which = estate_greater_nobles_weight_country
					#			value = 0
					#		}
					#	}
					#	
					#	# log = "<ERROR><BD47B400><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
					#	
					#}
					#else = {
						divide_variable = {
							which = estate_greater_nobles_province_percentage
							which = estate_greater_nobles_weight_country
						}
					#}
					
					#if = { ### Stop gap to remove double flagging
					#	limit = {
					#		has_province_flag = lesser_nobles_control_province
					#	}
						clr_province_flag = lesser_nobles_control_province
					#}
				}
				lesser_nobles_control_province = { ### Determines the importance of each province to the estate which controls it
					#set_variable = {	  which = estate_lesser_nobles_weight_country 				value = 0 }
					set_variable = {   which = estate_lesser_nobles_weight_country 				which = PREV }
					#set_variable = { 	  which = estate_lesser_nobles_province_percentage			value = 0 }
					set_variable = { 	  which = estate_lesser_nobles_province_percentage			which = estate_weight }
					multiply_variable = { which = estate_lesser_nobles_province_percentage			value = 100 }
					
					if = {
						limit = { is_variable_equal = { which = estate_lesser_nobles_weight_country value = 0 } }
						set_variable = { which = estate_lesser_nobles_weight_country value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
					}
					#else = {
						divide_variable = {
							which = estate_lesser_nobles_province_percentage
							which = estate_lesser_nobles_weight_country
						}
					#}
					
					#if = { ### Stop gap to remove double flagging
					#	limit = {
					#		has_province_flag = greater_nobles_control_province
					#	}
						clr_province_flag = greater_nobles_control_province
					#}
				}
				tribals_control_province = { ### Determines the importance of each province to the estate which controls it
					#set_variable = {	  which = estate_tribals_weight_country 				value = 0 }
					set_variable = {   which = estate_tribals_weight_country 				which = PREV }
					#set_variable = { 	  which = estate_tribals_province_percentage			value = 0 }
					set_variable = { 	  which = estate_tribals_province_percentage			which = estate_weight }
					multiply_variable = { which = estate_tribals_province_percentage			value = 100 }
					#if = {
					#	limit = {
					#		is_variable_equal = {
					#			which = estate_tribals_weight_country
					#			value = 0
					#		}
					#	}
					#	
					#	# log = "<ERROR><E7B2CA90><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
					#	
					#}
					#else = {
						divide_variable = {
							which = estate_tribals_province_percentage
							which = estate_tribals_weight_country
						}
					#}
					
					#if = { ### Stop gap to remove double flagging
					#	limit = {
					#		has_province_flag = greater_nobles_control_province
					#	}
						clr_province_flag = greater_nobles_control_province
					#}
				}
				#freeholders_control_province = { ### Determines the importance of each province to the estate which controls it
				#	set_variable = {	  which = estate_freeholders_weight_country 				value = 0 }
				#	change_variable = {   which = estate_freeholders_weight_country 				which = PREV }
				#	set_variable = { 	  which = estate_freeholders_province_percentage			value = 0 }
				#	set_variable = { 	  which = estate_freeholders_province_percentage			which = estate_weight }
				#	multiply_variable = { which = estate_freeholders_province_percentage			value = 100 }
				#	if = {
				#		limit = {
				#			is_variable_equal = {
				#				which = estate_freeholders_weight_country
				#				value = 0
				#			}
				#		}
				#		
				#		# log = "<ERROR><8C531340><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#		
				#	}
				#	else = {
				#		divide_variable = {
				#			which = estate_freeholders_province_percentage
				#			which = estate_freeholders_weight_country
				#		}
				#	}
				#}
			}
		}
		
		# Estates pay 'state maintenance' for their pops
		every_owned_province = {
			limit = {
				is_city = yes
			}
			
			#set_variable = { which = local_autonomy 	value = 0 }
			export_to_variable = {
				which = local_autonomy
				value = local_autonomy
			}
			if = {
				limit = {
					is_capital = yes
					check_variable = { which = local_autonomy value = 1 }
				}
				subtract_variable = {   which = local_autonomy			value = 1 }
			}
			multiply_variable = {   which = local_autonomy                    value = 0.01 }
			set_variable = { which = estate_state_maintenance which = total_pop }
			multiply_variable = { which = estate_state_maintenance which = local_autonomy }
			
			set_variable = { which = local_autonomy 	value = 0 }
			
			# 100 / 12 = 8.333...
			divide_variable = { which = estate_state_maintenance value = 8.3 }
			
			trigger_switch = {
				on_trigger = has_province_flag
				greater_nobles_control_province = {
					set_variable = { which = estate_greater_nobles_treasury_annual which = estate_state_maintenance }
					
					PREV = { subtract_variable = { which = estate_greater_nobles_treasury_annual which = PREV } }
					
					set_variable = { which = estate_greater_nobles_treasury_annual value = 0 }
				}
				lesser_nobles_control_province = {
					set_variable = { which = estate_lesser_nobles_treasury_annual which = estate_state_maintenance }
					
					PREV = { subtract_variable = { which = estate_lesser_nobles_treasury_annual which = PREV } }
					
					set_variable = { which = estate_lesser_nobles_treasury_annual value = 0 }
				}
				burghers_control_province = {
					set_variable = { which = estate_burghers_treasury_annual which = estate_state_maintenance }
					
					PREV = { subtract_variable = { which = estate_burghers_treasury_annual which = PREV } }
					
					set_variable = { which = estate_burghers_treasury_annual value = 0 }
				}
				tribals_control_province = {
					set_variable = { which = estate_tribals_treasury_annual which = estate_state_maintenance }
					multiply_variable = { which = estate_tribals_treasury_annual value = 0.25 }
					
					PREV = { subtract_variable = { which = estate_tribals_treasury_annual which = PREV } }
					
					set_variable = { which = estate_tribals_treasury_annual value = 0 }
				}
			}
		}
		
		set_variable = { which = estate_burghers_treasury					which = estate_burghers_treasury_annual }
		set_variable = { which = estate_greater_nobles_treasury				which = estate_greater_nobles_treasury_annual }
		set_variable = { which = estate_lesser_nobles_treasury				which = estate_lesser_nobles_treasury_annual }
		### Startup treasuries added ###
		if = {
			limit = {
				check_variable = { which = estate_burghers_treasury      			value = 0.01 }
			}
			multiply_variable = { which = estate_burghers_treasury 						value = 8 }
		}
		if = {
			limit = {
				check_variable = { which = estate_greater_nobles_treasury      		value = 0.01 }
			}
			multiply_variable = { which = estate_greater_nobles_treasury 				value = 6 }
		}
		if = {
			limit = {
				check_variable = { which = estate_lesser_nobles_treasury      		value = 0.01 }
			}
			multiply_variable = { which = estate_lesser_nobles_treasury 				value = 6 }
		}
		
		# Later used for construction assess
		#set_variable = { 	which = treasury_limit 	which = year_ticker }
		#multiply_variable = { which = treasury_limit 	value = 0.02 }
		#change_variable = { which = treasury_limit 	value = 10 }
		
		if = { ### If estate exists, calculate years of cash variable
			limit = {
				check_variable = { which = estate_burghers_weight_share      	value = 0.01 }
			}
			#set_variable = { 	which = estate_burghers_years_of_cash			value = 0 }
			set_variable = { 	which = estate_burghers_years_of_cash			which = estate_burghers_treasury }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_burghers_treasury_annual
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><E9137EB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			if = {
				limit = { is_variable_equal = { which = estate_burghers_treasury_annual value = 0 } }
				set_variable = { which = estate_burghers_treasury_annual value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
			}
			#else = {
				divide_variable = {
					which = estate_burghers_years_of_cash
					which = estate_burghers_treasury_annual
				}
			#}
			#set_variable = { 	which = estate_burghers_fort_forcelimit 		value = 0.01 }
			#set_variable = { 	which = estate_burghers_fort_forcelimit 		which = estate_burghers_treasury_annual }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
			#	divide_variable = {
			#		which = estate_burghers_fort_forcelimit
			#		which = estate_unit_maintenance_modifier
			#	}
			#}
			#multiply_variable = { which = estate_burghers_fort_forcelimit			value = 0.2 }
		}
		if = { ### If estate exists, calculate years of cash variable and forcelimits
			limit = {
				check_variable = { which = estate_greater_nobles_weight_share      	value = 0.01 }
			}
			#set_variable = { 	  which = estate_greater_nobles_years_of_cash			value = 0 }
			set_variable = { 	  which = estate_greater_nobles_years_of_cash			which = estate_greater_nobles_treasury }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_greater_nobles_treasury_annual
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><66522DC0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_greater_nobles_years_of_cash
					which = estate_greater_nobles_treasury_annual
				}
			#}
			#set_variable = { 	  which = estate_greater_nobles_infantry_forcelimit		value = 0 }
			set_variable = { 	  which = estate_greater_nobles_infantry_forcelimit		which = estate_greater_nobles_treasury_annual } ### Forcelimit it ultimately contingent on how much the estate is capable of paying
			#set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		value = 0 }
			set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		which = estate_greater_nobles_treasury_annual }
			#set_variable = { 	  which = estate_greater_nobles_artillery_forcelimit	value = 0 }
			set_variable = { 	  which = estate_greater_nobles_artillery_forcelimit	which = estate_greater_nobles_treasury_annual }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_greater_nobles_infantry_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			### Higher maintenance modifier through time ultimately depresses forcelimit
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_greater_nobles_cavalry_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_greater_nobles_artillery_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			
			set_variable = { which = estate_greater_nobles_land		value = 0 }
			set_variable = { which = estate_greater_nobles_cavalry_land		value = 0 }
			every_owned_province = {
				limit = {
					has_province_flag = greater_nobles_control_province
				}
				PREV = { change_variable = { which = estate_greater_nobles_land		value = 1 } }
				if = {
					limit = {
						NOT = { has_province_flag = no_horses_present }
					}
					PREV = { change_variable = { which = estate_greater_nobles_cavalry_land		value = 1 } }
				}
			}
			if = {
				limit = {
					NOT = { check_variable = { which = estate_greater_nobles_cavalry_land		value = 1 } }
				}
				set_variable = { 	  which = estate_greater_nobles_cavalry_forcelimit		value = 0.001 }
				divide_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 7 } ### Troops are infantry only
				multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 0.001 }
				multiply_variable = { which = estate_greater_nobles_infantry_forcelimit		value = 1000 }
				set_variable = { which = estate_greater_nobles_infantry_ratio				value = 1 }
				set_variable = { which = estate_greater_nobles_cavalry_ratio				value = 0 }
			}
			else = {
				divide_variable = { which = estate_greater_nobles_cavalry_land			which = estate_greater_nobles_land }
				set_variable = { which = estate_greater_nobles_cavalry_ratio			which = estate_greater_nobles_cavalry_land }
				
				multiply_variable = { which = estate_greater_nobles_cavalry_ratio			value = 0.35 }
				
				set_variable = { which = estate_greater_nobles_infantry_ratio				value = 1 }
				subtract_variable = { which = estate_greater_nobles_infantry_ratio			which = estate_greater_nobles_cavalry_ratio }
										
				divide_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 7 }
				divide_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 7 }
				multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		which = estate_greater_nobles_cavalry_ratio }
				multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		which = estate_greater_nobles_infantry_ratio }
				
				multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 0.001 }
				multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit		value = 0.001 }
				multiply_variable = {   which = estate_greater_nobles_cavalry_forcelimit		value = 1000 }
				multiply_variable = {   which = estate_greater_nobles_infantry_forcelimit	value = 1000 }
			}
			#divide_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 40 }
			multiply_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 0.025 }
			multiply_variable = {   which = estate_greater_nobles_artillery_forcelimit		value = 0.001 }
			multiply_variable = { which = estate_greater_nobles_artillery_forcelimit		value = 1000 }
			
			
			if = { ### No artiller if not mil tech 10
				limit = {
					OR = {
						NOT = { mil_tech = 10 }
						
						AND = {
							capital_scope = {
								OR = {
									has_province_flag = part_cont_of_5255
									has_province_flag = part_cont_of_5254
								}
							}
							
							NOT = { mil_tech = 28 }
						}
					}
				}
				set_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = 0 }
			}
			
			#set_variable = { 	  which = estate_greater_nobles_fort_forcelimit 		value = 0.01 }
			#set_variable = { 	  which = estate_greater_nobles_fort_forcelimit 		which = estate_greater_nobles_treasury_annual }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
			#	divide_variable = {
			#		which = estate_greater_nobles_fort_forcelimit
			#		which = estate_unit_maintenance_modifier
			#	}
			#}
			#multiply_variable = {   which = estate_greater_nobles_fort_forcelimit			value = 0.1 }
			
			if = { ### Insures that nobles always have at least 1 regiment
				limit = {
					NOT = { check_variable = { which = estate_greater_nobles_infantry_forcelimit 	value = 1 } }
					check_variable = { which = estate_greater_nobles_treasury_annual					value = 2 }
					is_vassal = no
				}
				set_variable = { which = estate_greater_nobles_infantry_forcelimit	value = 1 }
			}
			if = { ### Don't buy artillery unless they have enough money
				limit = {
					NOT = { check_variable = { which = estate_greater_nobles_treasury_annual	value = 10 } }
				}
				set_variable = { which = estate_greater_nobles_artillery_forcelimit		value = 0 }
			}
			#if = {
			#	limit = {
			#		government = medieval_monarchy # more dependent on levies
			#	}
			#	change_variable = { which = estate_greater_nobles_cavalry_forcelimit		value = 1 }
			#}
			
			
			set_variable = { which = estate_greater_nobles_infantry		which = estate_greater_nobles_infantry_forcelimit }
			set_variable = { which = estate_greater_nobles_cavalry		which = estate_greater_nobles_cavalry_forcelimit }
			set_variable = { which = estate_greater_nobles_artillery	which = estate_greater_nobles_artillery_forcelimit }
			
			#set_variable = { 		which = estate_greater_nobles_infantry_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
			#set_variable = { 		which = estate_greater_nobles_cavalry_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
			#set_variable = { 		which = estate_greater_nobles_artillery_total 		value = 0 } ### This stat is kept in order to sum soldiers currently in the field with soldiers in reserve
			set_variable = { 	which = estate_greater_nobles_infantry_total 		which = estate_greater_nobles_infantry }
			set_variable = { 	which = estate_greater_nobles_cavalry_total 		which = estate_greater_nobles_cavalry }
			set_variable = { 	which = estate_greater_nobles_artillery_total 		which = estate_greater_nobles_artillery }
			if = {
				limit = {
					check_variable = { which = GN_infantry_remaining		value = 1 }
				}
				change_variable = { 	which = estate_greater_nobles_infantry_total 		which = GN_infantry_remaining  } ### Soldiers in the field that have not yet been killed
			}
			if = {
				limit = {
					check_variable = { which = GN_cavalry_remaining		value = 1 }
				}
				change_variable = { 	which = estate_greater_nobles_cavalry_total 		which = GN_cavalry_remaining  } ### Soldiers in the field that have not yet been killed
			}
			if = {
				limit = {
					check_variable = { which = GN_artillery_remaining		value = 1 }
				}
				change_variable = { 	which = estate_greater_nobles_artillery_total 		which = GN_artillery_remaining  } ### Soldiers in the field that have not yet been killed
			}
			
			change_variable = { 	which = estate_greater_nobles_infantry_forcelimit	value = 1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
			change_variable = { 	which = estate_greater_nobles_cavalry_forcelimit	value = 1 }
			change_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = 1 }
			if = {
				limit = {
					is_at_war = no
				}
				set_variable = { which = estate_greater_nobles_infantry_total		which = estate_greater_nobles_infantry }
				set_variable = { which = estate_greater_nobles_cavalry_total		which = estate_greater_nobles_cavalry }
				set_variable = { which = estate_greater_nobles_artillery_total		which = estate_greater_nobles_artillery }
			}
			
			
			if = { ### If above forcelimit, disband down
				limit = {
					NOT = { has_country_flag = raised_special_units }
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_infantry		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_infantry 		which = estate_greater_nobles_infantry_forcelimit }
						}
						set_variable = { which = estate_greater_nobles_infantry 		which = estate_greater_nobles_infantry_forcelimit }
					}
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_cavalry		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_cavalry 		which = estate_greater_nobles_cavalry_forcelimit }
						}
						set_variable = { which = estate_greater_nobles_cavalry 		which = estate_greater_nobles_cavalry_forcelimit }
					}
				}
				if = {
					limit = {
						check_variable = { which = estate_greater_nobles_artillery		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_greater_nobles_artillery 		which = estate_greater_nobles_artillery_forcelimit }
						}
						set_variable = { which = estate_greater_nobles_artillery 		which = estate_greater_nobles_artillery_forcelimit }
					}
				}
			}
			
			change_variable = { 	which = estate_greater_nobles_infantry_forcelimit	value = -1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
			change_variable = { 	which = estate_greater_nobles_cavalry_forcelimit	value = -1 }
			change_variable = { 	which = estate_greater_nobles_artillery_forcelimit	value = -1 }
			
			#set_variable = { 	which = estate_greater_nobles_total_forcelimit		value = 0 }
			set_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_infantry_forcelimit }
			change_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_cavalry_forcelimit }
			change_variable = { which = estate_greater_nobles_total_forcelimit		which = estate_greater_nobles_artillery_forcelimit }
			
			#set_variable = { 	which = estate_greater_nobles_troops_total 			value = 0 }
			set_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_infantry_total }
			change_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_cavalry_total }
			change_variable = { which = estate_greater_nobles_troops_total 			which = estate_greater_nobles_artillery_total }
			
			set_variable = { 	which = estate_greater_nobles_total_forcelimit		value = 0 }
			set_variable = { 	which = estate_greater_nobles_troops_total 			value = 0 }
			set_variable = { 	which = estate_artillery_amount						value = 0 }
			set_variable = { 	which = estate_construct_multiplier 				value = 0 }
			
			if = {
				limit = {
					check_variable = { which = estate_greater_nobles_infantry 		value = 0.001 }
				}
				multiply_variable = {   which = estate_greater_nobles_infantry 		value = 0.001 }
				multiply_variable = { which = estate_greater_nobles_infantry 		value = 1000 }
			}
			if = {
				limit = {
					check_variable = { which = estate_greater_nobles_cavalry 		value = 0.001 }
				}
				multiply_variable = {   which = estate_greater_nobles_cavalry 		value = 0.001 }
				multiply_variable = { which = estate_greater_nobles_cavalry 		value = 1000 }
			}
			if = {
				limit = {
					check_variable = { which = estate_greater_nobles_artillery 		value = 0.001 }
				}
				multiply_variable = {   which = estate_greater_nobles_artillery 		value = 0.001 }
				multiply_variable = { which = estate_greater_nobles_artillery 		value = 1000 }
			}
			
			#set_variable = { 	  which = estate_greater_nobles_total_soldiers 	value = 0 }
			set_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_infantry }
			change_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_cavalry }
			change_variable = {   which = estate_greater_nobles_total_soldiers 	which = estate_greater_nobles_artillery }
			
			
			### Everything below pertains to the paying of maintenance on raised units ###
			#set_variable = { 		which = estate_greater_nobles_infantry_maint		value = 0 }
			set_variable = { 		which = estate_greater_nobles_infantry_maint		which = estate_greater_nobles_infantry }
			multiply_variable = { 	which = estate_greater_nobles_infantry_maint		value = 1.8 }
			multiply_variable = { 	which = estate_greater_nobles_infantry_maint 		which = estate_unit_maintenance_modifier }
			#set_variable = { 		which = estate_greater_nobles_cavalry_maint			value = 0 }
			set_variable = { 		which = estate_greater_nobles_cavalry_maint			which = estate_greater_nobles_cavalry }
			multiply_variable = { 	which = estate_greater_nobles_cavalry_maint			value = 2.7 }
			multiply_variable = { 	which = estate_greater_nobles_cavalry_maint 		which = estate_unit_maintenance_modifier }
			#set_variable = { 		which = estate_greater_nobles_artillery_maint		value = 0 }
			set_variable = { 		which = estate_greater_nobles_artillery_maint		which = estate_greater_nobles_artillery }
			multiply_variable = { 	which = estate_greater_nobles_artillery_maint		value = 3.6 }
			multiply_variable = { 	which = estate_greater_nobles_artillery_maint 		which = estate_unit_maintenance_modifier }
			#set_variable = { 	    which = estate_greater_nobles_army_maintenance 		value = 0 }	### This variable is displayed in menu to show the player how much their estate is spending on troop maintenance
			set_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_infantry_maint }
			change_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_cavalry_maint }
			change_variable = { 	which = estate_greater_nobles_army_maintenance 		which = estate_greater_nobles_artillery_maint }
			subtract_variable = { 	which = estate_greater_nobles_treasury 				which = estate_greater_nobles_army_maintenance }
		}
		if = { ### If estate exists, calculate years of cash variable and forcelimits
			limit = {
				check_variable = { which = estate_lesser_nobles_weight_share      	value = 0.01 }
			}
			#set_variable = { 	  which = estate_lesser_nobles_years_of_cash			value = 0 }
			set_variable = { 	  which = estate_lesser_nobles_years_of_cash			which = estate_lesser_nobles_treasury }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_lesser_nobles_treasury_annual
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><F38D8A10><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			if = {
				limit = { is_variable_equal = { which = estate_lesser_nobles_treasury_annual value = 0 } }
				set_variable = { which = estate_lesser_nobles_treasury_annual value = 1 } #MASKS AN ISSUE WITH DIVISION BY ZERO!!!
			}
			#else = {
				divide_variable = {
					which = estate_lesser_nobles_years_of_cash
					which = estate_lesser_nobles_treasury_annual
				}
			#}
			#set_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 0.01 }
			set_variable = { which = estate_lesser_nobles_infantry_forcelimit		which = estate_lesser_nobles_treasury_annual }
			#set_variable = { which = estate_lesser_nobles_cavalry_forcelimit		value = 0.01 }
			set_variable = { which = estate_lesser_nobles_cavalry_forcelimit		which = estate_lesser_nobles_treasury_annual }
			#set_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 0.01 }
			set_variable = { which = estate_lesser_nobles_artillery_forcelimit		which = estate_lesser_nobles_treasury_annual }
			
			
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_lesser_nobles_infantry_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_lesser_nobles_cavalry_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = estate_lesser_nobles_artillery_forcelimit
					which = estate_unit_maintenance_modifier
				}
			#}
			set_variable = { which = estate_lesser_nobles_land		value = 0 }
			set_variable = { which = estate_lesser_nobles_cavalry_land		value = 0 }
			every_owned_province = {
				limit = {
					has_province_flag = lesser_nobles_control_province
				}
				PREV = { change_variable = { which = estate_lesser_nobles_land		value = 1 } }
				if = {
					limit = {
						NOT = { has_province_flag = no_horses_present }
					}
					PREV = { change_variable = { which = estate_lesser_nobles_cavalry_land		value = 1 } }
				}
			}
			if = {
				limit = {
					NOT = { check_variable = { which = estate_lesser_nobles_cavalry_land		value = 1 } }
				}
				set_variable = { 	  which = estate_lesser_nobles_cavalry_forcelimit		value = 0.001 }
				divide_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 7 } ### Troops are infantry only
				multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 0.001 }
				multiply_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 1000 }
				set_variable = { which = estate_lesser_nobles_infantry_ratio				value = 1 }
				set_variable = { which = estate_lesser_nobles_cavalry_ratio					value = 0 }
			}
			else = {
				divide_variable = { which = estate_lesser_nobles_cavalry_land			which = estate_lesser_nobles_land }
				set_variable = { which = estate_lesser_nobles_cavalry_ratio			which = estate_lesser_nobles_cavalry_land }
				
				multiply_variable = { which = estate_lesser_nobles_cavalry_ratio			value = 0.3 }
				
				set_variable = { which = estate_lesser_nobles_infantry_ratio				value = 1 }
				subtract_variable = { which = estate_lesser_nobles_infantry_ratio			which = estate_lesser_nobles_cavalry_ratio }
										
				divide_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 7 }
				divide_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 7 }
				multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		which = estate_lesser_nobles_cavalry_ratio }
				multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		which = estate_lesser_nobles_infantry_ratio }
				
				multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 0.001 }
				multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit		value = 0.001 }
				multiply_variable = {   which = estate_lesser_nobles_cavalry_forcelimit		value = 1000 }
				multiply_variable = {   which = estate_lesser_nobles_infantry_forcelimit	value = 1000 }
			}
			divide_variable = {   which = estate_lesser_nobles_artillery_forcelimit		value = 45 }
			multiply_variable = {   which = estate_lesser_nobles_artillery_forcelimit		value = 0.001 }
			multiply_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 1000 }
			
			if = { ### No artiller if not mil tech 10
				limit = {
					OR = {
						NOT = { mil_tech = 10 }
						
						AND = {
							capital_scope = {
								OR = {
									has_province_flag = part_cont_of_5255
									has_province_flag = part_cont_of_5254
								}
							}
							
							NOT = { mil_tech = 28 }
						}
					}
				}
				set_variable = { 	which = estate_lesser_nobles_artillery_forcelimit	value = 0 }
			}
			
			#set_variable = { 	  which = estate_lesser_nobles_fort_forcelimit 			value = 0.01 }
			#set_variable = { 	  which = estate_lesser_nobles_fort_forcelimit 			which = estate_lesser_nobles_treasury_annual }
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = estate_unit_maintenance_modifier
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><35C27AB0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
			#	divide_variable = {
			#		which = estate_lesser_nobles_fort_forcelimit
			#		which = estate_unit_maintenance_modifier
			#	}
			#}
			#multiply_variable = {   which = estate_lesser_nobles_fort_forcelimit			value = 0.1 }
			
			if = { ### Lesser Nobles must always have at least one unit as long as they make at least 2 ducats annually
				limit = {
					NOT = { check_variable = { which = estate_lesser_nobles_infantry_forcelimit 	value = 1 } }
					check_variable = { which = estate_lesser_nobles_treasury_annual				value = 2 }
					is_vassal = no
				}
				set_variable = { which = estate_lesser_nobles_infantry_forcelimit	value = 1 }
			}
			
			if = {
				limit = {
					NOT = { check_variable = { which = estate_lesser_nobles_treasury_annual	value = 10 } }
				}
				set_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = 0 }
			}
			#if = {
			#	limit = {
			#		government = medieval_monarchy # more dependent on levies
			#	}
			#	change_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = 1 }
			#}
			
			set_variable = { which = estate_lesser_nobles_infantry		which = estate_lesser_nobles_infantry_forcelimit }
			set_variable = { which = estate_lesser_nobles_cavalry		which = estate_lesser_nobles_cavalry_forcelimit }
			set_variable = { which = estate_lesser_nobles_artillery		which = estate_lesser_nobles_artillery_forcelimit }
			
			#set_variable = { 	which = estate_lesser_nobles_infantry_total 		value = 0 }
			#set_variable = { 	which = estate_lesser_nobles_cavalry_total 			value = 0 }
			#set_variable = { 	which = estate_lesser_nobles_artillery_total 		value = 0 }
			set_variable = { which = estate_lesser_nobles_infantry_total 		which = estate_lesser_nobles_infantry }
			set_variable = { which = estate_lesser_nobles_cavalry_total 			which = estate_lesser_nobles_cavalry }
			set_variable = { which = estate_lesser_nobles_artillery_total 		which = estate_lesser_nobles_artillery }
			if = {
				limit = {
					check_variable = { which = LN_infantry_remaining		value = 1 }
				}
				change_variable = { 	which = estate_lesser_nobles_infantry_total 		which = LN_infantry_remaining  } ### Soldiers in the field that have not yet been killed
			}
			if = {
				limit = {
					check_variable = { which = LN_cavalry_remaining		value = 1 }
				}
				change_variable = { 	which = estate_lesser_nobles_cavalry_total 		which = LN_cavalry_remaining  } ### Soldiers in the field that have not yet been killed
			}
			if = {
				limit = {
					check_variable = { which = LN_artillery_remaining		value = 1 }
				}
				change_variable = { 	which = estate_lesser_nobles_artillery_total 		which = LN_artillery_remaining  } ### Soldiers in the field that have not yet been killed
			}

			change_variable = { which = estate_lesser_nobles_infantry_forcelimit	value = 1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
			change_variable = { which = estate_lesser_nobles_cavalry_forcelimit		value = 1 }
			change_variable = { which = estate_lesser_nobles_artillery_forcelimit	value = 1 }
			if = {
				limit = {
					is_at_war = no
				}
				set_variable = { which = estate_lesser_nobles_infantry_total		which = estate_lesser_nobles_infantry }
				set_variable = { which = estate_lesser_nobles_cavalry_total		which = estate_lesser_nobles_cavalry }
				set_variable = { which = estate_lesser_nobles_artillery_total		which = estate_lesser_nobles_artillery }
			}
			if = { ### If above forcelimit, disband down
				limit = {
					NOT = { has_country_flag = raised_special_units }
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_infantry		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_infantry 		which = estate_lesser_nobles_infantry_forcelimit }
						}
						set_variable = { which = estate_lesser_nobles_infantry		which = estate_lesser_nobles_infantry_forcelimit }
					}
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_cavalry		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_cavalry 		which = estate_lesser_nobles_cavalry_forcelimit }
						}
						set_variable = { which = estate_lesser_nobles_cavalry		which = estate_lesser_nobles_cavalry_forcelimit }
					}
				}
				if = {
					limit = {
						check_variable = { which = estate_lesser_nobles_artillery		value = 2 }
					}
					if = {
						limit = {
							check_variable = { which = estate_lesser_nobles_artillery 		which = estate_lesser_nobles_artillery_forcelimit }
						}
						set_variable = { which = estate_lesser_nobles_artillery		which = estate_lesser_nobles_artillery_forcelimit }
					}
				}
			}
			change_variable = { which = estate_lesser_nobles_infantry_forcelimit		value = -1 } ### Scaling up then scaling down to prevent recruit and disband feedback loop
			change_variable = { which = estate_lesser_nobles_cavalry_forcelimit			value = -1 }
			change_variable = { which = estate_lesser_nobles_artillery_forcelimit		value = -1 }
			
			#set_variable = { 	which = estate_lesser_nobles_total_forcelimit		value = 0 }
			set_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_infantry_forcelimit }
			change_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_cavalry_forcelimit }
			change_variable = { which = estate_lesser_nobles_total_forcelimit		which = estate_lesser_nobles_artillery_forcelimit }
			
			#set_variable = { 	which = estate_lesser_nobles_troops_total 			value = 0 }
			set_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_infantry_total }
			change_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_cavalry_total }
			change_variable = { which = estate_lesser_nobles_troops_total 			which = estate_lesser_nobles_artillery_total }
			
			set_variable = { 	which = estate_lesser_nobles_total_forcelimit		value = 0 }
			set_variable = { 	which = estate_lesser_nobles_troops_total 			value = 0 }
			set_variable = { 	which = estate_artillery_amount						value = 0 }
			set_variable = { 	which = estate_construct_multiplier 				value = 0 }
			
			if = {
				limit = {
					check_variable = { which = estate_lesser_nobles_infantry 		value = 0.001 }
				}
				multiply_variable = {   which = estate_lesser_nobles_infantry 		value = 0.001 }
				multiply_variable = { which = estate_lesser_nobles_infantry 		value = 1000 }
			}
			if = {
				limit = {
					check_variable = { which = estate_lesser_nobles_cavalry 		value = 0.001 }
				}
				multiply_variable = {   which = estate_lesser_nobles_cavalry 			value = 0.001 }
				multiply_variable = { which = estate_lesser_nobles_cavalry 			value = 1000 }
			}
			if = {
				limit = {
					check_variable = { which = estate_lesser_nobles_artillery 		value = 0.001 }
				}
				multiply_variable = {   which = estate_lesser_nobles_artillery 		value = 0.001 }
				multiply_variable = { which = estate_lesser_nobles_artillery 		value = 1000 }
			}
			
			#set_variable = { 	  which = estate_lesser_nobles_total_soldiers 	value = 0 }
			set_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_infantry }
			change_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_cavalry }
			change_variable = {   which = estate_lesser_nobles_total_soldiers 	which = estate_lesser_nobles_artillery }
			
			### Everything below pertains to maintenance of lesser noble levies
			#set_variable = {    	which = estate_lesser_nobles_maint					value = 0 }
			#set_variable = { 		which = estate_lesser_nobles_infantry_maint			value = 0 }
			set_variable = { 		which = estate_lesser_nobles_infantry_maint			which = estate_lesser_nobles_infantry }
			multiply_variable = { 	which = estate_lesser_nobles_infantry_maint			value = 1.8 }
			multiply_variable = { 	which = estate_lesser_nobles_infantry_maint			which = estate_unit_maintenance_modifier }
			#set_variable = { 		which = estate_lesser_nobles_cavalry_maint			value = 0 }
			set_variable = { 		which = estate_lesser_nobles_cavalry_maint			which = estate_lesser_nobles_cavalry }
			multiply_variable = { 	which = estate_lesser_nobles_cavalry_maint			value = 2.7 }
			multiply_variable = { 	which = estate_lesser_nobles_cavalry_maint			which = estate_unit_maintenance_modifier }
			#set_variable = { 		which = estate_lesser_nobles_artillery_maint		value = 0 }
			set_variable = { 		which = estate_lesser_nobles_artillery_maint		which = estate_lesser_nobles_artillery }
			multiply_variable = { 	which = estate_lesser_nobles_artillery_maint		value = 3.6 }
			multiply_variable = { 	which = estate_lesser_nobles_artillery_maint		which = estate_unit_maintenance_modifier }
			#set_variable = { 	    which = estate_lesser_nobles_army_maintenance 		value = 0 }
			set_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_infantry_maint }
			change_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_cavalry_maint }
			change_variable = { 	which = estate_lesser_nobles_army_maintenance 		which = estate_lesser_nobles_artillery_maint }
			subtract_variable = { 	which = estate_lesser_nobles_treasury 				which = estate_lesser_nobles_army_maintenance }
		}
		
		### Estates pay for their local fortifications ###
		set_variable = { 	  which = estate_base_fort_maintenance_cost				value = 0.75 }
		multiply_variable = { which = estate_base_fort_maintenance_cost				which = estate_unit_maintenance_modifier }
		set_variable = { 	  which = estate_greater_nobles_fort_maintenance		value = 0 }
		set_variable = { 	  which = estate_lesser_nobles_fort_maintenance			value = 0 }
		set_variable = { 	  which = estate_burghers_fort_maintenance				value = 0 }
		set_variable = { 	  which = estate_greater_nobles_forts_total				value = 0 }
		set_variable = { 	  which = estate_lesser_nobles_forts_total				value = 0 }
		set_variable = { 	  which = estate_burghers_forts_total					value = 0 }
		every_owned_province = {
			limit = {
				OR = {
					has_building = local_fortification_1
					has_building = local_fortification_2
					has_building = local_fortification_3
				}
			}
			trigger_switch = {
				on_trigger = has_province_flag
				burghers_control_province = {
					trigger_switch = {
						on_trigger = has_building
						local_fortification_1 = {
							owner = { change_variable = { which = estate_burghers_forts_total 	value = 1 } }
						}
						local_fortification_2 = {
							owner = { change_variable = { which = estate_burghers_forts_total 	value = 2 } }
						}
						local_fortification_3 = {
							owner = { change_variable = { which = estate_burghers_forts_total 	value = 3 } }
						}
					}
				}
				greater_nobles_control_province = {
					trigger_switch = {
						on_trigger = has_building
						local_fortification_1 = {
							owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 1 } }
						}
						local_fortification_2 = {
							owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 2 } }
						}
						local_fortification_3 = {
							owner = { change_variable = { which = estate_greater_nobles_forts_total 	value = 3 } }
						}
					}
				}
				lesser_nobles_control_province = {
					trigger_switch = {
						on_trigger = has_building
						local_fortification_1 = {
							owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 1 } }
						}
						local_fortification_2 = {
							owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 2 } }
						}
						local_fortification_3 = {
							owner = { change_variable = { which = estate_lesser_nobles_forts_total 	value = 3 } }
						}
					}
				}
			}
		}
		set_variable = { 	  which = estate_greater_nobles_fort_maintenance	which = estate_greater_nobles_forts_total }
		set_variable = { 	  which = estate_lesser_nobles_fort_maintenance		which = estate_lesser_nobles_forts_total }
		set_variable = { 	  which = estate_burghers_fort_maintenance			which = estate_burghers_forts_total }
		set_variable = { 	  which = estate_greater_nobles_forts_total			value = 0 }
		set_variable = { 	  which = estate_lesser_nobles_forts_total			value = 0 }
		set_variable = { 	  which = estate_burghers_forts_total				value = 0 }
		multiply_variable = { which = estate_greater_nobles_fort_maintenance	which = estate_base_fort_maintenance_cost }
		multiply_variable = { which = estate_lesser_nobles_fort_maintenance     which = estate_base_fort_maintenance_cost }
		multiply_variable = { which = estate_burghers_fort_maintenance          which = estate_base_fort_maintenance_cost }
		if = {
			limit = { full_idea_group = fortification_ideas }
			multiply_variable = { which = estate_greater_nobles_fort_maintenance	value = 0.75 }
			multiply_variable = { which = estate_lesser_nobles_fort_maintenance     value = 0.75 }
			multiply_variable = { which = estate_burghers_fort_maintenance          value = 0.75 }
		}
		subtract_variable = { which = estate_greater_nobles_treasury			which = estate_greater_nobles_fort_maintenance }
		subtract_variable = { which = estate_lesser_nobles_treasury             which = estate_lesser_nobles_fort_maintenance }
		subtract_variable = { which = estate_burghers_treasury                  which = estate_burghers_fort_maintenance }
		
		### Calculates Tribal Host Number ###
		if = {
			limit = {
				check_variable = { which = estate_tribals_weight_share		value = 0.01 }
			}
			#set_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0 }
			#set_variable = { which = estate_tribals_wealth 					value = 0 }
			set_variable = { which = estate_tribals_wealth 				which = estate_tribals_treasury_annual }
			set_variable = { which = estate_tribals_wealth_startup_ticker 	which = estate_tribals_wealth }
			if = {
				limit = {
					is_nomad = yes
				}
				multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 60 }
			}
			else_if = {
				limit = {
					is_tribal = no
				}
				multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 35 }
			}
			else = {
				multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 50 }
			}
			multiply_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0.925 }
			change_variable = {   which = estate_tribals_treasury_annual		value = 10 } ### Giving something to work off of for dinky little tribes
			change_variable = { which = estate_tribals_wealth 					which = estate_tribals_wealth_startup_ticker }

			calc_tribal_tribute_favor = yes
			change_variable = {   which = estate_tribals_wealth				which = tribal_tribute_favor }
			
			#set_variable = { 	  which = estate_tribals_wealth_spent		value = 0 }
			set_variable = { 	  which = estate_tribals_wealth_spent 		which = estate_tribals_wealth }
			set_variable = { which = estate_tribals_wealth_startup_ticker 	value = 0 }
			
			
			if = {
				limit = {
					is_nomad = yes
				}
				set_horde_unity_var = yes
				
				#set_variable = { 	  which = estate_tribal_tribute				value = 0 } ### Money given from the tribe to the government if government is horde
				set_variable = { 	  which = estate_tribal_tribute				which = estate_tribals_wealth }
				#set_variable = { 	  which = estate_tribal_tribute_percent		value = 0 } ### Percentage gain based on Horde Unity
				set_variable = {	  which = estate_tribal_tribute_percent		which = horde_unity }
				multiply_variable = {   which = estate_tribal_tribute_percent	value = 0.01 }
				if = {
					limit = {
						NOT = { check_variable = { which = estate_tribal_tribute_percent		value = 0.3 } }
					}
					set_variable = {	  which = estate_tribal_tribute_percent		value = 0.3 } # Min 30% tribute floor, prevents death spirals
				}
				multiply_variable = { which = estate_tribal_tribute_percent		value = 0.01 } #Tribal Tribute rate, balance with this. 0.01 = 1% of the treasury as tribute
				multiply_variable = { which = estate_tribal_tribute				which = estate_tribal_tribute_percent }
				
				multiply_variable = { which = estate_tribals_wealth				value = 0.925 }
				set_variable = { 	  which = estate_tribals_wealth_percent		value = 0.075 }
				subtract_variable = { which = estate_tribals_wealth_percent		which = estate_tribal_tribute_percent }
				multiply_variable = { which = estate_tribals_wealth_spent 		which = estate_tribals_wealth_percent }
				set_variable = { 	  which = estate_tribal_tribute_percent		value = 0 }
				set_variable = { 	  which = estate_tribals_wealth_percent		value = 0 }
				
				calc_tribal_tribute = yes
				
				set_variable = { which = estate_tribal_tribute_percent		value = 0 }
				set_variable = { which = estate_tribal_tribute_cost			value = 0 }
			}
			else = {
				if = {
					limit = {
						check_variable = { which = estate_tribal_tribute		value = 0.001 }
					}
					clear_tribal_tribute = yes
				}
				multiply_variable = { which = estate_tribals_wealth			value = 0.925 }
				multiply_variable = { which = estate_tribals_wealth_spent 	value = 0.075 }
			}
			if = {
				limit = {
					NOT = { has_country_flag = TR_partial_support }
					NOT = { has_country_flag = TR_full_support }
				}
				set_variable = { which = estate_tribals_land		value = 0 }
				set_variable = { which = estate_tribals_cavalry_land		value = 0 }
				every_owned_province = {
					limit = {
						has_province_flag = tribals_control_province
					}
					PREV = { change_variable = { which = estate_tribals_land		value = 1 } }
					if = {
						limit = {
							NOT = { has_province_flag = no_horses_present }
						}
						PREV = { change_variable = { which = estate_tribals_cavalry_land		value = 1 } }
					}
				}
				if = {
					limit = {
						NOT = { check_variable = { which = estate_tribals_cavalry_land		value = 1 } }
					}
					#set_variable = { 	  which = estate_tribals_infantry_loyal		value = 0 }
					set_variable = { 	  which = estate_tribals_infantry_loyal		which = estate_tribals_wealth_spent }
					multiply_variable = { which = estate_tribals_infantry_loyal		which = estate_unit_maintenance_modifier }
					set_variable = { 	  which = estate_tribals_cavalry_loyal		value = 0.001 }
					divide_variable = {   which = estate_tribals_infantry_loyal		value = 8.5 } ### Troops are infantry only
					set_variable = { which = estate_tribals_infantry_ratio			value = 1 }
					set_variable = { which = estate_tribals_cavalry_ratio			value = 0 }
					multiply_variable = {   which = estate_tribals_infantry_loyal	value = 0.001 }
					multiply_variable = {   which = estate_tribals_infantry_loyal	value = 1000 }
				}
				else = {
					divide_variable = { which = estate_tribals_cavalry_land			which = estate_tribals_land }
					set_variable = { which = estate_tribals_cavalry_ratio			which = estate_tribals_cavalry_land }
					if = {
						limit = {
							is_nomad = yes
						}
						multiply_variable = { which = estate_tribals_cavalry_ratio	value = 0.8 }
					}
					else = {
						multiply_variable = { which = estate_tribals_cavalry_ratio	value = 0.4 }
					}
					set_variable = { which = estate_tribals_infantry_ratio			value = 1 }
					subtract_variable = { which = estate_tribals_infantry_ratio		which = estate_tribals_cavalry_ratio }
					
					#set_variable = { 	  which = estate_tribals_cavalry_loyal		value = 0.001 } ### Tribal troops don't pay maintenance and are always at forcelimit unless killed.  Forcelimit is determined by how much each month is spent from the wealth pool.
					#set_variable = { 	  which = estate_tribals_infantry_loyal		value = 0.001 }
					set_variable = { 	  which = estate_tribals_cavalry_loyal		which = estate_tribals_wealth_spent }
					set_variable = { 	  which = estate_tribals_infantry_loyal		which = estate_tribals_wealth_spent }
					multiply_variable = { which = estate_tribals_cavalry_loyal		which = estate_unit_maintenance_modifier }
					multiply_variable = { which = estate_tribals_infantry_loyal		which = estate_unit_maintenance_modifier }
					
					divide_variable = {   which = estate_tribals_cavalry_loyal		value = 8.5 }
					divide_variable = {   which = estate_tribals_infantry_loyal		value = 8.5 }
					multiply_variable = { which = estate_tribals_cavalry_loyal		which = estate_tribals_cavalry_ratio }
					multiply_variable = { which = estate_tribals_infantry_loyal		which = estate_tribals_infantry_ratio }
					multiply_variable = {   which = estate_tribals_cavalry_loyal	value = 0.001 }
					multiply_variable = {   which = estate_tribals_infantry_loyal	value = 0.001 }
					multiply_variable = { which = estate_tribals_cavalry_loyal		value = 1000 }
					multiply_variable = { which = estate_tribals_infantry_loyal		value = 1000 }
				}
			}
			if = {
				limit = {
					is_nomad = yes
				}
				if = {
					limit = {
						NOT = { check_variable = { which = estate_tribals_cavalry_loyal 	value = 1 } }
					}
					set_variable = { which = estate_tribals_cavalry_loyal 	value = 1 }
				}
			}
			else_if = {
				limit = {
					NOT = { check_variable = { which = estate_tribals_infantry_loyal 	value = 1 } }
				}
				set_variable = { which = estate_tribals_infantry_loyal 	value = 1 }
			}
			### Tribal troops don't pay maintenance and are always at forcelimit unless killed.  Forcelimit is determined by how much each month is spent from the wealth pool.
			#set_variable = { which = estate_tribals_infantry_host			value = 0 }
			set_variable = { which = estate_tribals_infantry_host			which = estate_tribals_infantry_loyal }
			#set_variable = { which = estate_tribals_cavalry_host			value = 0 }
			set_variable = { which = estate_tribals_cavalry_host			which = estate_tribals_cavalry_loyal }
			
			#change_variable = { which = estate_tribals_infantry_host 		which = estate_tribals_subtribe_infantry }
			#change_variable = { which = estate_tribals_cavalry_host 		which = estate_tribals_subtribe_cavalry }
				
			
			#set_variable = { 	which = estate_tribals_total_soldiers			value = 0 }
			set_variable = { which = estate_tribals_total_soldiers 			which = estate_tribals_cavalry_host }
			change_variable = { which = estate_tribals_total_soldiers 			which = estate_tribals_infantry_host }
			
			#ptm_subtribe_power_share_calc = yes
		}
		else = {
			set_variable = { which = tribal_tribute_favor				value = 0 }
		}
		
		# Updates the flags that display an estates influence
		POP_update_estates_influence = yes
		
		POP_privilege_corruption_calc = yes
		
		set_variable = { which = estate_unit_maintenance_modifier				value = 0 }
		#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_infantry_maint 			value = 0 }
		#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_cavalry_maint 			value = 0 }
		#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_greater_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_maint					value = 0 }
		#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_infantry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_cavalry_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
		#set_variable = { which = estate_lesser_nobles_artillery_maint			value = 0 }
		set_variable = { which = estate_base_fort_maintenance_cost				value = 0 }
		set_variable = { which = estate_greater_nobles_fort_maintenance			value = 0 }
		set_variable = { which = estate_lesser_nobles_fort_maintenance			value = 0 }
		set_variable = { which = estate_burghers_fort_maintenance				value = 0 }
		set_variable = { which = estate_greater_nobles_influence_ticker			value = 0 }
		set_variable = { which = estate_lesser_nobles_influence_ticker			value = 0 }
		set_variable = { which = estate_burghers_influence_ticker				value = 0 }
		set_variable = { which = estate_tribals_influence_ticker				value = 0 }
		#set_variable = { which = estate_freeholders_influence_ticker			value = 0 }
		set_variable = { which = estate_bureaucracy_influence_ticker			value = 0 }
		set_variable = { which = estate_lesser_nobles_promotion_check			value = 0 }
		set_variable = { which = estate_lesser_nobles_promotion_weight_subtract value = 0 }
		set_variable = { which = estate_tribals_being_tribals					value = 0 }
		set_variable = { which = estate_greater_nobles_land						value = 0 }
		set_variable = { which = estate_greater_nobles_cavalry_land				value = 0 }
		set_variable = { which = estate_greater_nobles_cavalry_ratio			value = 0 }
		set_variable = { which = estate_lesser_nobles_land						value = 0 }
		set_variable = { which = estate_lesser_nobles_cavalry_land				value = 0 }
		set_variable = { which = estate_lesser_nobles_cavalry_ratio				value = 0 }
		set_variable = { which = estate_tribals_land							value = 0 }
		set_variable = { which = estate_tribals_cavalry_land					value = 0 }
		set_variable = { which = estate_tribals_cavalry_ratio					value = 0 }
			
		every_owned_province = {
			limit = {
				is_wasteland = no
			}
			set_variable = { which = estate_rural_weight							 value = 0 }
			set_variable = { which = estate_city_weight								 value = 0 }
			set_variable = { which = nobles_burghers_disparity						 value = 0 }
			set_variable = { which = estate_burghers_weight_autonomy				 value = 0 }
			set_variable = { which = estate_greater_nobles_weight_autonomy			 value = 0 }
			set_variable = { which = estate_lesser_nobles_weight_autonomy			 value = 0 }
			set_variable = { which = estate_tribals_weight_autonomy					 value = 0 }
			#set_variable = { which = estate_freeholders_weight_autonomy				 value = 0 }
			set_variable = { which = estate_burghers_province_percentage			 value = 0 }
			set_variable = { which = estate_greater_nobles_province_percentage		 value = 0 }
			set_variable = { which = estate_lesser_nobles_province_percentage		 value = 0 }
			set_variable = { which = estate_tribals_province_percentage				 value = 0 }
			#set_variable = { which = estate_freeholders_province_percentage			 value = 0 }
			set_variable = { which = estate_state_maintenance						 value = 0 }
			set_variable = { which = estate_tribals_wealth_spent					 value = 0 }
			
			set_variable = { which = estate_lesser_nobles_treasury_annual value = 0 }
			set_variable = { which = estate_lesser_nobles_weight_country value = 0 }
			set_variable = { which = estate_greater_nobles_treasury_annual value = 0 }
			set_variable = { which = estate_greater_nobles_weight_country value = 0 }
			set_variable = { which = estate_burghers_treasury_annual value = 0 }
			set_variable = { which = estate_burghers_weight_country value = 0 }
			set_variable = { which = estate_tribals_treasury_annual value = 0 }
			set_variable = { which = estate_tribals_weight_country value = 0 }
		}
		
		every_owned_province = {
			limit = {
				is_city = yes
			}
			trigger_switch = {
				on_trigger = has_province_flag
				
				burghers_control_province = { EstateProv_SetUnrestMain = { estate=burghers } }
				greater_nobles_control_province = { EstateProv_SetUnrestMain = { estate=greater_nobles } }
				lesser_nobles_control_province = { EstateProv_SetUnrestMain = { estate=lesser_nobles } }
				tribals_control_province = { EstateProv_SetUnrestMain = { estate=tribals } }
			}
		}
		# Initialize some stuffs for newly spawned nations
		set_country_flag = stuffs_set
		
		add_yearly_manpower = 12
		# Spawn a starting army if needed
		#set_variable = { which = land_forcelimit_startup	value = 1 }
		export_to_variable = {
			which = land_forcelimit_startup
			value = land_forcelimit
		}
		if = {
			limit = {
				is_at_war = no
			}
			multiply_variable = { which = land_forcelimit_startup	value = 0.75 }
			multiply_variable = { which = land_forcelimit_startup	value = 0.001 }
			multiply_variable = { which = land_forcelimit_startup	value = 1000 }
			
		}
		if = {
			limit = {
				NOT = { check_variable = { which = land_forcelimit_startup	value = 1 } }
			}
			set_variable = { which = land_forcelimit_startup	value = 1 }
		}
		#set_variable = { which = army_size_startup	value = 0 }
		export_to_variable = {
			which = army_size_startup
			value = army_size
		}
		subtract_variable = { which = land_forcelimit_startup	which = army_size_startup }
		# log = "BEGIN: POP_Estates.1001"
		while = {
			limit = {
				check_variable = { which = land_forcelimit_startup	value = 1 }
			}
			capital_scope = {
				infantry = PREV
			}
			subtract_variable = { which = land_forcelimit_startup	value = 1 }
			if = {
				limit = {
					check_variable = { which = land_forcelimit_startup	value = 1 }
				}
				if = {
					limit = {
						is_nomad = yes
					}
					capital_scope = {
						cavalry = PREV
					}
					subtract_variable = { which = land_forcelimit_startup	value = 1 }
				}
				else = {
					capital_scope = {
						infantry = PREV
					}
					subtract_variable = { which = land_forcelimit_startup	value = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { which = land_forcelimit_startup	value = 1 }
				}
				capital_scope = {
					cavalry = PREV
				}
				subtract_variable = { which = land_forcelimit_startup	value = 1 }
			}
		}
		# log = "END: POP_Estates.1001"
		set_variable = { which = land_forcelimit_startup	value = 0 }
		set_variable = { which = army_size_startup			value = 0 }
	}
	
	option = {
		name = no_localization
		country_event = {
			id = POP_Census.007
			days = 3
		}
		country_event = {
			id = POP_Estates.1002
			days = 4
		}
		country_event = {
			id = POP_Census.801
			days = 6
		}
	}
}

country_event = {
	id = POP_Estates.1002
	title = no_localization
	desc = no_localization
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes
	
	immediate = {
		#set_variable = { which = patriarch_authority    value = 0 }
		export_to_variable = {
			which = church_influence
			value = patriarch_authority
			#   who = THIS
		}
		set_variable = { 	  which = upper_pop_religious 		value = 0 }
		every_owned_province = {
			limit = {
				has_owner_religion = yes
				is_overseas = no
			}
			#set_variable = { which = upper_pop_religious 	value = 0 }
			set_variable = { which = upper_pop_religious 	which = upper_pop }
			PREV = { change_variable = { which = upper_pop_religious	which = PREV } }
			#if = { ### Variables set to 0 after calculations are done
				#limit = {
				#	NOT = { has_global_flag = show_for_developers }
				#}
				set_variable = { which = upper_pop_religious 	value = 0 }
			#}
		}
		#set_variable = { 	  which = education_money_endowed 			value = 0 }
		#set_variable = { 	  which = education_level					value = 0 } ### Percentage of education achieved.  Changes slowly
		#set_variable = { 	  which = education_church_contribute 		value = 0 }	### Contribution to education by the clergy
		set_variable = {      which = education_church_contribute       which = church_influence }
		multiply_variable = { which = education_church_contribute		which = upper_pop_religious }
		multiply_variable = { which = education_church_contribute       value = 2 }
		set_variable = {	  which = upper_pop_religious				value = 0 }
		set_variable = { 	  which = education_money_endowed			value = 10 } ### Start up endowment
		multiply_variable = { which = education_money_endowed			which = upper_pop_non_overseas }
		#set_variable = { 	  which = education_startup_funding_level 	value = 0 }
		set_variable = { 	  which = education_startup_funding_level	which = development_level }
		divide_variable = {   which = education_startup_funding_level	value = 60 }
		multiply_variable = { which = education_startup_funding_level 	which = upper_pop_non_overseas } ### Church donates based on how many upper classes you have
		change_variable = {   which = education_startup_funding_level 	which = education_church_contribute }
		if = {
			limit = {
				is_nomad = yes
			}
			multiply_variable = { which = education_startup_funding_level	value = 0.25 }
		}
		if = {
			limit = {
				tag = OTT
			}
			multiply_variable = { which = education_startup_funding_level	value = 1.2 }
		}
		set_variable = { 	  which = education_ticker 					value = 100 } ### Will run 100 iterations later to determine starting education
		set_variable = { 	  which = education_level 					value = 10 } ### Set to ten to smooth end result
		#set_variable = { 	  which = monthly_country_income 			value = 0 }
		export_to_variable = {
			which = monthly_country_income
			value = monthly_income
			#	who = THIS
		}
		
		############################
		### Initializing Courts  ###
		############################
		
		#set_variable = { 	  which = court_money_endowed 			value = 0 }
		#set_variable = { 	  which = court_level					value = 0 } ### Percentage of education achieved.  Changes slowly
		set_variable = { 	  which = court_money_endowed			value = 10 } ### Start up endowment
		#set_variable = { 	  which = court_clients					value = 0 } ### Represents all people attending the court, thus higher cost
		set_variable = { 	  which = court_clients					which = upper_pop_non_overseas } ### Represents all people attending the court, thus higher cost
		set_variable = { 	  which = court_clients_vassal			value = 0 }
		#set_variable = { 	   which = court_capital_bonus 		value = 0 } ### Half the maintenance cost of your capital buildings is added to your court (glorious palaces help your court)
		set_variable = { 	   which = court_capital_bonus 		which = capital_maintenance }
		multiply_variable = {    which = court_capital_bonus		value = 0.5 }
		every_subject_country = {
			#limit = {
			#	exists = yes
			#}
			#set_variable = { 	which = court_clients_vassal 				value = 0 }
			set_variable = { 	which = court_clients_vassal 				which = upper_pop_non_overseas }
			multiply_variable = { which = court_clients_vassal				value = 0.5 }
			PREV = { change_variable = { which = court_clients_vassal		which = PREV } }
		}
		change_variable = {   which = court_clients					which = court_clients_vassal }
		if = {
			limit = {
				NOT = { check_variable = { which = court_clients 	value = 1 } }
			}
			set_variable = { which = court_clients 	value = 1 }
		}
		multiply_variable = { which = court_money_endowed			which = court_clients }
		trigger_switch = {
			on_trigger = has_country_modifier
			country_development_1 = {
				set_variable = { which = court_startup_funding_level	value = 0.65 }
			}
			country_development_2 = {
				set_variable = { which = court_startup_funding_level	value = 0.85 }
			}
			country_development_3 = {
				set_variable = { which = court_startup_funding_level	value = 1 }
			}
			country_development_4 = {
				set_variable = { which = court_startup_funding_level	value = 1.5 }
			}
			country_development_5 = {
				set_variable = { which = court_startup_funding_level	value = 1.75 }
			}
			country_development_6 = {
				set_variable = { which = court_startup_funding_level	value = 2 }
			}
			country_development_7 = {
				set_variable = { which = court_startup_funding_level	value = 2.5 }
			}
			country_development_8 = {
				set_variable = { which = court_startup_funding_level	value = 3.5 }
			}
			country_development_9 = {
				set_variable = { which = court_startup_funding_level	value = 5 }
			}
		}
		trigger_switch = {
			on_trigger = has_country_modifier
			title_6 = {
				change_variable = { which = court_startup_funding_level	value = 0.5 }
			}
			title_5 = {
				change_variable = { which = court_startup_funding_level	value = 0.3 }
			}
			title_4 = {
				change_variable = { which = court_startup_funding_level	value = 0.2 }
			}
			title_3 = {
				change_variable = { which = court_startup_funding_level	value = 0.1 }
			}
		}
		multiply_variable = { which = court_startup_funding_level 	which = court_clients }
		if = {
			limit = {
				vassal = 1
			}
			multiply_variable = { which = court_startup_funding_level	value = 1.15 }
		}
		if = {
			limit = {
				vassal = 3
			}
			multiply_variable = { which = court_startup_funding_level	value = 1.15 }
		}
		
		set_variable = { 	  which = court_ticker 					value = 100 } ### Will run 100 iterations later to determine starting education
		set_variable = { 	  which = court_level 					value = 10 } ### Set to ten to smooth end result
		#set_variable = { 	  which = monthly_country_income 		value = 0 }
		
		### Run 100 iterations to generate starting court level ###
		# log = "BEGIN: POP_Estates.1002"
		while = {
			limit = {
				check_variable = { which = court_ticker 	value = 1 }
			}
			subtract_variable = {  which = court_ticker				value = 1 } ### terminating variable for loop
			#set_variable = { 	   which = court_loss 				value = 0 } ### court that decays this year
			set_variable = { 	   which = court_loss 				which = court_level } ### court that decays this year
			multiply_variable = {  which = court_loss				value = 0.05 } ### 5 percent court decay rate
			
			#set_variable = { 	   which = court_endowed_new		value = 0 } ### Money going into the endowment pool this iteration
			set_variable = {    which = court_endowed_new 		which = court_startup_funding_level } ### Determined in startup event by set variable
			#set_variable = { 	   which = court_increase_cost 		value = 0 }
			set_variable = { 	   which = court_increase_cost		value = 1 } ### Increases cost of court over time (need more court to keep pace)
			set_variable = { 	   which = court_cost_ticker		which = court_level }
			change_variable = {    which = court_money_endowed		which = court_endowed_new }
			#set_variable = {       which = court_money_dispersed 	value = 0 }
			set_variable = {       which = court_money_dispersed 	which = court_money_endowed }
			multiply_variable = {  which = court_money_dispersed	value = 0.1 }
			multiply_variable = {  which = court_money_endowed		value = 0.9 }
			while = {
				limit = {
					check_variable = { which = court_cost_ticker 	value = 0.001 }
				}
				if = {
					limit = {
						NOT = { check_variable = { which = court_cost_ticker 	value = 40 } }
					}
					multiply_variable = { which = court_increase_cost	value = 1.05 }
					subtract_variable = { which = court_cost_ticker		value = 5 }
				}
				else_if = {
					limit = {
						NOT = { check_variable = { which = court_cost_ticker 	value = 70 } }
					}
					multiply_variable = { which = court_increase_cost	value = 1.1 }
					subtract_variable = { which = court_cost_ticker		value = 5 }
				}
				else = {
					multiply_variable = { which = court_increase_cost	value = 1.15 }
					subtract_variable = { which = court_cost_ticker		value = 5 }
				}
			}
			#set_variable = { 	  which = court_yearly_gain			value = 0 }
			set_variable = { 	  which = court_yearly_gain			which = court_money_dispersed }
			change_variable = {   which = court_yearly_gain			which = court_capital_bonus } ### Money added from capital bonus
			#set_variable = { 	  which = court_costlier_with_time 	value = 0 }
			set_variable = { 	  which = court_costlier_with_time 	value = 1 }
			#set_variable = { 	  which = court_costlier_time_modi  value = 0 }
			set_variable = { 	  which = court_costlier_time_modi  which = year_ticker }
			multiply_variable = {   which = court_costlier_time_modi  value = 0.004 }
			change_variable = {   which = court_costlier_with_time  which = court_costlier_time_modi }
			multiply_variable = { which = court_yearly_gain			which = court_costlier_with_time }
			multiply_variable = { which = court_yearly_gain 		value = 2 } ### Variable to tune court gain
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = court_increase_cost
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><8C2DD310><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = court_yearly_gain
					which = court_increase_cost
				}
			#}
			if = { ### Only divide for countries with at least 1 upper class
				limit = {
					check_variable = { which = court_clients value = 0.1 }
				}
				#if = {
				#	limit = {
				#		is_variable_equal = {
				#			which = court_clients
				#			value = 0
				#		}
				#	}
				#	
				#	# log = "<ERROR><CA4FB490><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
				#	
				#}
				#else = {
					divide_variable = {
						which = court_yearly_gain
						which = court_clients
					}
				#}
			}
			#set_variable = { 	  which = court_gross_gain 			value = 0 } ### Diagnostic variable for devs, disable when not testing
			set_variable = { 	  which = court_gross_gain 			which = court_yearly_gain }
			subtract_variable = { which = court_yearly_gain			which = court_loss }
			change_variable = {   which = court_level				which = court_yearly_gain }
		}
		#	multiply_variable = {  which = court_money_endowed		value = 1.25 } ### Initial boost
		court_recalculation = yes
		#if = { ### Variables set to 0 after calculations are done
			#limit = {
			#	NOT = { has_global_flag = show_for_developers }
			#}
			set_variable = { which = court_loss					value = 0 }
			set_variable = { which = court_money_dispersed		value = 0 }
			set_variable = { which = court_spent_AI				value = 0 }
			set_variable = { which = court_endowed_new			value = 0 }
			set_variable = { which = court_cost_ticker			value = 0 }
			set_variable = { which = court_clients				value = 0 }
			set_variable = { which = court_clients_vassal		value = 0 }
			set_variable = { which = court_increase_cost		value = 0 }
			set_variable = { which = court_costlier_with_time	value = 0 }
			set_variable = { which = court_costlier_time_modi	value = 0 }
			set_variable = { which = court_gross_gain			value = 0 }
		#}
		calc_alliance_limit = yes
		
		set_variable = { which = court_startup_funding_level value = 0 }


		set_variable = { which = university_education_multiplier	value = 0 }
		#set_variable = { which = university_foreign_students 		value = 0 }
		#set_variable = { which = university_student_sent_abroad 	value = 0 }
		set_variable = { which = population_needing_education		value = 0 }
		set_variable = { which = university_domestic_student		value = 0 }
		set_variable = { which = university_available_contribution      value = 0 }
		every_owned_province = {
			limit = {
				is_city = yes
			}
			PREV = {
				change_variable = { which = university_education_multiplier  which = PREV }
				#change_variable = { which = university_foreign_students          which = PREV }
				#change_variable = { which = university_student_sent_abroad   which = PREV }
				change_variable = { which = population_needing_education         which = PREV }
				change_variable = { which = university_domestic_student          which = PREV }
				change_variable = { which = university_available_contribution        which = PREV }
			}
		}
		
		if = { ### Only divide for countries with at least 0.1 upper class
			limit = {
				check_variable = { which = upper_pop_non_overseas value = 0.1 }
			}
			divide_variable = {
				which = university_education_multiplier
				which = upper_pop_non_overseas
			}
		}
		if = {
			limit = {
				NOT = { check_variable = { which = university_education_multiplier	value = 0 } }
			}
			set_variable = { which = university_education_multiplier 	value = 0 }
		}
		change_variable = { which = university_education_multiplier 	value = 1 }
		
		### Run 100 iterations to generate starting education level ###
		while = {
			limit = {
				check_variable = { which = education_ticker 	value = 1 }
			}
			subtract_variable = {  which = education_ticker				value = 1 } ### terminating variable for loop
			#set_variable = { 	   which = education_loss 				value = 0 } ### Education that decays this year
			set_variable = { 	   which = education_loss 				which = education_level } ### Education that decays this year
			multiply_variable = {  which = education_loss				value = 0.05 } ### 5 percent education decay rate
			
			
			#set_variable = { 	   which = education_endowed_new		value = 0 } ### Money going into the endowment pool this iteration
			set_variable = {    which = education_endowed_new 		which = education_startup_funding_level } ### Determined in startup event by set variable
			#set_variable = { 	   which = education_increase_cost 		value = 0 }
			set_variable = { 	   which = education_increase_cost		value = 1 } ### Increases cost of education over time (need more education to keep pace)
			set_variable = { 	   which = education_cost_ticker		which = education_level }
			change_variable = {    which = education_money_endowed		which = education_endowed_new }
			set_variable = {	   which = education_endowed_new		value = 0 }
			#set_variable = {       which = education_money_dispersed 	value = 0 }
			set_variable = {       which = education_money_dispersed 	which = education_money_endowed }
			multiply_variable = {  which = education_money_dispersed	value = 0.05 }
			multiply_variable = {  which = education_money_dispersed	which = university_education_multiplier	} ### Money spent is multiplied by university multiplier to amplify effects
			multiply_variable = {  which = education_money_endowed		value = 0.95 }
			while = {
				limit = {
					check_variable = { which = education_cost_ticker 	value = 0.001 }
				}
				multiply_variable = { which = education_increase_cost	value = 1.125 }
				subtract_variable = { which = education_cost_ticker		value = 5 }
			}
			#set_variable = { 	  which = education_yearly_gain			value = 0 }
			set_variable = { 	  which = education_yearly_gain			which = education_money_dispersed }
			#set_variable = { 	  which = education_costlier_with_time 	value = 0 }
			set_variable = { 	  which = education_costlier_with_time 	value = 1 }
			#set_variable = { 	  which = education_costlier_time_modi  value = 0 }
			set_variable = { 	  which = education_costlier_time_modi  which = year_ticker }
			multiply_variable = {   which = education_costlier_time_modi  value = 0.004 }
			change_variable = {   which = education_costlier_with_time  which = education_costlier_time_modi }
			multiply_variable = { which = education_yearly_gain			which = education_costlier_with_time }
			multiply_variable = { which = education_yearly_gain 		value = 1.3 } ### Variable to tune education gain
			#if = {
			#	limit = {
			#		is_variable_equal = {
			#			which = education_increase_cost
			#			value = 0
			#		}
			#	}
			#	
			#	# log = "<ERROR><57212FA0><THIS:[This.GetName]><PREV:[Prev.GetName]><ROOT:[Root.GetName]><FROM:[From.GetName]> Division by zero!"
			#	
			#}
			#else = {
				divide_variable = {
					which = education_yearly_gain
					which = education_increase_cost
				}
			#}
			
			if = { ### Only divide for countries with at least 0.1 upper class
				limit = {
					check_variable = { which = upper_pop_non_overseas value = 0.1 }
				}
				divide_variable = {
					which = education_yearly_gain
					which = upper_pop_non_overseas
				}
			}
			subtract_variable = { which = education_yearly_gain			which = education_loss }
			
			change_variable = {   which = education_level				which = education_yearly_gain }
		}
		multiply_variable = { which = education_money_endowed			value = 1.75 }
		# log = "END: POP_Estates.1002"
		
		### Remove all education before re-assigning
		remove_education = yes
		
		### ASSIGN EDUCATION MODIFIERS
		# Originally written by Imincus
		if = { limit = { check_variable = { which = education_level value = 40 } }
			if = { limit = { check_variable = { which = education_level value = 65 } }
				if = { limit = { check_variable = { which = education_level value = 80 } }
					if = { limit = { check_variable = { which = education_level value = 100 } }
						add_disp_modifier = { mod=education_level_enlightened }
					}
					else = {
						add_disp_modifier = { mod=education_level_exceptional }
					}
				}
				else = {
					add_disp_modifier = { mod=education_level_high }
				}
			}
			else = {
				if = { limit = { check_variable = { which = education_level value = 50 } }
					add_disp_modifier = { mod=education_level_good }
				}
				else = {
					add_disp_modifier = { mod=education_level_fair }
				}
			}
		}
		else = {
			if = { limit = { check_variable = { which = education_level value = 20 } }
				if = { limit = { check_variable = { which = education_level value = 30 } }
					add_disp_modifier = { mod=education_level_average }
				}
				else = {
					add_disp_modifier = { mod=education_level_poor }
				}
			}
			else = {
				if = { limit = { check_variable = { which = education_level value = 10 } }
					add_disp_modifier = { mod=education_level_mediocre }
				}
				else = {
					add_disp_modifier = { mod=education_level_illiterate }
				}
			}
		}
		
		
		set_variable = { which = education_startup_funding_level value = 0 }
		set_variable = { which = education_cost_ticker value = 0 }
		set_variable = { which = education_money_dispersed value = 0 }
		set_variable = { which = education_costlier_time_modi value = 0 }
		set_variable = { which = education_costlier_with_time value = 0 }
		set_variable = { which = education_increase_cost value = 0 }
		set_variable = { which = education_loss value = 0 }
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 500 }
#				NOT = { check_variable = { which = 1856_development value = 0.001 } }
#			}
#			set_variable = { which = 1856_development which = development_level }
#		}
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 400 }
#				NOT = { check_variable = { which = 1756_development value = 0.001 } }
#			}
#			set_variable = { which = 1756_development which = development_level }
#		}
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 300 }
#				NOT = { check_variable = { which = 1656_development value = 0.001 } }
#			}
#			set_variable = { which = 1656_development which = development_level }
#		}
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 200 }
#				NOT = { check_variable = { which = 1556_development value = 0.001 } }
#			}
#			set_variable = { which = 1556_development which = development_level }
#		}
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 100 }
#				NOT = { check_variable = { which = 1456_development value = 0.001 } }
#			}
#			set_variable = { which = 1456_development which = development_level }
#		}
#		if = {
#			limit = {
#				check_variable = { which = year_ticker value = 1 }
#				NOT = { check_variable = { which = 1356_development value = 0.001 } }
#			}
#			set_variable = { which = 1356_development which = development_level }
#		}
	}
	
	option = {
		name = no_localization
		country_event = {
			id = POP_Estates.1003
			days = 31
		}
	}
}

country_event = {
	id = POP_Estates.1003
	title = no_localization
	desc = no_localization
	picture = CITY_DEVELOPMENT_AU_eventPicture
	is_triggered_only = yes
	hidden = yes

	immediate = {
		export_to_variable = {
			which = monthly_country_income
			value = monthly_income
		}
		
		set_variable = {
			which = aiTreasuryGeneral
			value = 6
		}
		
		if = {
			limit = {
				check_variable = { which = upper_pop			value = 30 }
			}
			change_variable = {
				which = aiTreasuryGeneral
				value = 30
			}
		}
		else_if = {
			limit = {
				check_variable = { which = upper_pop			value = 20 }
			}
			change_variable = {
				which = aiTreasuryGeneral
				value = 25
			}
		}
		else_if = {
			limit = {
				check_variable = { which = upper_pop			value = 10 }
			}
			change_variable = {
				which = aiTreasuryGeneral
				value = 20
			}
		}
		else_if = {
			limit = {
				check_variable = { which = upper_pop			value = 5 }
			}
			change_variable = {
				which = aiTreasuryGeneral
				value = 15
			}
		}
		else_if = {
			limit = {
				check_variable = { which = upper_pop			value = 1 }
			}
			change_variable = {
				which = aiTreasuryGeneral
				value = 10
			}
		}
		
		multiply_variable = {
			which = aiTreasuryGeneral
			which = monthly_country_income
		}
		
		set_variable = {
			which = ducat_gain
			value = 18
		}
		multiply_variable = {
			which = ducat_gain
			which = monthly_country_income
		}
		
		scaled_ducat_gained_country = yes
	}
	
	option = {
		name = no_localization
	}
}
